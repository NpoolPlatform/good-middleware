// Code generated by ent, DO NOT EDIT.

package topmostgood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// TopMostID applies equality check predicate on the "top_most_id" field. It's identical to TopMostIDEQ.
func TopMostID(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopMostID), v))
	})
}

// DisplayIndex applies equality check predicate on the "display_index" field. It's identical to DisplayIndexEQ.
func DisplayIndex(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppGoodID)))
	})
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppGoodID)))
	})
}

// TopMostIDEQ applies the EQ predicate on the "top_most_id" field.
func TopMostIDEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopMostID), v))
	})
}

// TopMostIDNEQ applies the NEQ predicate on the "top_most_id" field.
func TopMostIDNEQ(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopMostID), v))
	})
}

// TopMostIDIn applies the In predicate on the "top_most_id" field.
func TopMostIDIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTopMostID), v...))
	})
}

// TopMostIDNotIn applies the NotIn predicate on the "top_most_id" field.
func TopMostIDNotIn(vs ...uuid.UUID) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTopMostID), v...))
	})
}

// TopMostIDGT applies the GT predicate on the "top_most_id" field.
func TopMostIDGT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopMostID), v))
	})
}

// TopMostIDGTE applies the GTE predicate on the "top_most_id" field.
func TopMostIDGTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopMostID), v))
	})
}

// TopMostIDLT applies the LT predicate on the "top_most_id" field.
func TopMostIDLT(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopMostID), v))
	})
}

// TopMostIDLTE applies the LTE predicate on the "top_most_id" field.
func TopMostIDLTE(v uuid.UUID) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopMostID), v))
	})
}

// TopMostIDIsNil applies the IsNil predicate on the "top_most_id" field.
func TopMostIDIsNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTopMostID)))
	})
}

// TopMostIDNotNil applies the NotNil predicate on the "top_most_id" field.
func TopMostIDNotNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTopMostID)))
	})
}

// DisplayIndexEQ applies the EQ predicate on the "display_index" field.
func DisplayIndexEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexNEQ applies the NEQ predicate on the "display_index" field.
func DisplayIndexNEQ(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIn applies the In predicate on the "display_index" field.
func DisplayIndexIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexNotIn applies the NotIn predicate on the "display_index" field.
func DisplayIndexNotIn(vs ...uint32) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexGT applies the GT predicate on the "display_index" field.
func DisplayIndexGT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexGTE applies the GTE predicate on the "display_index" field.
func DisplayIndexGTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLT applies the LT predicate on the "display_index" field.
func DisplayIndexLT(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLTE applies the LTE predicate on the "display_index" field.
func DisplayIndexLTE(v uint32) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIsNil applies the IsNil predicate on the "display_index" field.
func DisplayIndexIsNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayIndex)))
	})
}

// DisplayIndexNotNil applies the NotNil predicate on the "display_index" field.
func DisplayIndexNotNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayIndex)))
	})
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.TopMostGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitPrice)))
	})
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitPrice)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TopMostGood) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TopMostGood) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TopMostGood) predicate.TopMostGood {
	return predicate.TopMostGood(func(s *sql.Selector) {
		p(s.Not())
	})
}
