// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredgood"
	"github.com/google/uuid"
)

// RequiredGoodCreate is the builder for creating a RequiredGood entity.
type RequiredGoodCreate struct {
	config
	mutation *RequiredGoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rgc *RequiredGoodCreate) SetCreatedAt(u uint32) *RequiredGoodCreate {
	rgc.mutation.SetCreatedAt(u)
	return rgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableCreatedAt(u *uint32) *RequiredGoodCreate {
	if u != nil {
		rgc.SetCreatedAt(*u)
	}
	return rgc
}

// SetUpdatedAt sets the "updated_at" field.
func (rgc *RequiredGoodCreate) SetUpdatedAt(u uint32) *RequiredGoodCreate {
	rgc.mutation.SetUpdatedAt(u)
	return rgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableUpdatedAt(u *uint32) *RequiredGoodCreate {
	if u != nil {
		rgc.SetUpdatedAt(*u)
	}
	return rgc
}

// SetDeletedAt sets the "deleted_at" field.
func (rgc *RequiredGoodCreate) SetDeletedAt(u uint32) *RequiredGoodCreate {
	rgc.mutation.SetDeletedAt(u)
	return rgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableDeletedAt(u *uint32) *RequiredGoodCreate {
	if u != nil {
		rgc.SetDeletedAt(*u)
	}
	return rgc
}

// SetMainGoodID sets the "main_good_id" field.
func (rgc *RequiredGoodCreate) SetMainGoodID(u uuid.UUID) *RequiredGoodCreate {
	rgc.mutation.SetMainGoodID(u)
	return rgc
}

// SetRequiredGoodID sets the "required_good_id" field.
func (rgc *RequiredGoodCreate) SetRequiredGoodID(u uuid.UUID) *RequiredGoodCreate {
	rgc.mutation.SetRequiredGoodID(u)
	return rgc
}

// SetMust sets the "must" field.
func (rgc *RequiredGoodCreate) SetMust(b bool) *RequiredGoodCreate {
	rgc.mutation.SetMust(b)
	return rgc
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableMust(b *bool) *RequiredGoodCreate {
	if b != nil {
		rgc.SetMust(*b)
	}
	return rgc
}

// SetCommission sets the "commission" field.
func (rgc *RequiredGoodCreate) SetCommission(b bool) *RequiredGoodCreate {
	rgc.mutation.SetCommission(b)
	return rgc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableCommission(b *bool) *RequiredGoodCreate {
	if b != nil {
		rgc.SetCommission(*b)
	}
	return rgc
}

// SetID sets the "id" field.
func (rgc *RequiredGoodCreate) SetID(u uuid.UUID) *RequiredGoodCreate {
	rgc.mutation.SetID(u)
	return rgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rgc *RequiredGoodCreate) SetNillableID(u *uuid.UUID) *RequiredGoodCreate {
	if u != nil {
		rgc.SetID(*u)
	}
	return rgc
}

// Mutation returns the RequiredGoodMutation object of the builder.
func (rgc *RequiredGoodCreate) Mutation() *RequiredGoodMutation {
	return rgc.mutation
}

// Save creates the RequiredGood in the database.
func (rgc *RequiredGoodCreate) Save(ctx context.Context) (*RequiredGood, error) {
	var (
		err  error
		node *RequiredGood
	)
	if err := rgc.defaults(); err != nil {
		return nil, err
	}
	if len(rgc.hooks) == 0 {
		if err = rgc.check(); err != nil {
			return nil, err
		}
		node, err = rgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequiredGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rgc.check(); err != nil {
				return nil, err
			}
			rgc.mutation = mutation
			if node, err = rgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rgc.hooks) - 1; i >= 0; i-- {
			if rgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RequiredGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RequiredGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rgc *RequiredGoodCreate) SaveX(ctx context.Context) *RequiredGood {
	v, err := rgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rgc *RequiredGoodCreate) Exec(ctx context.Context) error {
	_, err := rgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgc *RequiredGoodCreate) ExecX(ctx context.Context) {
	if err := rgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rgc *RequiredGoodCreate) defaults() error {
	if _, ok := rgc.mutation.CreatedAt(); !ok {
		if requiredgood.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := requiredgood.DefaultCreatedAt()
		rgc.mutation.SetCreatedAt(v)
	}
	if _, ok := rgc.mutation.UpdatedAt(); !ok {
		if requiredgood.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := requiredgood.DefaultUpdatedAt()
		rgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rgc.mutation.DeletedAt(); !ok {
		if requiredgood.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := requiredgood.DefaultDeletedAt()
		rgc.mutation.SetDeletedAt(v)
	}
	if _, ok := rgc.mutation.Must(); !ok {
		v := requiredgood.DefaultMust
		rgc.mutation.SetMust(v)
	}
	if _, ok := rgc.mutation.Commission(); !ok {
		v := requiredgood.DefaultCommission
		rgc.mutation.SetCommission(v)
	}
	if _, ok := rgc.mutation.ID(); !ok {
		if requiredgood.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.DefaultID (forgotten import ent/runtime?)")
		}
		v := requiredgood.DefaultID()
		rgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rgc *RequiredGoodCreate) check() error {
	if _, ok := rgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RequiredGood.created_at"`)}
	}
	if _, ok := rgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RequiredGood.updated_at"`)}
	}
	if _, ok := rgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "RequiredGood.deleted_at"`)}
	}
	if _, ok := rgc.mutation.MainGoodID(); !ok {
		return &ValidationError{Name: "main_good_id", err: errors.New(`ent: missing required field "RequiredGood.main_good_id"`)}
	}
	if _, ok := rgc.mutation.RequiredGoodID(); !ok {
		return &ValidationError{Name: "required_good_id", err: errors.New(`ent: missing required field "RequiredGood.required_good_id"`)}
	}
	return nil
}

func (rgc *RequiredGoodCreate) sqlSave(ctx context.Context) (*RequiredGood, error) {
	_node, _spec := rgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rgc *RequiredGoodCreate) createSpec() (*RequiredGood, *sqlgraph.CreateSpec) {
	var (
		_node = &RequiredGood{config: rgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: requiredgood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: requiredgood.FieldID,
			},
		}
	)
	_spec.OnConflict = rgc.conflict
	if id, ok := rgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := rgc.mutation.MainGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldMainGoodID,
		})
		_node.MainGoodID = value
	}
	if value, ok := rgc.mutation.RequiredGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldRequiredGoodID,
		})
		_node.RequiredGoodID = value
	}
	if value, ok := rgc.mutation.Must(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldMust,
		})
		_node.Must = value
	}
	if value, ok := rgc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldCommission,
		})
		_node.Commission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RequiredGood.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequiredGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rgc *RequiredGoodCreate) OnConflict(opts ...sql.ConflictOption) *RequiredGoodUpsertOne {
	rgc.conflict = opts
	return &RequiredGoodUpsertOne{
		create: rgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RequiredGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rgc *RequiredGoodCreate) OnConflictColumns(columns ...string) *RequiredGoodUpsertOne {
	rgc.conflict = append(rgc.conflict, sql.ConflictColumns(columns...))
	return &RequiredGoodUpsertOne{
		create: rgc,
	}
}

type (
	// RequiredGoodUpsertOne is the builder for "upsert"-ing
	//  one RequiredGood node.
	RequiredGoodUpsertOne struct {
		create *RequiredGoodCreate
	}

	// RequiredGoodUpsert is the "OnConflict" setter.
	RequiredGoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RequiredGoodUpsert) SetCreatedAt(v uint32) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateCreatedAt() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RequiredGoodUpsert) AddCreatedAt(v uint32) *RequiredGoodUpsert {
	u.Add(requiredgood.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequiredGoodUpsert) SetUpdatedAt(v uint32) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateUpdatedAt() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RequiredGoodUpsert) AddUpdatedAt(v uint32) *RequiredGoodUpsert {
	u.Add(requiredgood.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequiredGoodUpsert) SetDeletedAt(v uint32) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateDeletedAt() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequiredGoodUpsert) AddDeletedAt(v uint32) *RequiredGoodUpsert {
	u.Add(requiredgood.FieldDeletedAt, v)
	return u
}

// SetMainGoodID sets the "main_good_id" field.
func (u *RequiredGoodUpsert) SetMainGoodID(v uuid.UUID) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldMainGoodID, v)
	return u
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateMainGoodID() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldMainGoodID)
	return u
}

// SetRequiredGoodID sets the "required_good_id" field.
func (u *RequiredGoodUpsert) SetRequiredGoodID(v uuid.UUID) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldRequiredGoodID, v)
	return u
}

// UpdateRequiredGoodID sets the "required_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateRequiredGoodID() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldRequiredGoodID)
	return u
}

// SetMust sets the "must" field.
func (u *RequiredGoodUpsert) SetMust(v bool) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldMust, v)
	return u
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateMust() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldMust)
	return u
}

// ClearMust clears the value of the "must" field.
func (u *RequiredGoodUpsert) ClearMust() *RequiredGoodUpsert {
	u.SetNull(requiredgood.FieldMust)
	return u
}

// SetCommission sets the "commission" field.
func (u *RequiredGoodUpsert) SetCommission(v bool) *RequiredGoodUpsert {
	u.Set(requiredgood.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *RequiredGoodUpsert) UpdateCommission() *RequiredGoodUpsert {
	u.SetExcluded(requiredgood.FieldCommission)
	return u
}

// ClearCommission clears the value of the "commission" field.
func (u *RequiredGoodUpsert) ClearCommission() *RequiredGoodUpsert {
	u.SetNull(requiredgood.FieldCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RequiredGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(requiredgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RequiredGoodUpsertOne) UpdateNewValues() *RequiredGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(requiredgood.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.RequiredGood.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RequiredGoodUpsertOne) Ignore() *RequiredGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequiredGoodUpsertOne) DoNothing() *RequiredGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequiredGoodCreate.OnConflict
// documentation for more info.
func (u *RequiredGoodUpsertOne) Update(set func(*RequiredGoodUpsert)) *RequiredGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequiredGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RequiredGoodUpsertOne) SetCreatedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RequiredGoodUpsertOne) AddCreatedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateCreatedAt() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequiredGoodUpsertOne) SetUpdatedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RequiredGoodUpsertOne) AddUpdatedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateUpdatedAt() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequiredGoodUpsertOne) SetDeletedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequiredGoodUpsertOne) AddDeletedAt(v uint32) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateDeletedAt() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMainGoodID sets the "main_good_id" field.
func (u *RequiredGoodUpsertOne) SetMainGoodID(v uuid.UUID) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetMainGoodID(v)
	})
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateMainGoodID() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateMainGoodID()
	})
}

// SetRequiredGoodID sets the "required_good_id" field.
func (u *RequiredGoodUpsertOne) SetRequiredGoodID(v uuid.UUID) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetRequiredGoodID(v)
	})
}

// UpdateRequiredGoodID sets the "required_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateRequiredGoodID() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateRequiredGoodID()
	})
}

// SetMust sets the "must" field.
func (u *RequiredGoodUpsertOne) SetMust(v bool) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetMust(v)
	})
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateMust() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateMust()
	})
}

// ClearMust clears the value of the "must" field.
func (u *RequiredGoodUpsertOne) ClearMust() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.ClearMust()
	})
}

// SetCommission sets the "commission" field.
func (u *RequiredGoodUpsertOne) SetCommission(v bool) *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *RequiredGoodUpsertOne) UpdateCommission() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *RequiredGoodUpsertOne) ClearCommission() *RequiredGoodUpsertOne {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *RequiredGoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequiredGoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequiredGoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RequiredGoodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RequiredGoodUpsertOne.ID is not supported by MySQL driver. Use RequiredGoodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RequiredGoodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RequiredGoodCreateBulk is the builder for creating many RequiredGood entities in bulk.
type RequiredGoodCreateBulk struct {
	config
	builders []*RequiredGoodCreate
	conflict []sql.ConflictOption
}

// Save creates the RequiredGood entities in the database.
func (rgcb *RequiredGoodCreateBulk) Save(ctx context.Context) ([]*RequiredGood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rgcb.builders))
	nodes := make([]*RequiredGood, len(rgcb.builders))
	mutators := make([]Mutator, len(rgcb.builders))
	for i := range rgcb.builders {
		func(i int, root context.Context) {
			builder := rgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequiredGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rgcb *RequiredGoodCreateBulk) SaveX(ctx context.Context) []*RequiredGood {
	v, err := rgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rgcb *RequiredGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := rgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgcb *RequiredGoodCreateBulk) ExecX(ctx context.Context) {
	if err := rgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RequiredGood.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequiredGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rgcb *RequiredGoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *RequiredGoodUpsertBulk {
	rgcb.conflict = opts
	return &RequiredGoodUpsertBulk{
		create: rgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RequiredGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rgcb *RequiredGoodCreateBulk) OnConflictColumns(columns ...string) *RequiredGoodUpsertBulk {
	rgcb.conflict = append(rgcb.conflict, sql.ConflictColumns(columns...))
	return &RequiredGoodUpsertBulk{
		create: rgcb,
	}
}

// RequiredGoodUpsertBulk is the builder for "upsert"-ing
// a bulk of RequiredGood nodes.
type RequiredGoodUpsertBulk struct {
	create *RequiredGoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RequiredGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(requiredgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RequiredGoodUpsertBulk) UpdateNewValues() *RequiredGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(requiredgood.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RequiredGood.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RequiredGoodUpsertBulk) Ignore() *RequiredGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequiredGoodUpsertBulk) DoNothing() *RequiredGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequiredGoodCreateBulk.OnConflict
// documentation for more info.
func (u *RequiredGoodUpsertBulk) Update(set func(*RequiredGoodUpsert)) *RequiredGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequiredGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RequiredGoodUpsertBulk) SetCreatedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RequiredGoodUpsertBulk) AddCreatedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateCreatedAt() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequiredGoodUpsertBulk) SetUpdatedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RequiredGoodUpsertBulk) AddUpdatedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateUpdatedAt() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequiredGoodUpsertBulk) SetDeletedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequiredGoodUpsertBulk) AddDeletedAt(v uint32) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateDeletedAt() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMainGoodID sets the "main_good_id" field.
func (u *RequiredGoodUpsertBulk) SetMainGoodID(v uuid.UUID) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetMainGoodID(v)
	})
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateMainGoodID() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateMainGoodID()
	})
}

// SetRequiredGoodID sets the "required_good_id" field.
func (u *RequiredGoodUpsertBulk) SetRequiredGoodID(v uuid.UUID) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetRequiredGoodID(v)
	})
}

// UpdateRequiredGoodID sets the "required_good_id" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateRequiredGoodID() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateRequiredGoodID()
	})
}

// SetMust sets the "must" field.
func (u *RequiredGoodUpsertBulk) SetMust(v bool) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetMust(v)
	})
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateMust() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateMust()
	})
}

// ClearMust clears the value of the "must" field.
func (u *RequiredGoodUpsertBulk) ClearMust() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.ClearMust()
	})
}

// SetCommission sets the "commission" field.
func (u *RequiredGoodUpsertBulk) SetCommission(v bool) *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *RequiredGoodUpsertBulk) UpdateCommission() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *RequiredGoodUpsertBulk) ClearCommission() *RequiredGoodUpsertBulk {
	return u.Update(func(s *RequiredGoodUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *RequiredGoodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RequiredGoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequiredGoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequiredGoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
