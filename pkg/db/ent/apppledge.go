// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/apppledge"
	"github.com/google/uuid"
)

// AppPledge is the model entity for the AppPledge schema.
type AppPledge struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// ServiceStartAt holds the value of the "service_start_at" field.
	ServiceStartAt uint32 `json:"service_start_at,omitempty"`
	// StartMode holds the value of the "start_mode" field.
	StartMode string `json:"start_mode,omitempty"`
	// EnableSetCommission holds the value of the "enable_set_commission" field.
	EnableSetCommission bool `json:"enable_set_commission,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppPledge) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case apppledge.FieldEnableSetCommission:
			values[i] = new(sql.NullBool)
		case apppledge.FieldID, apppledge.FieldCreatedAt, apppledge.FieldUpdatedAt, apppledge.FieldDeletedAt, apppledge.FieldServiceStartAt:
			values[i] = new(sql.NullInt64)
		case apppledge.FieldStartMode:
			values[i] = new(sql.NullString)
		case apppledge.FieldEntID, apppledge.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppPledge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppPledge fields.
func (ap *AppPledge) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apppledge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = uint32(value.Int64)
		case apppledge.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = uint32(value.Int64)
			}
		case apppledge.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = uint32(value.Int64)
			}
		case apppledge.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ap.DeletedAt = uint32(value.Int64)
			}
		case apppledge.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ap.EntID = *value
			}
		case apppledge.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				ap.AppGoodID = *value
			}
		case apppledge.FieldServiceStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_start_at", values[i])
			} else if value.Valid {
				ap.ServiceStartAt = uint32(value.Int64)
			}
		case apppledge.FieldStartMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_mode", values[i])
			} else if value.Valid {
				ap.StartMode = value.String
			}
		case apppledge.FieldEnableSetCommission:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_set_commission", values[i])
			} else if value.Valid {
				ap.EnableSetCommission = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppPledge.
// Note that you need to call AppPledge.Unwrap() before calling this method if this AppPledge
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AppPledge) Update() *AppPledgeUpdateOne {
	return (&AppPledgeClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AppPledge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AppPledge) Unwrap() *AppPledge {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppPledge is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AppPledge) String() string {
	var builder strings.Builder
	builder.WriteString("AppPledge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ap.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ap.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ap.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("service_start_at=")
	builder.WriteString(fmt.Sprintf("%v", ap.ServiceStartAt))
	builder.WriteString(", ")
	builder.WriteString("start_mode=")
	builder.WriteString(ap.StartMode)
	builder.WriteString(", ")
	builder.WriteString("enable_set_commission=")
	builder.WriteString(fmt.Sprintf("%v", ap.EnableSetCommission))
	builder.WriteByte(')')
	return builder.String()
}

// AppPledges is a parsable slice of AppPledge.
type AppPledges []*AppPledge

func (ap AppPledges) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
