// Code generated by ent, DO NOT EDIT.

package goodreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// RewardState applies equality check predicate on the "reward_state" field. It's identical to RewardStateEQ.
func RewardState(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardState), v))
	})
}

// LastRewardAt applies equality check predicate on the "last_reward_at" field. It's identical to LastRewardAtEQ.
func LastRewardAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRewardAt), v))
	})
}

// RewardTid applies equality check predicate on the "reward_tid" field. It's identical to RewardTidEQ.
func RewardTid(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardTid), v))
	})
}

// NextRewardStartAmount applies equality check predicate on the "next_reward_start_amount" field. It's identical to NextRewardStartAmountEQ.
func NextRewardStartAmount(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextRewardStartAmount), v))
	})
}

// LastRewardAmount applies equality check predicate on the "last_reward_amount" field. It's identical to LastRewardAmountEQ.
func LastRewardAmount(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRewardAmount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// RewardStateEQ applies the EQ predicate on the "reward_state" field.
func RewardStateEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardState), v))
	})
}

// RewardStateNEQ applies the NEQ predicate on the "reward_state" field.
func RewardStateNEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRewardState), v))
	})
}

// RewardStateIn applies the In predicate on the "reward_state" field.
func RewardStateIn(vs ...string) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRewardState), v...))
	})
}

// RewardStateNotIn applies the NotIn predicate on the "reward_state" field.
func RewardStateNotIn(vs ...string) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRewardState), v...))
	})
}

// RewardStateGT applies the GT predicate on the "reward_state" field.
func RewardStateGT(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRewardState), v))
	})
}

// RewardStateGTE applies the GTE predicate on the "reward_state" field.
func RewardStateGTE(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRewardState), v))
	})
}

// RewardStateLT applies the LT predicate on the "reward_state" field.
func RewardStateLT(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRewardState), v))
	})
}

// RewardStateLTE applies the LTE predicate on the "reward_state" field.
func RewardStateLTE(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRewardState), v))
	})
}

// RewardStateContains applies the Contains predicate on the "reward_state" field.
func RewardStateContains(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRewardState), v))
	})
}

// RewardStateHasPrefix applies the HasPrefix predicate on the "reward_state" field.
func RewardStateHasPrefix(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRewardState), v))
	})
}

// RewardStateHasSuffix applies the HasSuffix predicate on the "reward_state" field.
func RewardStateHasSuffix(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRewardState), v))
	})
}

// RewardStateIsNil applies the IsNil predicate on the "reward_state" field.
func RewardStateIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRewardState)))
	})
}

// RewardStateNotNil applies the NotNil predicate on the "reward_state" field.
func RewardStateNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRewardState)))
	})
}

// RewardStateEqualFold applies the EqualFold predicate on the "reward_state" field.
func RewardStateEqualFold(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRewardState), v))
	})
}

// RewardStateContainsFold applies the ContainsFold predicate on the "reward_state" field.
func RewardStateContainsFold(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRewardState), v))
	})
}

// LastRewardAtEQ applies the EQ predicate on the "last_reward_at" field.
func LastRewardAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtNEQ applies the NEQ predicate on the "last_reward_at" field.
func LastRewardAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtIn applies the In predicate on the "last_reward_at" field.
func LastRewardAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastRewardAt), v...))
	})
}

// LastRewardAtNotIn applies the NotIn predicate on the "last_reward_at" field.
func LastRewardAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastRewardAt), v...))
	})
}

// LastRewardAtGT applies the GT predicate on the "last_reward_at" field.
func LastRewardAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtGTE applies the GTE predicate on the "last_reward_at" field.
func LastRewardAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtLT applies the LT predicate on the "last_reward_at" field.
func LastRewardAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtLTE applies the LTE predicate on the "last_reward_at" field.
func LastRewardAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastRewardAt), v))
	})
}

// LastRewardAtIsNil applies the IsNil predicate on the "last_reward_at" field.
func LastRewardAtIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastRewardAt)))
	})
}

// LastRewardAtNotNil applies the NotNil predicate on the "last_reward_at" field.
func LastRewardAtNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastRewardAt)))
	})
}

// RewardTidEQ applies the EQ predicate on the "reward_tid" field.
func RewardTidEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardTid), v))
	})
}

// RewardTidNEQ applies the NEQ predicate on the "reward_tid" field.
func RewardTidNEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRewardTid), v))
	})
}

// RewardTidIn applies the In predicate on the "reward_tid" field.
func RewardTidIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRewardTid), v...))
	})
}

// RewardTidNotIn applies the NotIn predicate on the "reward_tid" field.
func RewardTidNotIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRewardTid), v...))
	})
}

// RewardTidGT applies the GT predicate on the "reward_tid" field.
func RewardTidGT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRewardTid), v))
	})
}

// RewardTidGTE applies the GTE predicate on the "reward_tid" field.
func RewardTidGTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRewardTid), v))
	})
}

// RewardTidLT applies the LT predicate on the "reward_tid" field.
func RewardTidLT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRewardTid), v))
	})
}

// RewardTidLTE applies the LTE predicate on the "reward_tid" field.
func RewardTidLTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRewardTid), v))
	})
}

// RewardTidIsNil applies the IsNil predicate on the "reward_tid" field.
func RewardTidIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRewardTid)))
	})
}

// RewardTidNotNil applies the NotNil predicate on the "reward_tid" field.
func RewardTidNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRewardTid)))
	})
}

// NextRewardStartAmountEQ applies the EQ predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountNEQ applies the NEQ predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountNEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountIn applies the In predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNextRewardStartAmount), v...))
	})
}

// NextRewardStartAmountNotIn applies the NotIn predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountNotIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNextRewardStartAmount), v...))
	})
}

// NextRewardStartAmountGT applies the GT predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountGT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountGTE applies the GTE predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountGTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountLT applies the LT predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountLT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountLTE applies the LTE predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountLTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextRewardStartAmount), v))
	})
}

// NextRewardStartAmountIsNil applies the IsNil predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextRewardStartAmount)))
	})
}

// NextRewardStartAmountNotNil applies the NotNil predicate on the "next_reward_start_amount" field.
func NextRewardStartAmountNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextRewardStartAmount)))
	})
}

// LastRewardAmountEQ applies the EQ predicate on the "last_reward_amount" field.
func LastRewardAmountEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountNEQ applies the NEQ predicate on the "last_reward_amount" field.
func LastRewardAmountNEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountIn applies the In predicate on the "last_reward_amount" field.
func LastRewardAmountIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastRewardAmount), v...))
	})
}

// LastRewardAmountNotIn applies the NotIn predicate on the "last_reward_amount" field.
func LastRewardAmountNotIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastRewardAmount), v...))
	})
}

// LastRewardAmountGT applies the GT predicate on the "last_reward_amount" field.
func LastRewardAmountGT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountGTE applies the GTE predicate on the "last_reward_amount" field.
func LastRewardAmountGTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountLT applies the LT predicate on the "last_reward_amount" field.
func LastRewardAmountLT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountLTE applies the LTE predicate on the "last_reward_amount" field.
func LastRewardAmountLTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastRewardAmount), v))
	})
}

// LastRewardAmountIsNil applies the IsNil predicate on the "last_reward_amount" field.
func LastRewardAmountIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastRewardAmount)))
	})
}

// LastRewardAmountNotNil applies the NotNil predicate on the "last_reward_amount" field.
func LastRewardAmountNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastRewardAmount)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		p(s.Not())
	})
}
