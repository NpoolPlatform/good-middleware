// Code generated by ent, DO NOT EDIT.

package goodreward

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// BenefitState applies equality check predicate on the "benefit_state" field. It's identical to BenefitStateEQ.
func BenefitState(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// LastBenefitAt applies equality check predicate on the "last_benefit_at" field. It's identical to LastBenefitAtEQ.
func LastBenefitAt(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// NextBenefitStartAmount applies equality check predicate on the "next_benefit_start_amount" field. It's identical to NextBenefitStartAmountEQ.
func NextBenefitStartAmount(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// LastBenefitAmount applies equality check predicate on the "last_benefit_amount" field. It's identical to LastBenefitAmountEQ.
func LastBenefitAmount(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAmount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// BenefitStateEQ applies the EQ predicate on the "benefit_state" field.
func BenefitStateEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateNEQ applies the NEQ predicate on the "benefit_state" field.
func BenefitStateNEQ(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIn applies the In predicate on the "benefit_state" field.
func BenefitStateIn(vs ...string) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateNotIn applies the NotIn predicate on the "benefit_state" field.
func BenefitStateNotIn(vs ...string) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateGT applies the GT predicate on the "benefit_state" field.
func BenefitStateGT(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateGTE applies the GTE predicate on the "benefit_state" field.
func BenefitStateGTE(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLT applies the LT predicate on the "benefit_state" field.
func BenefitStateLT(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLTE applies the LTE predicate on the "benefit_state" field.
func BenefitStateLTE(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContains applies the Contains predicate on the "benefit_state" field.
func BenefitStateContains(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasPrefix applies the HasPrefix predicate on the "benefit_state" field.
func BenefitStateHasPrefix(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasSuffix applies the HasSuffix predicate on the "benefit_state" field.
func BenefitStateHasSuffix(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIsNil applies the IsNil predicate on the "benefit_state" field.
func BenefitStateIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateNotNil applies the NotNil predicate on the "benefit_state" field.
func BenefitStateNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateEqualFold applies the EqualFold predicate on the "benefit_state" field.
func BenefitStateEqualFold(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContainsFold applies the ContainsFold predicate on the "benefit_state" field.
func BenefitStateContainsFold(v string) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBenefitState), v))
	})
}

// LastBenefitAtEQ applies the EQ predicate on the "last_benefit_at" field.
func LastBenefitAtEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtNEQ applies the NEQ predicate on the "last_benefit_at" field.
func LastBenefitAtNEQ(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIn applies the In predicate on the "last_benefit_at" field.
func LastBenefitAtIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtNotIn applies the NotIn predicate on the "last_benefit_at" field.
func LastBenefitAtNotIn(vs ...uint32) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtGT applies the GT predicate on the "last_benefit_at" field.
func LastBenefitAtGT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtGTE applies the GTE predicate on the "last_benefit_at" field.
func LastBenefitAtGTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLT applies the LT predicate on the "last_benefit_at" field.
func LastBenefitAtLT(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLTE applies the LTE predicate on the "last_benefit_at" field.
func LastBenefitAtLTE(v uint32) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIsNil applies the IsNil predicate on the "last_benefit_at" field.
func LastBenefitAtIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBenefitAt)))
	})
}

// LastBenefitAtNotNil applies the NotNil predicate on the "last_benefit_at" field.
func LastBenefitAtNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBenefitAt)))
	})
}

// BenefitTidsIsNil applies the IsNil predicate on the "benefit_tids" field.
func BenefitTidsIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitTids)))
	})
}

// BenefitTidsNotNil applies the NotNil predicate on the "benefit_tids" field.
func BenefitTidsNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitTids)))
	})
}

// NextBenefitStartAmountEQ applies the EQ predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountNEQ applies the NEQ predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountIn applies the In predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNextBenefitStartAmount), v...))
	})
}

// NextBenefitStartAmountNotIn applies the NotIn predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNotIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNextBenefitStartAmount), v...))
	})
}

// NextBenefitStartAmountGT applies the GT predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountGT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountGTE applies the GTE predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountGTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountLT applies the LT predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountLT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountLTE applies the LTE predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountLTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountIsNil applies the IsNil predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextBenefitStartAmount)))
	})
}

// NextBenefitStartAmountNotNil applies the NotNil predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextBenefitStartAmount)))
	})
}

// LastBenefitAmountEQ applies the EQ predicate on the "last_benefit_amount" field.
func LastBenefitAmountEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountNEQ applies the NEQ predicate on the "last_benefit_amount" field.
func LastBenefitAmountNEQ(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountIn applies the In predicate on the "last_benefit_amount" field.
func LastBenefitAmountIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastBenefitAmount), v...))
	})
}

// LastBenefitAmountNotIn applies the NotIn predicate on the "last_benefit_amount" field.
func LastBenefitAmountNotIn(vs ...decimal.Decimal) predicate.GoodReward {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastBenefitAmount), v...))
	})
}

// LastBenefitAmountGT applies the GT predicate on the "last_benefit_amount" field.
func LastBenefitAmountGT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountGTE applies the GTE predicate on the "last_benefit_amount" field.
func LastBenefitAmountGTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountLT applies the LT predicate on the "last_benefit_amount" field.
func LastBenefitAmountLT(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountLTE applies the LTE predicate on the "last_benefit_amount" field.
func LastBenefitAmountLTE(v decimal.Decimal) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountIsNil applies the IsNil predicate on the "last_benefit_amount" field.
func LastBenefitAmountIsNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBenefitAmount)))
	})
}

// LastBenefitAmountNotNil applies the NotNil predicate on the "last_benefit_amount" field.
func LastBenefitAmountNotNil() predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBenefitAmount)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodReward) predicate.GoodReward {
	return predicate.GoodReward(func(s *sql.Selector) {
		p(s.Not())
	})
}
