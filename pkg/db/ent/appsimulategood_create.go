// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appsimulategood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSimulateGoodCreate is the builder for creating a AppSimulateGood entity.
type AppSimulateGoodCreate struct {
	config
	mutation *AppSimulateGoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (asgc *AppSimulateGoodCreate) SetCreatedAt(u uint32) *AppSimulateGoodCreate {
	asgc.mutation.SetCreatedAt(u)
	return asgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableCreatedAt(u *uint32) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetCreatedAt(*u)
	}
	return asgc
}

// SetUpdatedAt sets the "updated_at" field.
func (asgc *AppSimulateGoodCreate) SetUpdatedAt(u uint32) *AppSimulateGoodCreate {
	asgc.mutation.SetUpdatedAt(u)
	return asgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableUpdatedAt(u *uint32) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetUpdatedAt(*u)
	}
	return asgc
}

// SetDeletedAt sets the "deleted_at" field.
func (asgc *AppSimulateGoodCreate) SetDeletedAt(u uint32) *AppSimulateGoodCreate {
	asgc.mutation.SetDeletedAt(u)
	return asgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableDeletedAt(u *uint32) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetDeletedAt(*u)
	}
	return asgc
}

// SetEntID sets the "ent_id" field.
func (asgc *AppSimulateGoodCreate) SetEntID(u uuid.UUID) *AppSimulateGoodCreate {
	asgc.mutation.SetEntID(u)
	return asgc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableEntID(u *uuid.UUID) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetEntID(*u)
	}
	return asgc
}

// SetAppID sets the "app_id" field.
func (asgc *AppSimulateGoodCreate) SetAppID(u uuid.UUID) *AppSimulateGoodCreate {
	asgc.mutation.SetAppID(u)
	return asgc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableAppID(u *uuid.UUID) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetAppID(*u)
	}
	return asgc
}

// SetGoodID sets the "good_id" field.
func (asgc *AppSimulateGoodCreate) SetGoodID(u uuid.UUID) *AppSimulateGoodCreate {
	asgc.mutation.SetGoodID(u)
	return asgc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableGoodID(u *uuid.UUID) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetGoodID(*u)
	}
	return asgc
}

// SetAppGoodID sets the "app_good_id" field.
func (asgc *AppSimulateGoodCreate) SetAppGoodID(u uuid.UUID) *AppSimulateGoodCreate {
	asgc.mutation.SetAppGoodID(u)
	return asgc
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableAppGoodID(u *uuid.UUID) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetAppGoodID(*u)
	}
	return asgc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (asgc *AppSimulateGoodCreate) SetCoinTypeID(u uuid.UUID) *AppSimulateGoodCreate {
	asgc.mutation.SetCoinTypeID(u)
	return asgc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableCoinTypeID(u *uuid.UUID) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetCoinTypeID(*u)
	}
	return asgc
}

// SetFixedOrderUnits sets the "fixed_order_units" field.
func (asgc *AppSimulateGoodCreate) SetFixedOrderUnits(d decimal.Decimal) *AppSimulateGoodCreate {
	asgc.mutation.SetFixedOrderUnits(d)
	return asgc
}

// SetNillableFixedOrderUnits sets the "fixed_order_units" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableFixedOrderUnits(d *decimal.Decimal) *AppSimulateGoodCreate {
	if d != nil {
		asgc.SetFixedOrderUnits(*d)
	}
	return asgc
}

// SetFixedOrderDuration sets the "fixed_order_duration" field.
func (asgc *AppSimulateGoodCreate) SetFixedOrderDuration(u uint32) *AppSimulateGoodCreate {
	asgc.mutation.SetFixedOrderDuration(u)
	return asgc
}

// SetNillableFixedOrderDuration sets the "fixed_order_duration" field if the given value is not nil.
func (asgc *AppSimulateGoodCreate) SetNillableFixedOrderDuration(u *uint32) *AppSimulateGoodCreate {
	if u != nil {
		asgc.SetFixedOrderDuration(*u)
	}
	return asgc
}

// SetID sets the "id" field.
func (asgc *AppSimulateGoodCreate) SetID(u uint32) *AppSimulateGoodCreate {
	asgc.mutation.SetID(u)
	return asgc
}

// Mutation returns the AppSimulateGoodMutation object of the builder.
func (asgc *AppSimulateGoodCreate) Mutation() *AppSimulateGoodMutation {
	return asgc.mutation
}

// Save creates the AppSimulateGood in the database.
func (asgc *AppSimulateGoodCreate) Save(ctx context.Context) (*AppSimulateGood, error) {
	var (
		err  error
		node *AppSimulateGood
	)
	if err := asgc.defaults(); err != nil {
		return nil, err
	}
	if len(asgc.hooks) == 0 {
		if err = asgc.check(); err != nil {
			return nil, err
		}
		node, err = asgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppSimulateGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asgc.check(); err != nil {
				return nil, err
			}
			asgc.mutation = mutation
			if node, err = asgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asgc.hooks) - 1; i >= 0; i-- {
			if asgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppSimulateGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppSimulateGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asgc *AppSimulateGoodCreate) SaveX(ctx context.Context) *AppSimulateGood {
	v, err := asgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asgc *AppSimulateGoodCreate) Exec(ctx context.Context) error {
	_, err := asgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asgc *AppSimulateGoodCreate) ExecX(ctx context.Context) {
	if err := asgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asgc *AppSimulateGoodCreate) defaults() error {
	if _, ok := asgc.mutation.CreatedAt(); !ok {
		if appsimulategood.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appsimulategood.DefaultCreatedAt()
		asgc.mutation.SetCreatedAt(v)
	}
	if _, ok := asgc.mutation.UpdatedAt(); !ok {
		if appsimulategood.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appsimulategood.DefaultUpdatedAt()
		asgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asgc.mutation.DeletedAt(); !ok {
		if appsimulategood.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := appsimulategood.DefaultDeletedAt()
		asgc.mutation.SetDeletedAt(v)
	}
	if _, ok := asgc.mutation.EntID(); !ok {
		if appsimulategood.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := appsimulategood.DefaultEntID()
		asgc.mutation.SetEntID(v)
	}
	if _, ok := asgc.mutation.FixedOrderUnits(); !ok {
		v := appsimulategood.DefaultFixedOrderUnits
		asgc.mutation.SetFixedOrderUnits(v)
	}
	if _, ok := asgc.mutation.FixedOrderDuration(); !ok {
		v := appsimulategood.DefaultFixedOrderDuration
		asgc.mutation.SetFixedOrderDuration(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (asgc *AppSimulateGoodCreate) check() error {
	if _, ok := asgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppSimulateGood.created_at"`)}
	}
	if _, ok := asgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppSimulateGood.updated_at"`)}
	}
	if _, ok := asgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppSimulateGood.deleted_at"`)}
	}
	if _, ok := asgc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "AppSimulateGood.ent_id"`)}
	}
	return nil
}

func (asgc *AppSimulateGoodCreate) sqlSave(ctx context.Context) (*AppSimulateGood, error) {
	_node, _spec := asgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (asgc *AppSimulateGoodCreate) createSpec() (*AppSimulateGood, *sqlgraph.CreateSpec) {
	var (
		_node = &AppSimulateGood{config: asgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appsimulategood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appsimulategood.FieldID,
			},
		}
	)
	_spec.OnConflict = asgc.conflict
	if id, ok := asgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := asgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := asgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := asgc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := asgc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := asgc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := asgc.mutation.AppGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppGoodID,
		})
		_node.AppGoodID = value
	}
	if value, ok := asgc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := asgc.mutation.FixedOrderUnits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appsimulategood.FieldFixedOrderUnits,
		})
		_node.FixedOrderUnits = value
	}
	if value, ok := asgc.mutation.FixedOrderDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldFixedOrderDuration,
		})
		_node.FixedOrderDuration = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSimulateGood.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSimulateGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (asgc *AppSimulateGoodCreate) OnConflict(opts ...sql.ConflictOption) *AppSimulateGoodUpsertOne {
	asgc.conflict = opts
	return &AppSimulateGoodUpsertOne{
		create: asgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSimulateGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (asgc *AppSimulateGoodCreate) OnConflictColumns(columns ...string) *AppSimulateGoodUpsertOne {
	asgc.conflict = append(asgc.conflict, sql.ConflictColumns(columns...))
	return &AppSimulateGoodUpsertOne{
		create: asgc,
	}
}

type (
	// AppSimulateGoodUpsertOne is the builder for "upsert"-ing
	//  one AppSimulateGood node.
	AppSimulateGoodUpsertOne struct {
		create *AppSimulateGoodCreate
	}

	// AppSimulateGoodUpsert is the "OnConflict" setter.
	AppSimulateGoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppSimulateGoodUpsert) SetCreatedAt(v uint32) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateCreatedAt() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSimulateGoodUpsert) AddCreatedAt(v uint32) *AppSimulateGoodUpsert {
	u.Add(appsimulategood.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSimulateGoodUpsert) SetUpdatedAt(v uint32) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateUpdatedAt() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSimulateGoodUpsert) AddUpdatedAt(v uint32) *AppSimulateGoodUpsert {
	u.Add(appsimulategood.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSimulateGoodUpsert) SetDeletedAt(v uint32) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateDeletedAt() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSimulateGoodUpsert) AddDeletedAt(v uint32) *AppSimulateGoodUpsert {
	u.Add(appsimulategood.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppSimulateGoodUpsert) SetEntID(v uuid.UUID) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateEntID() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppSimulateGoodUpsert) SetAppID(v uuid.UUID) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateAppID() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSimulateGoodUpsert) ClearAppID() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppSimulateGoodUpsert) SetGoodID(v uuid.UUID) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateGoodID() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSimulateGoodUpsert) ClearGoodID() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSimulateGoodUpsert) SetAppGoodID(v uuid.UUID) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateAppGoodID() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldAppGoodID)
	return u
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSimulateGoodUpsert) ClearAppGoodID() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldAppGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppSimulateGoodUpsert) SetCoinTypeID(v uuid.UUID) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateCoinTypeID() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppSimulateGoodUpsert) ClearCoinTypeID() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldCoinTypeID)
	return u
}

// SetFixedOrderUnits sets the "fixed_order_units" field.
func (u *AppSimulateGoodUpsert) SetFixedOrderUnits(v decimal.Decimal) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldFixedOrderUnits, v)
	return u
}

// UpdateFixedOrderUnits sets the "fixed_order_units" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateFixedOrderUnits() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldFixedOrderUnits)
	return u
}

// ClearFixedOrderUnits clears the value of the "fixed_order_units" field.
func (u *AppSimulateGoodUpsert) ClearFixedOrderUnits() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldFixedOrderUnits)
	return u
}

// SetFixedOrderDuration sets the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsert) SetFixedOrderDuration(v uint32) *AppSimulateGoodUpsert {
	u.Set(appsimulategood.FieldFixedOrderDuration, v)
	return u
}

// UpdateFixedOrderDuration sets the "fixed_order_duration" field to the value that was provided on create.
func (u *AppSimulateGoodUpsert) UpdateFixedOrderDuration() *AppSimulateGoodUpsert {
	u.SetExcluded(appsimulategood.FieldFixedOrderDuration)
	return u
}

// AddFixedOrderDuration adds v to the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsert) AddFixedOrderDuration(v uint32) *AppSimulateGoodUpsert {
	u.Add(appsimulategood.FieldFixedOrderDuration, v)
	return u
}

// ClearFixedOrderDuration clears the value of the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsert) ClearFixedOrderDuration() *AppSimulateGoodUpsert {
	u.SetNull(appsimulategood.FieldFixedOrderDuration)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppSimulateGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsimulategood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppSimulateGoodUpsertOne) UpdateNewValues() *AppSimulateGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appsimulategood.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppSimulateGood.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppSimulateGoodUpsertOne) Ignore() *AppSimulateGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSimulateGoodUpsertOne) DoNothing() *AppSimulateGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSimulateGoodCreate.OnConflict
// documentation for more info.
func (u *AppSimulateGoodUpsertOne) Update(set func(*AppSimulateGoodUpsert)) *AppSimulateGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSimulateGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSimulateGoodUpsertOne) SetCreatedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSimulateGoodUpsertOne) AddCreatedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateCreatedAt() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSimulateGoodUpsertOne) SetUpdatedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSimulateGoodUpsertOne) AddUpdatedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateUpdatedAt() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSimulateGoodUpsertOne) SetDeletedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSimulateGoodUpsertOne) AddDeletedAt(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateDeletedAt() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppSimulateGoodUpsertOne) SetEntID(v uuid.UUID) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateEntID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppSimulateGoodUpsertOne) SetAppID(v uuid.UUID) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateAppID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSimulateGoodUpsertOne) ClearAppID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppSimulateGoodUpsertOne) SetGoodID(v uuid.UUID) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateGoodID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSimulateGoodUpsertOne) ClearGoodID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSimulateGoodUpsertOne) SetAppGoodID(v uuid.UUID) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateAppGoodID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSimulateGoodUpsertOne) ClearAppGoodID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppSimulateGoodUpsertOne) SetCoinTypeID(v uuid.UUID) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateCoinTypeID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppSimulateGoodUpsertOne) ClearCoinTypeID() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFixedOrderUnits sets the "fixed_order_units" field.
func (u *AppSimulateGoodUpsertOne) SetFixedOrderUnits(v decimal.Decimal) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetFixedOrderUnits(v)
	})
}

// UpdateFixedOrderUnits sets the "fixed_order_units" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateFixedOrderUnits() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateFixedOrderUnits()
	})
}

// ClearFixedOrderUnits clears the value of the "fixed_order_units" field.
func (u *AppSimulateGoodUpsertOne) ClearFixedOrderUnits() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearFixedOrderUnits()
	})
}

// SetFixedOrderDuration sets the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertOne) SetFixedOrderDuration(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetFixedOrderDuration(v)
	})
}

// AddFixedOrderDuration adds v to the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertOne) AddFixedOrderDuration(v uint32) *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddFixedOrderDuration(v)
	})
}

// UpdateFixedOrderDuration sets the "fixed_order_duration" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertOne) UpdateFixedOrderDuration() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateFixedOrderDuration()
	})
}

// ClearFixedOrderDuration clears the value of the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertOne) ClearFixedOrderDuration() *AppSimulateGoodUpsertOne {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearFixedOrderDuration()
	})
}

// Exec executes the query.
func (u *AppSimulateGoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppSimulateGoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSimulateGoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppSimulateGoodUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppSimulateGoodUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppSimulateGoodCreateBulk is the builder for creating many AppSimulateGood entities in bulk.
type AppSimulateGoodCreateBulk struct {
	config
	builders []*AppSimulateGoodCreate
	conflict []sql.ConflictOption
}

// Save creates the AppSimulateGood entities in the database.
func (asgcb *AppSimulateGoodCreateBulk) Save(ctx context.Context) ([]*AppSimulateGood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(asgcb.builders))
	nodes := make([]*AppSimulateGood, len(asgcb.builders))
	mutators := make([]Mutator, len(asgcb.builders))
	for i := range asgcb.builders {
		func(i int, root context.Context) {
			builder := asgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppSimulateGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, asgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = asgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, asgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, asgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (asgcb *AppSimulateGoodCreateBulk) SaveX(ctx context.Context) []*AppSimulateGood {
	v, err := asgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asgcb *AppSimulateGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := asgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asgcb *AppSimulateGoodCreateBulk) ExecX(ctx context.Context) {
	if err := asgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSimulateGood.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSimulateGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (asgcb *AppSimulateGoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppSimulateGoodUpsertBulk {
	asgcb.conflict = opts
	return &AppSimulateGoodUpsertBulk{
		create: asgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSimulateGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (asgcb *AppSimulateGoodCreateBulk) OnConflictColumns(columns ...string) *AppSimulateGoodUpsertBulk {
	asgcb.conflict = append(asgcb.conflict, sql.ConflictColumns(columns...))
	return &AppSimulateGoodUpsertBulk{
		create: asgcb,
	}
}

// AppSimulateGoodUpsertBulk is the builder for "upsert"-ing
// a bulk of AppSimulateGood nodes.
type AppSimulateGoodUpsertBulk struct {
	create *AppSimulateGoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppSimulateGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsimulategood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppSimulateGoodUpsertBulk) UpdateNewValues() *AppSimulateGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appsimulategood.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSimulateGood.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppSimulateGoodUpsertBulk) Ignore() *AppSimulateGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSimulateGoodUpsertBulk) DoNothing() *AppSimulateGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSimulateGoodCreateBulk.OnConflict
// documentation for more info.
func (u *AppSimulateGoodUpsertBulk) Update(set func(*AppSimulateGoodUpsert)) *AppSimulateGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSimulateGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppSimulateGoodUpsertBulk) SetCreatedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppSimulateGoodUpsertBulk) AddCreatedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateCreatedAt() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSimulateGoodUpsertBulk) SetUpdatedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppSimulateGoodUpsertBulk) AddUpdatedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateUpdatedAt() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppSimulateGoodUpsertBulk) SetDeletedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppSimulateGoodUpsertBulk) AddDeletedAt(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateDeletedAt() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppSimulateGoodUpsertBulk) SetEntID(v uuid.UUID) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateEntID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppSimulateGoodUpsertBulk) SetAppID(v uuid.UUID) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateAppID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppSimulateGoodUpsertBulk) ClearAppID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppSimulateGoodUpsertBulk) SetGoodID(v uuid.UUID) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateGoodID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppSimulateGoodUpsertBulk) ClearGoodID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *AppSimulateGoodUpsertBulk) SetAppGoodID(v uuid.UUID) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateAppGoodID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateAppGoodID()
	})
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (u *AppSimulateGoodUpsertBulk) ClearAppGoodID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearAppGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppSimulateGoodUpsertBulk) SetCoinTypeID(v uuid.UUID) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateCoinTypeID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *AppSimulateGoodUpsertBulk) ClearCoinTypeID() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFixedOrderUnits sets the "fixed_order_units" field.
func (u *AppSimulateGoodUpsertBulk) SetFixedOrderUnits(v decimal.Decimal) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetFixedOrderUnits(v)
	})
}

// UpdateFixedOrderUnits sets the "fixed_order_units" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateFixedOrderUnits() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateFixedOrderUnits()
	})
}

// ClearFixedOrderUnits clears the value of the "fixed_order_units" field.
func (u *AppSimulateGoodUpsertBulk) ClearFixedOrderUnits() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearFixedOrderUnits()
	})
}

// SetFixedOrderDuration sets the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertBulk) SetFixedOrderDuration(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.SetFixedOrderDuration(v)
	})
}

// AddFixedOrderDuration adds v to the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertBulk) AddFixedOrderDuration(v uint32) *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.AddFixedOrderDuration(v)
	})
}

// UpdateFixedOrderDuration sets the "fixed_order_duration" field to the value that was provided on create.
func (u *AppSimulateGoodUpsertBulk) UpdateFixedOrderDuration() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.UpdateFixedOrderDuration()
	})
}

// ClearFixedOrderDuration clears the value of the "fixed_order_duration" field.
func (u *AppSimulateGoodUpsertBulk) ClearFixedOrderDuration() *AppSimulateGoodUpsertBulk {
	return u.Update(func(s *AppSimulateGoodUpsert) {
		s.ClearFixedOrderDuration()
	})
}

// Exec executes the query.
func (u *AppSimulateGoodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppSimulateGoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppSimulateGoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSimulateGoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
