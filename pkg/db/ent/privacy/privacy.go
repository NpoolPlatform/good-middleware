// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppDefaultGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppDefaultGoodQueryRuleFunc func(context.Context, *ent.AppDefaultGoodQuery) error

// EvalQuery return f(ctx, q).
func (f AppDefaultGoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppDefaultGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppDefaultGoodQuery", q)
}

// The AppDefaultGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppDefaultGoodMutationRuleFunc func(context.Context, *ent.AppDefaultGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f AppDefaultGoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppDefaultGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppDefaultGoodMutation", m)
}

// The AppFeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppFeeQueryRuleFunc func(context.Context, *ent.AppFeeQuery) error

// EvalQuery return f(ctx, q).
func (f AppFeeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppFeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppFeeQuery", q)
}

// The AppFeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppFeeMutationRuleFunc func(context.Context, *ent.AppFeeMutation) error

// EvalMutation calls f(ctx, m).
func (f AppFeeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppFeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppFeeMutation", m)
}

// The AppGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodQueryRuleFunc func(context.Context, *ent.AppGoodQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodQuery", q)
}

// The AppGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodMutationRuleFunc func(context.Context, *ent.AppGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodMutation", m)
}

// The AppGoodBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodBaseQueryRuleFunc func(context.Context, *ent.AppGoodBaseQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodBaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodBaseQuery", q)
}

// The AppGoodBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodBaseMutationRuleFunc func(context.Context, *ent.AppGoodBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodBaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodBaseMutation", m)
}

// The AppGoodDescriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDescriptionQueryRuleFunc func(context.Context, *ent.AppGoodDescriptionQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDescriptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodDescriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodDescriptionQuery", q)
}

// The AppGoodDescriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDescriptionMutationRuleFunc func(context.Context, *ent.AppGoodDescriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDescriptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodDescriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodDescriptionMutation", m)
}

// The AppGoodDisplayColorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDisplayColorQueryRuleFunc func(context.Context, *ent.AppGoodDisplayColorQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDisplayColorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodDisplayColorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodDisplayColorQuery", q)
}

// The AppGoodDisplayColorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDisplayColorMutationRuleFunc func(context.Context, *ent.AppGoodDisplayColorMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDisplayColorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodDisplayColorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodDisplayColorMutation", m)
}

// The AppGoodDisplayNameQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodDisplayNameQueryRuleFunc func(context.Context, *ent.AppGoodDisplayNameQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodDisplayNameQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodDisplayNameQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodDisplayNameQuery", q)
}

// The AppGoodDisplayNameMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodDisplayNameMutationRuleFunc func(context.Context, *ent.AppGoodDisplayNameMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodDisplayNameMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodDisplayNameMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodDisplayNameMutation", m)
}

// The AppGoodPosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppGoodPosterQueryRuleFunc func(context.Context, *ent.AppGoodPosterQuery) error

// EvalQuery return f(ctx, q).
func (f AppGoodPosterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppGoodPosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppGoodPosterQuery", q)
}

// The AppGoodPosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppGoodPosterMutationRuleFunc func(context.Context, *ent.AppGoodPosterMutation) error

// EvalMutation calls f(ctx, m).
func (f AppGoodPosterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppGoodPosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppGoodPosterMutation", m)
}

// The AppLegacyPowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppLegacyPowerRentalQueryRuleFunc func(context.Context, *ent.AppLegacyPowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppLegacyPowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppLegacyPowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppLegacyPowerRentalQuery", q)
}

// The AppLegacyPowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppLegacyPowerRentalMutationRuleFunc func(context.Context, *ent.AppLegacyPowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppLegacyPowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppLegacyPowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppLegacyPowerRentalMutation", m)
}

// The AppMiningGoodStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppMiningGoodStockQueryRuleFunc func(context.Context, *ent.AppMiningGoodStockQuery) error

// EvalQuery return f(ctx, q).
func (f AppMiningGoodStockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppMiningGoodStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppMiningGoodStockQuery", q)
}

// The AppMiningGoodStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMiningGoodStockMutationRuleFunc func(context.Context, *ent.AppMiningGoodStockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMiningGoodStockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppMiningGoodStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppMiningGoodStockMutation", m)
}

// The AppPowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppPowerRentalQueryRuleFunc func(context.Context, *ent.AppPowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppPowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppPowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppPowerRentalQuery", q)
}

// The AppPowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppPowerRentalMutationRuleFunc func(context.Context, *ent.AppPowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppPowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppPowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppPowerRentalMutation", m)
}

// The AppSimulatePowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSimulatePowerRentalQueryRuleFunc func(context.Context, *ent.AppSimulatePowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f AppSimulatePowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppSimulatePowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppSimulatePowerRentalQuery", q)
}

// The AppSimulatePowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSimulatePowerRentalMutationRuleFunc func(context.Context, *ent.AppSimulatePowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSimulatePowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppSimulatePowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppSimulatePowerRentalMutation", m)
}

// The AppStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppStockQueryRuleFunc func(context.Context, *ent.AppStockQuery) error

// EvalQuery return f(ctx, q).
func (f AppStockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppStockQuery", q)
}

// The AppStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppStockMutationRuleFunc func(context.Context, *ent.AppStockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppStockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppStockMutation", m)
}

// The AppStockLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppStockLockQueryRuleFunc func(context.Context, *ent.AppStockLockQuery) error

// EvalQuery return f(ctx, q).
func (f AppStockLockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppStockLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppStockLockQuery", q)
}

// The AppStockLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppStockLockMutationRuleFunc func(context.Context, *ent.AppStockLockMutation) error

// EvalMutation calls f(ctx, m).
func (f AppStockLockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppStockLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppStockLockMutation", m)
}

// The CommentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommentQueryRuleFunc func(context.Context, *ent.CommentQuery) error

// EvalQuery return f(ctx, q).
func (f CommentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommentQuery", q)
}

// The CommentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommentMutationRuleFunc func(context.Context, *ent.CommentMutation) error

// EvalMutation calls f(ctx, m).
func (f CommentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommentMutation", m)
}

// The DelegatedStakingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DelegatedStakingQueryRuleFunc func(context.Context, *ent.DelegatedStakingQuery) error

// EvalQuery return f(ctx, q).
func (f DelegatedStakingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DelegatedStakingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DelegatedStakingQuery", q)
}

// The DelegatedStakingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DelegatedStakingMutationRuleFunc func(context.Context, *ent.DelegatedStakingMutation) error

// EvalMutation calls f(ctx, m).
func (f DelegatedStakingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DelegatedStakingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DelegatedStakingMutation", m)
}

// The DeviceInfoQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceInfoQueryRuleFunc func(context.Context, *ent.DeviceInfoQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceInfoQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceInfoQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeviceInfoQuery", q)
}

// The DeviceInfoMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceInfoMutationRuleFunc func(context.Context, *ent.DeviceInfoMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceInfoMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeviceInfoMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeviceInfoMutation", m)
}

// The DeviceManufacturerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceManufacturerQueryRuleFunc func(context.Context, *ent.DeviceManufacturerQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceManufacturerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceManufacturerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeviceManufacturerQuery", q)
}

// The DeviceManufacturerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceManufacturerMutationRuleFunc func(context.Context, *ent.DeviceManufacturerMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceManufacturerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeviceManufacturerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeviceManufacturerMutation", m)
}

// The DevicePosterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DevicePosterQueryRuleFunc func(context.Context, *ent.DevicePosterQuery) error

// EvalQuery return f(ctx, q).
func (f DevicePosterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DevicePosterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DevicePosterQuery", q)
}

// The DevicePosterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DevicePosterMutationRuleFunc func(context.Context, *ent.DevicePosterMutation) error

// EvalMutation calls f(ctx, m).
func (f DevicePosterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DevicePosterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DevicePosterMutation", m)
}

// The ExtraInfoQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExtraInfoQueryRuleFunc func(context.Context, *ent.ExtraInfoQuery) error

// EvalQuery return f(ctx, q).
func (f ExtraInfoQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExtraInfoQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExtraInfoQuery", q)
}

// The ExtraInfoMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExtraInfoMutationRuleFunc func(context.Context, *ent.ExtraInfoMutation) error

// EvalMutation calls f(ctx, m).
func (f ExtraInfoMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExtraInfoMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExtraInfoMutation", m)
}

// The FbmCrowdFundingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FbmCrowdFundingQueryRuleFunc func(context.Context, *ent.FbmCrowdFundingQuery) error

// EvalQuery return f(ctx, q).
func (f FbmCrowdFundingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FbmCrowdFundingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FbmCrowdFundingQuery", q)
}

// The FbmCrowdFundingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FbmCrowdFundingMutationRuleFunc func(context.Context, *ent.FbmCrowdFundingMutation) error

// EvalMutation calls f(ctx, m).
func (f FbmCrowdFundingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FbmCrowdFundingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FbmCrowdFundingMutation", m)
}

// The FeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeeQueryRuleFunc func(context.Context, *ent.FeeQuery) error

// EvalQuery return f(ctx, q).
func (f FeeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeeQuery", q)
}

// The FeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeeMutationRuleFunc func(context.Context, *ent.FeeMutation) error

// EvalMutation calls f(ctx, m).
func (f FeeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeeMutation", m)
}

// The GoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodQueryRuleFunc func(context.Context, *ent.GoodQuery) error

// EvalQuery return f(ctx, q).
func (f GoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GoodQuery", q)
}

// The GoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodMutationRuleFunc func(context.Context, *ent.GoodMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GoodMutation", m)
}

// The GoodBaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodBaseQueryRuleFunc func(context.Context, *ent.GoodBaseQuery) error

// EvalQuery return f(ctx, q).
func (f GoodBaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoodBaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GoodBaseQuery", q)
}

// The GoodBaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodBaseMutationRuleFunc func(context.Context, *ent.GoodBaseMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodBaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GoodBaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GoodBaseMutation", m)
}

// The GoodCoinQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodCoinQueryRuleFunc func(context.Context, *ent.GoodCoinQuery) error

// EvalQuery return f(ctx, q).
func (f GoodCoinQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoodCoinQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GoodCoinQuery", q)
}

// The GoodCoinMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodCoinMutationRuleFunc func(context.Context, *ent.GoodCoinMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodCoinMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GoodCoinMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GoodCoinMutation", m)
}

// The GoodRewardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodRewardQueryRuleFunc func(context.Context, *ent.GoodRewardQuery) error

// EvalQuery return f(ctx, q).
func (f GoodRewardQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoodRewardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GoodRewardQuery", q)
}

// The GoodRewardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodRewardMutationRuleFunc func(context.Context, *ent.GoodRewardMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodRewardMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GoodRewardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GoodRewardMutation", m)
}

// The GoodRewardHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GoodRewardHistoryQueryRuleFunc func(context.Context, *ent.GoodRewardHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f GoodRewardHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GoodRewardHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GoodRewardHistoryQuery", q)
}

// The GoodRewardHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GoodRewardHistoryMutationRuleFunc func(context.Context, *ent.GoodRewardHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f GoodRewardHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GoodRewardHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GoodRewardHistoryMutation", m)
}

// The LikeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LikeQueryRuleFunc func(context.Context, *ent.LikeQuery) error

// EvalQuery return f(ctx, q).
func (f LikeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LikeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LikeQuery", q)
}

// The LikeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LikeMutationRuleFunc func(context.Context, *ent.LikeMutation) error

// EvalMutation calls f(ctx, m).
func (f LikeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LikeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LikeMutation", m)
}

// The MiningGoodStockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MiningGoodStockQueryRuleFunc func(context.Context, *ent.MiningGoodStockQuery) error

// EvalQuery return f(ctx, q).
func (f MiningGoodStockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MiningGoodStockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MiningGoodStockQuery", q)
}

// The MiningGoodStockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MiningGoodStockMutationRuleFunc func(context.Context, *ent.MiningGoodStockMutation) error

// EvalMutation calls f(ctx, m).
func (f MiningGoodStockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MiningGoodStockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MiningGoodStockMutation", m)
}

// The PowerRentalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PowerRentalQueryRuleFunc func(context.Context, *ent.PowerRentalQuery) error

// EvalQuery return f(ctx, q).
func (f PowerRentalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PowerRentalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PowerRentalQuery", q)
}

// The PowerRentalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PowerRentalMutationRuleFunc func(context.Context, *ent.PowerRentalMutation) error

// EvalMutation calls f(ctx, m).
func (f PowerRentalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PowerRentalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PowerRentalMutation", m)
}

// The RecommendQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecommendQueryRuleFunc func(context.Context, *ent.RecommendQuery) error

// EvalQuery return f(ctx, q).
func (f RecommendQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RecommendQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RecommendQuery", q)
}

// The RecommendMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecommendMutationRuleFunc func(context.Context, *ent.RecommendMutation) error

// EvalMutation calls f(ctx, m).
func (f RecommendMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RecommendMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RecommendMutation", m)
}

// The RequiredAppGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RequiredAppGoodQueryRuleFunc func(context.Context, *ent.RequiredAppGoodQuery) error

// EvalQuery return f(ctx, q).
func (f RequiredAppGoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RequiredAppGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RequiredAppGoodQuery", q)
}

// The RequiredAppGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RequiredAppGoodMutationRuleFunc func(context.Context, *ent.RequiredAppGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f RequiredAppGoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RequiredAppGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RequiredAppGoodMutation", m)
}

// The RequiredGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RequiredGoodQueryRuleFunc func(context.Context, *ent.RequiredGoodQuery) error

// EvalQuery return f(ctx, q).
func (f RequiredGoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RequiredGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RequiredGoodQuery", q)
}

// The RequiredGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RequiredGoodMutationRuleFunc func(context.Context, *ent.RequiredGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f RequiredGoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RequiredGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RequiredGoodMutation", m)
}

// The ScoreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ScoreQueryRuleFunc func(context.Context, *ent.ScoreQuery) error

// EvalQuery return f(ctx, q).
func (f ScoreQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScoreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ScoreQuery", q)
}

// The ScoreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ScoreMutationRuleFunc func(context.Context, *ent.ScoreMutation) error

// EvalMutation calls f(ctx, m).
func (f ScoreMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ScoreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ScoreMutation", m)
}

// The StockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StockQueryRuleFunc func(context.Context, *ent.StockQuery) error

// EvalQuery return f(ctx, q).
func (f StockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StockQuery", q)
}

// The StockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StockMutationRuleFunc func(context.Context, *ent.StockMutation) error

// EvalMutation calls f(ctx, m).
func (f StockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StockMutation", m)
}

// The StockLockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StockLockQueryRuleFunc func(context.Context, *ent.StockLockQuery) error

// EvalQuery return f(ctx, q).
func (f StockLockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StockLockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StockLockQuery", q)
}

// The StockLockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StockLockMutationRuleFunc func(context.Context, *ent.StockLockMutation) error

// EvalMutation calls f(ctx, m).
func (f StockLockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StockLockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StockLockMutation", m)
}

// The TopMostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostQueryRuleFunc func(context.Context, *ent.TopMostQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TopMostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TopMostQuery", q)
}

// The TopMostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostMutationRuleFunc func(context.Context, *ent.TopMostMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TopMostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TopMostMutation", m)
}

// The TopMostGoodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TopMostGoodQueryRuleFunc func(context.Context, *ent.TopMostGoodQuery) error

// EvalQuery return f(ctx, q).
func (f TopMostGoodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TopMostGoodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TopMostGoodQuery", q)
}

// The TopMostGoodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TopMostGoodMutationRuleFunc func(context.Context, *ent.TopMostGoodMutation) error

// EvalMutation calls f(ctx, m).
func (f TopMostGoodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TopMostGoodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TopMostGoodMutation", m)
}

// The VendorBrandQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VendorBrandQueryRuleFunc func(context.Context, *ent.VendorBrandQuery) error

// EvalQuery return f(ctx, q).
func (f VendorBrandQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VendorBrandQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VendorBrandQuery", q)
}

// The VendorBrandMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VendorBrandMutationRuleFunc func(context.Context, *ent.VendorBrandMutation) error

// EvalMutation calls f(ctx, m).
func (f VendorBrandMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VendorBrandMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VendorBrandMutation", m)
}

// The VendorLocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VendorLocationQueryRuleFunc func(context.Context, *ent.VendorLocationQuery) error

// EvalQuery return f(ctx, q).
func (f VendorLocationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VendorLocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VendorLocationQuery", q)
}

// The VendorLocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VendorLocationMutationRuleFunc func(context.Context, *ent.VendorLocationMutation) error

// EvalMutation calls f(ctx, m).
func (f VendorLocationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VendorLocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VendorLocationMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AppDefaultGoodQuery:
		return q.Filter(), nil
	case *ent.AppFeeQuery:
		return q.Filter(), nil
	case *ent.AppGoodQuery:
		return q.Filter(), nil
	case *ent.AppGoodBaseQuery:
		return q.Filter(), nil
	case *ent.AppGoodDescriptionQuery:
		return q.Filter(), nil
	case *ent.AppGoodDisplayColorQuery:
		return q.Filter(), nil
	case *ent.AppGoodDisplayNameQuery:
		return q.Filter(), nil
	case *ent.AppGoodPosterQuery:
		return q.Filter(), nil
	case *ent.AppLegacyPowerRentalQuery:
		return q.Filter(), nil
	case *ent.AppMiningGoodStockQuery:
		return q.Filter(), nil
	case *ent.AppPowerRentalQuery:
		return q.Filter(), nil
	case *ent.AppSimulatePowerRentalQuery:
		return q.Filter(), nil
	case *ent.AppStockQuery:
		return q.Filter(), nil
	case *ent.AppStockLockQuery:
		return q.Filter(), nil
	case *ent.CommentQuery:
		return q.Filter(), nil
	case *ent.DelegatedStakingQuery:
		return q.Filter(), nil
	case *ent.DeviceInfoQuery:
		return q.Filter(), nil
	case *ent.DeviceManufacturerQuery:
		return q.Filter(), nil
	case *ent.DevicePosterQuery:
		return q.Filter(), nil
	case *ent.ExtraInfoQuery:
		return q.Filter(), nil
	case *ent.FbmCrowdFundingQuery:
		return q.Filter(), nil
	case *ent.FeeQuery:
		return q.Filter(), nil
	case *ent.GoodQuery:
		return q.Filter(), nil
	case *ent.GoodBaseQuery:
		return q.Filter(), nil
	case *ent.GoodCoinQuery:
		return q.Filter(), nil
	case *ent.GoodRewardQuery:
		return q.Filter(), nil
	case *ent.GoodRewardHistoryQuery:
		return q.Filter(), nil
	case *ent.LikeQuery:
		return q.Filter(), nil
	case *ent.MiningGoodStockQuery:
		return q.Filter(), nil
	case *ent.PowerRentalQuery:
		return q.Filter(), nil
	case *ent.RecommendQuery:
		return q.Filter(), nil
	case *ent.RequiredAppGoodQuery:
		return q.Filter(), nil
	case *ent.RequiredGoodQuery:
		return q.Filter(), nil
	case *ent.ScoreQuery:
		return q.Filter(), nil
	case *ent.StockQuery:
		return q.Filter(), nil
	case *ent.StockLockQuery:
		return q.Filter(), nil
	case *ent.TopMostQuery:
		return q.Filter(), nil
	case *ent.TopMostGoodQuery:
		return q.Filter(), nil
	case *ent.VendorBrandQuery:
		return q.Filter(), nil
	case *ent.VendorLocationQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AppDefaultGoodMutation:
		return m.Filter(), nil
	case *ent.AppFeeMutation:
		return m.Filter(), nil
	case *ent.AppGoodMutation:
		return m.Filter(), nil
	case *ent.AppGoodBaseMutation:
		return m.Filter(), nil
	case *ent.AppGoodDescriptionMutation:
		return m.Filter(), nil
	case *ent.AppGoodDisplayColorMutation:
		return m.Filter(), nil
	case *ent.AppGoodDisplayNameMutation:
		return m.Filter(), nil
	case *ent.AppGoodPosterMutation:
		return m.Filter(), nil
	case *ent.AppLegacyPowerRentalMutation:
		return m.Filter(), nil
	case *ent.AppMiningGoodStockMutation:
		return m.Filter(), nil
	case *ent.AppPowerRentalMutation:
		return m.Filter(), nil
	case *ent.AppSimulatePowerRentalMutation:
		return m.Filter(), nil
	case *ent.AppStockMutation:
		return m.Filter(), nil
	case *ent.AppStockLockMutation:
		return m.Filter(), nil
	case *ent.CommentMutation:
		return m.Filter(), nil
	case *ent.DelegatedStakingMutation:
		return m.Filter(), nil
	case *ent.DeviceInfoMutation:
		return m.Filter(), nil
	case *ent.DeviceManufacturerMutation:
		return m.Filter(), nil
	case *ent.DevicePosterMutation:
		return m.Filter(), nil
	case *ent.ExtraInfoMutation:
		return m.Filter(), nil
	case *ent.FbmCrowdFundingMutation:
		return m.Filter(), nil
	case *ent.FeeMutation:
		return m.Filter(), nil
	case *ent.GoodMutation:
		return m.Filter(), nil
	case *ent.GoodBaseMutation:
		return m.Filter(), nil
	case *ent.GoodCoinMutation:
		return m.Filter(), nil
	case *ent.GoodRewardMutation:
		return m.Filter(), nil
	case *ent.GoodRewardHistoryMutation:
		return m.Filter(), nil
	case *ent.LikeMutation:
		return m.Filter(), nil
	case *ent.MiningGoodStockMutation:
		return m.Filter(), nil
	case *ent.PowerRentalMutation:
		return m.Filter(), nil
	case *ent.RecommendMutation:
		return m.Filter(), nil
	case *ent.RequiredAppGoodMutation:
		return m.Filter(), nil
	case *ent.RequiredGoodMutation:
		return m.Filter(), nil
	case *ent.ScoreMutation:
		return m.Filter(), nil
	case *ent.StockMutation:
		return m.Filter(), nil
	case *ent.StockLockMutation:
		return m.Filter(), nil
	case *ent.TopMostMutation:
		return m.Filter(), nil
	case *ent.TopMostGoodMutation:
		return m.Filter(), nil
	case *ent.VendorBrandMutation:
		return m.Filter(), nil
	case *ent.VendorLocationMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
