// Code generated by ent, DO NOT EDIT.

package appgoodbase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// Purchasable applies equality check predicate on the "purchasable" field. It's identical to PurchasableEQ.
func Purchasable(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchasable), v))
	})
}

// EnableProductPage applies equality check predicate on the "enable_product_page" field. It's identical to EnableProductPageEQ.
func EnableProductPage(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableProductPage), v))
	})
}

// ProductPage applies equality check predicate on the "product_page" field. It's identical to ProductPageEQ.
func ProductPage(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPage), v))
	})
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// Visible applies equality check predicate on the "visible" field. It's identical to VisibleEQ.
func Visible(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisible), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DisplayIndex applies equality check predicate on the "display_index" field. It's identical to DisplayIndexEQ.
func DisplayIndex(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// Banner applies equality check predicate on the "banner" field. It's identical to BannerEQ.
func Banner(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// PurchasableEQ applies the EQ predicate on the "purchasable" field.
func PurchasableEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchasable), v))
	})
}

// PurchasableNEQ applies the NEQ predicate on the "purchasable" field.
func PurchasableNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurchasable), v))
	})
}

// PurchasableIsNil applies the IsNil predicate on the "purchasable" field.
func PurchasableIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPurchasable)))
	})
}

// PurchasableNotNil applies the NotNil predicate on the "purchasable" field.
func PurchasableNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPurchasable)))
	})
}

// EnableProductPageEQ applies the EQ predicate on the "enable_product_page" field.
func EnableProductPageEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableProductPage), v))
	})
}

// EnableProductPageNEQ applies the NEQ predicate on the "enable_product_page" field.
func EnableProductPageNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableProductPage), v))
	})
}

// EnableProductPageIsNil applies the IsNil predicate on the "enable_product_page" field.
func EnableProductPageIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableProductPage)))
	})
}

// EnableProductPageNotNil applies the NotNil predicate on the "enable_product_page" field.
func EnableProductPageNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableProductPage)))
	})
}

// ProductPageEQ applies the EQ predicate on the "product_page" field.
func ProductPageEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPage), v))
	})
}

// ProductPageNEQ applies the NEQ predicate on the "product_page" field.
func ProductPageNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPage), v))
	})
}

// ProductPageIn applies the In predicate on the "product_page" field.
func ProductPageIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductPage), v...))
	})
}

// ProductPageNotIn applies the NotIn predicate on the "product_page" field.
func ProductPageNotIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductPage), v...))
	})
}

// ProductPageGT applies the GT predicate on the "product_page" field.
func ProductPageGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPage), v))
	})
}

// ProductPageGTE applies the GTE predicate on the "product_page" field.
func ProductPageGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPage), v))
	})
}

// ProductPageLT applies the LT predicate on the "product_page" field.
func ProductPageLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPage), v))
	})
}

// ProductPageLTE applies the LTE predicate on the "product_page" field.
func ProductPageLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPage), v))
	})
}

// ProductPageContains applies the Contains predicate on the "product_page" field.
func ProductPageContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductPage), v))
	})
}

// ProductPageHasPrefix applies the HasPrefix predicate on the "product_page" field.
func ProductPageHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductPage), v))
	})
}

// ProductPageHasSuffix applies the HasSuffix predicate on the "product_page" field.
func ProductPageHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductPage), v))
	})
}

// ProductPageIsNil applies the IsNil predicate on the "product_page" field.
func ProductPageIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPage)))
	})
}

// ProductPageNotNil applies the NotNil predicate on the "product_page" field.
func ProductPageNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPage)))
	})
}

// ProductPageEqualFold applies the EqualFold predicate on the "product_page" field.
func ProductPageEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductPage), v))
	})
}

// ProductPageContainsFold applies the ContainsFold predicate on the "product_page" field.
func ProductPageContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductPage), v))
	})
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnline), v))
	})
}

// OnlineIsNil applies the IsNil predicate on the "online" field.
func OnlineIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOnline)))
	})
}

// OnlineNotNil applies the NotNil predicate on the "online" field.
func OnlineNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOnline)))
	})
}

// VisibleEQ applies the EQ predicate on the "visible" field.
func VisibleEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisible), v))
	})
}

// VisibleNEQ applies the NEQ predicate on the "visible" field.
func VisibleNEQ(v bool) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisible), v))
	})
}

// VisibleIsNil applies the IsNil predicate on the "visible" field.
func VisibleIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisible)))
	})
}

// VisibleNotNil applies the NotNil predicate on the "visible" field.
func VisibleNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisible)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DisplayIndexEQ applies the EQ predicate on the "display_index" field.
func DisplayIndexEQ(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexNEQ applies the NEQ predicate on the "display_index" field.
func DisplayIndexNEQ(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIn applies the In predicate on the "display_index" field.
func DisplayIndexIn(vs ...int32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexNotIn applies the NotIn predicate on the "display_index" field.
func DisplayIndexNotIn(vs ...int32) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexGT applies the GT predicate on the "display_index" field.
func DisplayIndexGT(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexGTE applies the GTE predicate on the "display_index" field.
func DisplayIndexGTE(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLT applies the LT predicate on the "display_index" field.
func DisplayIndexLT(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLTE applies the LTE predicate on the "display_index" field.
func DisplayIndexLTE(v int32) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIsNil applies the IsNil predicate on the "display_index" field.
func DisplayIndexIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayIndex)))
	})
}

// DisplayIndexNotNil applies the NotNil predicate on the "display_index" field.
func DisplayIndexNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayIndex)))
	})
}

// BannerEQ applies the EQ predicate on the "banner" field.
func BannerEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// BannerNEQ applies the NEQ predicate on the "banner" field.
func BannerNEQ(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBanner), v))
	})
}

// BannerIn applies the In predicate on the "banner" field.
func BannerIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBanner), v...))
	})
}

// BannerNotIn applies the NotIn predicate on the "banner" field.
func BannerNotIn(vs ...string) predicate.AppGoodBase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBanner), v...))
	})
}

// BannerGT applies the GT predicate on the "banner" field.
func BannerGT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBanner), v))
	})
}

// BannerGTE applies the GTE predicate on the "banner" field.
func BannerGTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBanner), v))
	})
}

// BannerLT applies the LT predicate on the "banner" field.
func BannerLT(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBanner), v))
	})
}

// BannerLTE applies the LTE predicate on the "banner" field.
func BannerLTE(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBanner), v))
	})
}

// BannerContains applies the Contains predicate on the "banner" field.
func BannerContains(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBanner), v))
	})
}

// BannerHasPrefix applies the HasPrefix predicate on the "banner" field.
func BannerHasPrefix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBanner), v))
	})
}

// BannerHasSuffix applies the HasSuffix predicate on the "banner" field.
func BannerHasSuffix(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBanner), v))
	})
}

// BannerIsNil applies the IsNil predicate on the "banner" field.
func BannerIsNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBanner)))
	})
}

// BannerNotNil applies the NotNil predicate on the "banner" field.
func BannerNotNil() predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBanner)))
	})
}

// BannerEqualFold applies the EqualFold predicate on the "banner" field.
func BannerEqualFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBanner), v))
	})
}

// BannerContainsFold applies the ContainsFold predicate on the "banner" field.
func BannerContainsFold(v string) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBanner), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppGoodBase) predicate.AppGoodBase {
	return predicate.AppGoodBase(func(s *sql.Selector) {
		p(s.Not())
	})
}
