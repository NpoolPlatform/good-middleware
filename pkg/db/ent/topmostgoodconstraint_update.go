// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgoodconstraint"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostGoodConstraintUpdate is the builder for updating TopMostGoodConstraint entities.
type TopMostGoodConstraintUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostGoodConstraintMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostGoodConstraintUpdate builder.
func (tmgcu *TopMostGoodConstraintUpdate) Where(ps ...predicate.TopMostGoodConstraint) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.Where(ps...)
	return tmgcu
}

// SetCreatedAt sets the "created_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetCreatedAt(u uint32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ResetCreatedAt()
	tmgcu.mutation.SetCreatedAt(u)
	return tmgcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableCreatedAt(u *uint32) *TopMostGoodConstraintUpdate {
	if u != nil {
		tmgcu.SetCreatedAt(*u)
	}
	return tmgcu
}

// AddCreatedAt adds u to the "created_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) AddCreatedAt(u int32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.AddCreatedAt(u)
	return tmgcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetUpdatedAt(u uint32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ResetUpdatedAt()
	tmgcu.mutation.SetUpdatedAt(u)
	return tmgcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) AddUpdatedAt(u int32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.AddUpdatedAt(u)
	return tmgcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetDeletedAt(u uint32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ResetDeletedAt()
	tmgcu.mutation.SetDeletedAt(u)
	return tmgcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableDeletedAt(u *uint32) *TopMostGoodConstraintUpdate {
	if u != nil {
		tmgcu.SetDeletedAt(*u)
	}
	return tmgcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmgcu *TopMostGoodConstraintUpdate) AddDeletedAt(u int32) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.AddDeletedAt(u)
	return tmgcu
}

// SetEntID sets the "ent_id" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetEntID(u uuid.UUID) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.SetEntID(u)
	return tmgcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableEntID(u *uuid.UUID) *TopMostGoodConstraintUpdate {
	if u != nil {
		tmgcu.SetEntID(*u)
	}
	return tmgcu
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetTopMostGoodID(u uuid.UUID) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.SetTopMostGoodID(u)
	return tmgcu
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodConstraintUpdate {
	if u != nil {
		tmgcu.SetTopMostGoodID(*u)
	}
	return tmgcu
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgcu *TopMostGoodConstraintUpdate) ClearTopMostGoodID() *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ClearTopMostGoodID()
	return tmgcu
}

// SetConstraint sets the "constraint" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetConstraint(s string) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.SetConstraint(s)
	return tmgcu
}

// SetNillableConstraint sets the "constraint" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableConstraint(s *string) *TopMostGoodConstraintUpdate {
	if s != nil {
		tmgcu.SetConstraint(*s)
	}
	return tmgcu
}

// ClearConstraint clears the value of the "constraint" field.
func (tmgcu *TopMostGoodConstraintUpdate) ClearConstraint() *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ClearConstraint()
	return tmgcu
}

// SetTargetValue sets the "target_value" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetTargetValue(d decimal.Decimal) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.SetTargetValue(d)
	return tmgcu
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableTargetValue(d *decimal.Decimal) *TopMostGoodConstraintUpdate {
	if d != nil {
		tmgcu.SetTargetValue(*d)
	}
	return tmgcu
}

// ClearTargetValue clears the value of the "target_value" field.
func (tmgcu *TopMostGoodConstraintUpdate) ClearTargetValue() *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ClearTargetValue()
	return tmgcu
}

// SetIndex sets the "index" field.
func (tmgcu *TopMostGoodConstraintUpdate) SetIndex(u uint8) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ResetIndex()
	tmgcu.mutation.SetIndex(u)
	return tmgcu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgcu *TopMostGoodConstraintUpdate) SetNillableIndex(u *uint8) *TopMostGoodConstraintUpdate {
	if u != nil {
		tmgcu.SetIndex(*u)
	}
	return tmgcu
}

// AddIndex adds u to the "index" field.
func (tmgcu *TopMostGoodConstraintUpdate) AddIndex(u int8) *TopMostGoodConstraintUpdate {
	tmgcu.mutation.AddIndex(u)
	return tmgcu
}

// ClearIndex clears the value of the "index" field.
func (tmgcu *TopMostGoodConstraintUpdate) ClearIndex() *TopMostGoodConstraintUpdate {
	tmgcu.mutation.ClearIndex()
	return tmgcu
}

// Mutation returns the TopMostGoodConstraintMutation object of the builder.
func (tmgcu *TopMostGoodConstraintUpdate) Mutation() *TopMostGoodConstraintMutation {
	return tmgcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmgcu *TopMostGoodConstraintUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tmgcu.defaults(); err != nil {
		return 0, err
	}
	if len(tmgcu.hooks) == 0 {
		affected, err = tmgcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostGoodConstraintMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmgcu.mutation = mutation
			affected, err = tmgcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmgcu.hooks) - 1; i >= 0; i-- {
			if tmgcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmgcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmgcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmgcu *TopMostGoodConstraintUpdate) SaveX(ctx context.Context) int {
	affected, err := tmgcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmgcu *TopMostGoodConstraintUpdate) Exec(ctx context.Context) error {
	_, err := tmgcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgcu *TopMostGoodConstraintUpdate) ExecX(ctx context.Context) {
	if err := tmgcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgcu *TopMostGoodConstraintUpdate) defaults() error {
	if _, ok := tmgcu.mutation.UpdatedAt(); !ok {
		if topmostgoodconstraint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmostgoodconstraint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmostgoodconstraint.UpdateDefaultUpdatedAt()
		tmgcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgcu *TopMostGoodConstraintUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodConstraintUpdate {
	tmgcu.modifiers = append(tmgcu.modifiers, modifiers...)
	return tmgcu
}

func (tmgcu *TopMostGoodConstraintUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmostgoodconstraint.Table,
			Columns: topmostgoodconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodconstraint.FieldID,
			},
		},
	}
	if ps := tmgcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldCreatedAt,
		})
	}
	if value, ok := tmgcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldCreatedAt,
		})
	}
	if value, ok := tmgcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldUpdatedAt,
		})
	}
	if value, ok := tmgcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldUpdatedAt,
		})
	}
	if value, ok := tmgcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldDeletedAt,
		})
	}
	if value, ok := tmgcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldDeletedAt,
		})
	}
	if value, ok := tmgcu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodconstraint.FieldEntID,
		})
	}
	if value, ok := tmgcu.mutation.TopMostGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodconstraint.FieldTopMostGoodID,
		})
	}
	if tmgcu.mutation.TopMostGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: topmostgoodconstraint.FieldTopMostGoodID,
		})
	}
	if value, ok := tmgcu.mutation.Constraint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmostgoodconstraint.FieldConstraint,
		})
	}
	if tmgcu.mutation.ConstraintCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmostgoodconstraint.FieldConstraint,
		})
	}
	if value, ok := tmgcu.mutation.TargetValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: topmostgoodconstraint.FieldTargetValue,
		})
	}
	if tmgcu.mutation.TargetValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: topmostgoodconstraint.FieldTargetValue,
		})
	}
	if value, ok := tmgcu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	if value, ok := tmgcu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	if tmgcu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	_spec.Modifiers = tmgcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tmgcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TopMostGoodConstraintUpdateOne is the builder for updating a single TopMostGoodConstraint entity.
type TopMostGoodConstraintUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostGoodConstraintMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetCreatedAt(u uint32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ResetCreatedAt()
	tmgcuo.mutation.SetCreatedAt(u)
	return tmgcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableCreatedAt(u *uint32) *TopMostGoodConstraintUpdateOne {
	if u != nil {
		tmgcuo.SetCreatedAt(*u)
	}
	return tmgcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) AddCreatedAt(u int32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.AddCreatedAt(u)
	return tmgcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetUpdatedAt(u uint32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ResetUpdatedAt()
	tmgcuo.mutation.SetUpdatedAt(u)
	return tmgcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) AddUpdatedAt(u int32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.AddUpdatedAt(u)
	return tmgcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetDeletedAt(u uint32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ResetDeletedAt()
	tmgcuo.mutation.SetDeletedAt(u)
	return tmgcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableDeletedAt(u *uint32) *TopMostGoodConstraintUpdateOne {
	if u != nil {
		tmgcuo.SetDeletedAt(*u)
	}
	return tmgcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) AddDeletedAt(u int32) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.AddDeletedAt(u)
	return tmgcuo
}

// SetEntID sets the "ent_id" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetEntID(u uuid.UUID) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.SetEntID(u)
	return tmgcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostGoodConstraintUpdateOne {
	if u != nil {
		tmgcuo.SetEntID(*u)
	}
	return tmgcuo
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetTopMostGoodID(u uuid.UUID) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.SetTopMostGoodID(u)
	return tmgcuo
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodConstraintUpdateOne {
	if u != nil {
		tmgcuo.SetTopMostGoodID(*u)
	}
	return tmgcuo
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) ClearTopMostGoodID() *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ClearTopMostGoodID()
	return tmgcuo
}

// SetConstraint sets the "constraint" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetConstraint(s string) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.SetConstraint(s)
	return tmgcuo
}

// SetNillableConstraint sets the "constraint" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableConstraint(s *string) *TopMostGoodConstraintUpdateOne {
	if s != nil {
		tmgcuo.SetConstraint(*s)
	}
	return tmgcuo
}

// ClearConstraint clears the value of the "constraint" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) ClearConstraint() *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ClearConstraint()
	return tmgcuo
}

// SetTargetValue sets the "target_value" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetTargetValue(d decimal.Decimal) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.SetTargetValue(d)
	return tmgcuo
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableTargetValue(d *decimal.Decimal) *TopMostGoodConstraintUpdateOne {
	if d != nil {
		tmgcuo.SetTargetValue(*d)
	}
	return tmgcuo
}

// ClearTargetValue clears the value of the "target_value" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) ClearTargetValue() *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ClearTargetValue()
	return tmgcuo
}

// SetIndex sets the "index" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetIndex(u uint8) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ResetIndex()
	tmgcuo.mutation.SetIndex(u)
	return tmgcuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SetNillableIndex(u *uint8) *TopMostGoodConstraintUpdateOne {
	if u != nil {
		tmgcuo.SetIndex(*u)
	}
	return tmgcuo
}

// AddIndex adds u to the "index" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) AddIndex(u int8) *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.AddIndex(u)
	return tmgcuo
}

// ClearIndex clears the value of the "index" field.
func (tmgcuo *TopMostGoodConstraintUpdateOne) ClearIndex() *TopMostGoodConstraintUpdateOne {
	tmgcuo.mutation.ClearIndex()
	return tmgcuo
}

// Mutation returns the TopMostGoodConstraintMutation object of the builder.
func (tmgcuo *TopMostGoodConstraintUpdateOne) Mutation() *TopMostGoodConstraintMutation {
	return tmgcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmgcuo *TopMostGoodConstraintUpdateOne) Select(field string, fields ...string) *TopMostGoodConstraintUpdateOne {
	tmgcuo.fields = append([]string{field}, fields...)
	return tmgcuo
}

// Save executes the query and returns the updated TopMostGoodConstraint entity.
func (tmgcuo *TopMostGoodConstraintUpdateOne) Save(ctx context.Context) (*TopMostGoodConstraint, error) {
	var (
		err  error
		node *TopMostGoodConstraint
	)
	if err := tmgcuo.defaults(); err != nil {
		return nil, err
	}
	if len(tmgcuo.hooks) == 0 {
		node, err = tmgcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostGoodConstraintMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmgcuo.mutation = mutation
			node, err = tmgcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmgcuo.hooks) - 1; i >= 0; i-- {
			if tmgcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmgcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmgcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopMostGoodConstraint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopMostGoodConstraintMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmgcuo *TopMostGoodConstraintUpdateOne) SaveX(ctx context.Context) *TopMostGoodConstraint {
	node, err := tmgcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmgcuo *TopMostGoodConstraintUpdateOne) Exec(ctx context.Context) error {
	_, err := tmgcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgcuo *TopMostGoodConstraintUpdateOne) ExecX(ctx context.Context) {
	if err := tmgcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgcuo *TopMostGoodConstraintUpdateOne) defaults() error {
	if _, ok := tmgcuo.mutation.UpdatedAt(); !ok {
		if topmostgoodconstraint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmostgoodconstraint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmostgoodconstraint.UpdateDefaultUpdatedAt()
		tmgcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgcuo *TopMostGoodConstraintUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodConstraintUpdateOne {
	tmgcuo.modifiers = append(tmgcuo.modifiers, modifiers...)
	return tmgcuo
}

func (tmgcuo *TopMostGoodConstraintUpdateOne) sqlSave(ctx context.Context) (_node *TopMostGoodConstraint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmostgoodconstraint.Table,
			Columns: topmostgoodconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodconstraint.FieldID,
			},
		},
	}
	id, ok := tmgcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopMostGoodConstraint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmgcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmostgoodconstraint.FieldID)
		for _, f := range fields {
			if !topmostgoodconstraint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topmostgoodconstraint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmgcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldCreatedAt,
		})
	}
	if value, ok := tmgcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldCreatedAt,
		})
	}
	if value, ok := tmgcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldUpdatedAt,
		})
	}
	if value, ok := tmgcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldUpdatedAt,
		})
	}
	if value, ok := tmgcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldDeletedAt,
		})
	}
	if value, ok := tmgcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodconstraint.FieldDeletedAt,
		})
	}
	if value, ok := tmgcuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodconstraint.FieldEntID,
		})
	}
	if value, ok := tmgcuo.mutation.TopMostGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodconstraint.FieldTopMostGoodID,
		})
	}
	if tmgcuo.mutation.TopMostGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: topmostgoodconstraint.FieldTopMostGoodID,
		})
	}
	if value, ok := tmgcuo.mutation.Constraint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmostgoodconstraint.FieldConstraint,
		})
	}
	if tmgcuo.mutation.ConstraintCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmostgoodconstraint.FieldConstraint,
		})
	}
	if value, ok := tmgcuo.mutation.TargetValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: topmostgoodconstraint.FieldTargetValue,
		})
	}
	if tmgcuo.mutation.TargetValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: topmostgoodconstraint.FieldTargetValue,
		})
	}
	if value, ok := tmgcuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	if value, ok := tmgcuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	if tmgcuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: topmostgoodconstraint.FieldIndex,
		})
	}
	_spec.Modifiers = tmgcuo.modifiers
	_node = &TopMostGoodConstraint{config: tmgcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmgcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
