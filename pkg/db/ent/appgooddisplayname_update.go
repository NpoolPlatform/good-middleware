// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgooddisplayname"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppGoodDisplayNameUpdate is the builder for updating AppGoodDisplayName entities.
type AppGoodDisplayNameUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodDisplayNameMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodDisplayNameUpdate builder.
func (agdnu *AppGoodDisplayNameUpdate) Where(ps ...predicate.AppGoodDisplayName) *AppGoodDisplayNameUpdate {
	agdnu.mutation.Where(ps...)
	return agdnu
}

// SetCreatedAt sets the "created_at" field.
func (agdnu *AppGoodDisplayNameUpdate) SetCreatedAt(u uint32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.ResetCreatedAt()
	agdnu.mutation.SetCreatedAt(u)
	return agdnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableCreatedAt(u *uint32) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetCreatedAt(*u)
	}
	return agdnu
}

// AddCreatedAt adds u to the "created_at" field.
func (agdnu *AppGoodDisplayNameUpdate) AddCreatedAt(u int32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.AddCreatedAt(u)
	return agdnu
}

// SetUpdatedAt sets the "updated_at" field.
func (agdnu *AppGoodDisplayNameUpdate) SetUpdatedAt(u uint32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.ResetUpdatedAt()
	agdnu.mutation.SetUpdatedAt(u)
	return agdnu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agdnu *AppGoodDisplayNameUpdate) AddUpdatedAt(u int32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.AddUpdatedAt(u)
	return agdnu
}

// SetDeletedAt sets the "deleted_at" field.
func (agdnu *AppGoodDisplayNameUpdate) SetDeletedAt(u uint32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.ResetDeletedAt()
	agdnu.mutation.SetDeletedAt(u)
	return agdnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableDeletedAt(u *uint32) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetDeletedAt(*u)
	}
	return agdnu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agdnu *AppGoodDisplayNameUpdate) AddDeletedAt(u int32) *AppGoodDisplayNameUpdate {
	agdnu.mutation.AddDeletedAt(u)
	return agdnu
}

// SetEntID sets the "ent_id" field.
func (agdnu *AppGoodDisplayNameUpdate) SetEntID(u uuid.UUID) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetEntID(u)
	return agdnu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetEntID(*u)
	}
	return agdnu
}

// SetAppGoodID sets the "app_good_id" field.
func (agdnu *AppGoodDisplayNameUpdate) SetAppGoodID(u uuid.UUID) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetAppGoodID(u)
	return agdnu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetAppGoodID(*u)
	}
	return agdnu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearAppGoodID() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearAppGoodID()
	return agdnu
}

// SetName sets the "name" field.
func (agdnu *AppGoodDisplayNameUpdate) SetName(s string) *AppGoodDisplayNameUpdate {
	agdnu.mutation.SetName(s)
	return agdnu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableName(s *string) *AppGoodDisplayNameUpdate {
	if s != nil {
		agdnu.SetName(*s)
	}
	return agdnu
}

// ClearName clears the value of the "name" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearName() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearName()
	return agdnu
}

// SetIndex sets the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) SetIndex(u uint8) *AppGoodDisplayNameUpdate {
	agdnu.mutation.ResetIndex()
	agdnu.mutation.SetIndex(u)
	return agdnu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdnu *AppGoodDisplayNameUpdate) SetNillableIndex(u *uint8) *AppGoodDisplayNameUpdate {
	if u != nil {
		agdnu.SetIndex(*u)
	}
	return agdnu
}

// AddIndex adds u to the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) AddIndex(u int8) *AppGoodDisplayNameUpdate {
	agdnu.mutation.AddIndex(u)
	return agdnu
}

// ClearIndex clears the value of the "index" field.
func (agdnu *AppGoodDisplayNameUpdate) ClearIndex() *AppGoodDisplayNameUpdate {
	agdnu.mutation.ClearIndex()
	return agdnu
}

// Mutation returns the AppGoodDisplayNameMutation object of the builder.
func (agdnu *AppGoodDisplayNameUpdate) Mutation() *AppGoodDisplayNameMutation {
	return agdnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agdnu *AppGoodDisplayNameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := agdnu.defaults(); err != nil {
		return 0, err
	}
	if len(agdnu.hooks) == 0 {
		affected, err = agdnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodDisplayNameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agdnu.mutation = mutation
			affected, err = agdnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agdnu.hooks) - 1; i >= 0; i-- {
			if agdnu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agdnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agdnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agdnu *AppGoodDisplayNameUpdate) SaveX(ctx context.Context) int {
	affected, err := agdnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agdnu *AppGoodDisplayNameUpdate) Exec(ctx context.Context) error {
	_, err := agdnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdnu *AppGoodDisplayNameUpdate) ExecX(ctx context.Context) {
	if err := agdnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdnu *AppGoodDisplayNameUpdate) defaults() error {
	if _, ok := agdnu.mutation.UpdatedAt(); !ok {
		if appgooddisplayname.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgooddisplayname.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgooddisplayname.UpdateDefaultUpdatedAt()
		agdnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdnu *AppGoodDisplayNameUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayNameUpdate {
	agdnu.modifiers = append(agdnu.modifiers, modifiers...)
	return agdnu
}

func (agdnu *AppGoodDisplayNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgooddisplayname.Table,
			Columns: appgooddisplayname.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplayname.FieldID,
			},
		},
	}
	if ps := agdnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdnu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldCreatedAt,
		})
	}
	if value, ok := agdnu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldCreatedAt,
		})
	}
	if value, ok := agdnu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldUpdatedAt,
		})
	}
	if value, ok := agdnu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldUpdatedAt,
		})
	}
	if value, ok := agdnu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldDeletedAt,
		})
	}
	if value, ok := agdnu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldDeletedAt,
		})
	}
	if value, ok := agdnu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplayname.FieldEntID,
		})
	}
	if value, ok := agdnu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplayname.FieldAppGoodID,
		})
	}
	if agdnu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgooddisplayname.FieldAppGoodID,
		})
	}
	if value, ok := agdnu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgooddisplayname.FieldName,
		})
	}
	if agdnu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgooddisplayname.FieldName,
		})
	}
	if value, ok := agdnu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	if value, ok := agdnu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	if agdnu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	_spec.Modifiers = agdnu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, agdnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplayname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodDisplayNameUpdateOne is the builder for updating a single AppGoodDisplayName entity.
type AppGoodDisplayNameUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodDisplayNameMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetCreatedAt(u uint32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ResetCreatedAt()
	agdnuo.mutation.SetCreatedAt(u)
	return agdnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetCreatedAt(*u)
	}
	return agdnuo
}

// AddCreatedAt adds u to the "created_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) AddCreatedAt(u int32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.AddCreatedAt(u)
	return agdnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetUpdatedAt(u uint32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ResetUpdatedAt()
	agdnuo.mutation.SetUpdatedAt(u)
	return agdnuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) AddUpdatedAt(u int32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.AddUpdatedAt(u)
	return agdnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetDeletedAt(u uint32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ResetDeletedAt()
	agdnuo.mutation.SetDeletedAt(u)
	return agdnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetDeletedAt(*u)
	}
	return agdnuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) AddDeletedAt(u int32) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.AddDeletedAt(u)
	return agdnuo
}

// SetEntID sets the "ent_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetEntID(u uuid.UUID) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetEntID(u)
	return agdnuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetEntID(*u)
	}
	return agdnuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetAppGoodID(u)
	return agdnuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetAppGoodID(*u)
	}
	return agdnuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearAppGoodID() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearAppGoodID()
	return agdnuo
}

// SetName sets the "name" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetName(s string) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.SetName(s)
	return agdnuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableName(s *string) *AppGoodDisplayNameUpdateOne {
	if s != nil {
		agdnuo.SetName(*s)
	}
	return agdnuo
}

// ClearName clears the value of the "name" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearName() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearName()
	return agdnuo
}

// SetIndex sets the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetIndex(u uint8) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ResetIndex()
	agdnuo.mutation.SetIndex(u)
	return agdnuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdnuo *AppGoodDisplayNameUpdateOne) SetNillableIndex(u *uint8) *AppGoodDisplayNameUpdateOne {
	if u != nil {
		agdnuo.SetIndex(*u)
	}
	return agdnuo
}

// AddIndex adds u to the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) AddIndex(u int8) *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.AddIndex(u)
	return agdnuo
}

// ClearIndex clears the value of the "index" field.
func (agdnuo *AppGoodDisplayNameUpdateOne) ClearIndex() *AppGoodDisplayNameUpdateOne {
	agdnuo.mutation.ClearIndex()
	return agdnuo
}

// Mutation returns the AppGoodDisplayNameMutation object of the builder.
func (agdnuo *AppGoodDisplayNameUpdateOne) Mutation() *AppGoodDisplayNameMutation {
	return agdnuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agdnuo *AppGoodDisplayNameUpdateOne) Select(field string, fields ...string) *AppGoodDisplayNameUpdateOne {
	agdnuo.fields = append([]string{field}, fields...)
	return agdnuo
}

// Save executes the query and returns the updated AppGoodDisplayName entity.
func (agdnuo *AppGoodDisplayNameUpdateOne) Save(ctx context.Context) (*AppGoodDisplayName, error) {
	var (
		err  error
		node *AppGoodDisplayName
	)
	if err := agdnuo.defaults(); err != nil {
		return nil, err
	}
	if len(agdnuo.hooks) == 0 {
		node, err = agdnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodDisplayNameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agdnuo.mutation = mutation
			node, err = agdnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agdnuo.hooks) - 1; i >= 0; i-- {
			if agdnuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agdnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, agdnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppGoodDisplayName)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppGoodDisplayNameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (agdnuo *AppGoodDisplayNameUpdateOne) SaveX(ctx context.Context) *AppGoodDisplayName {
	node, err := agdnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agdnuo *AppGoodDisplayNameUpdateOne) Exec(ctx context.Context) error {
	_, err := agdnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdnuo *AppGoodDisplayNameUpdateOne) ExecX(ctx context.Context) {
	if err := agdnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdnuo *AppGoodDisplayNameUpdateOne) defaults() error {
	if _, ok := agdnuo.mutation.UpdatedAt(); !ok {
		if appgooddisplayname.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgooddisplayname.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgooddisplayname.UpdateDefaultUpdatedAt()
		agdnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdnuo *AppGoodDisplayNameUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayNameUpdateOne {
	agdnuo.modifiers = append(agdnuo.modifiers, modifiers...)
	return agdnuo
}

func (agdnuo *AppGoodDisplayNameUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodDisplayName, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgooddisplayname.Table,
			Columns: appgooddisplayname.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplayname.FieldID,
			},
		},
	}
	id, ok := agdnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGoodDisplayName.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agdnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgooddisplayname.FieldID)
		for _, f := range fields {
			if !appgooddisplayname.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgooddisplayname.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agdnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdnuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldCreatedAt,
		})
	}
	if value, ok := agdnuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldCreatedAt,
		})
	}
	if value, ok := agdnuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldUpdatedAt,
		})
	}
	if value, ok := agdnuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldUpdatedAt,
		})
	}
	if value, ok := agdnuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldDeletedAt,
		})
	}
	if value, ok := agdnuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplayname.FieldDeletedAt,
		})
	}
	if value, ok := agdnuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplayname.FieldEntID,
		})
	}
	if value, ok := agdnuo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplayname.FieldAppGoodID,
		})
	}
	if agdnuo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgooddisplayname.FieldAppGoodID,
		})
	}
	if value, ok := agdnuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgooddisplayname.FieldName,
		})
	}
	if agdnuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgooddisplayname.FieldName,
		})
	}
	if value, ok := agdnuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	if value, ok := agdnuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	if agdnuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: appgooddisplayname.FieldIndex,
		})
	}
	_spec.Modifiers = agdnuo.modifiers
	_node = &AppGoodDisplayName{config: agdnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agdnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplayname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
