// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodrewardhistory"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodRewardHistory is the model entity for the GoodRewardHistory schema.
type GoodRewardHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// RewardDate holds the value of the "reward_date" field.
	RewardDate uint32 `json:"reward_date,omitempty"`
	// Tid holds the value of the "tid" field.
	Tid uuid.UUID `json:"tid,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// UnitAmount holds the value of the "unit_amount" field.
	UnitAmount decimal.Decimal `json:"unit_amount,omitempty"`
	// UnitNetAmount holds the value of the "unit_net_amount" field.
	UnitNetAmount decimal.Decimal `json:"unit_net_amount,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodRewardHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodrewardhistory.FieldAmount, goodrewardhistory.FieldUnitAmount, goodrewardhistory.FieldUnitNetAmount:
			values[i] = new(decimal.Decimal)
		case goodrewardhistory.FieldCreatedAt, goodrewardhistory.FieldUpdatedAt, goodrewardhistory.FieldDeletedAt, goodrewardhistory.FieldRewardDate:
			values[i] = new(sql.NullInt64)
		case goodrewardhistory.FieldResult:
			values[i] = new(sql.NullString)
		case goodrewardhistory.FieldID, goodrewardhistory.FieldAppID, goodrewardhistory.FieldGoodID, goodrewardhistory.FieldTid:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodRewardHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodRewardHistory fields.
func (grh *GoodRewardHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodrewardhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				grh.ID = *value
			}
		case goodrewardhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				grh.CreatedAt = uint32(value.Int64)
			}
		case goodrewardhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				grh.UpdatedAt = uint32(value.Int64)
			}
		case goodrewardhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				grh.DeletedAt = uint32(value.Int64)
			}
		case goodrewardhistory.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				grh.AppID = *value
			}
		case goodrewardhistory.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				grh.GoodID = *value
			}
		case goodrewardhistory.FieldRewardDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward_date", values[i])
			} else if value.Valid {
				grh.RewardDate = uint32(value.Int64)
			}
		case goodrewardhistory.FieldTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tid", values[i])
			} else if value != nil {
				grh.Tid = *value
			}
		case goodrewardhistory.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				grh.Amount = *value
			}
		case goodrewardhistory.FieldUnitAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_amount", values[i])
			} else if value != nil {
				grh.UnitAmount = *value
			}
		case goodrewardhistory.FieldUnitNetAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_net_amount", values[i])
			} else if value != nil {
				grh.UnitNetAmount = *value
			}
		case goodrewardhistory.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				grh.Result = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodRewardHistory.
// Note that you need to call GoodRewardHistory.Unwrap() before calling this method if this GoodRewardHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (grh *GoodRewardHistory) Update() *GoodRewardHistoryUpdateOne {
	return (&GoodRewardHistoryClient{config: grh.config}).UpdateOne(grh)
}

// Unwrap unwraps the GoodRewardHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (grh *GoodRewardHistory) Unwrap() *GoodRewardHistory {
	_tx, ok := grh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodRewardHistory is not a transactional entity")
	}
	grh.config.driver = _tx.drv
	return grh
}

// String implements the fmt.Stringer.
func (grh *GoodRewardHistory) String() string {
	var builder strings.Builder
	builder.WriteString("GoodRewardHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", grh.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", grh.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", grh.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", grh.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", grh.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", grh.GoodID))
	builder.WriteString(", ")
	builder.WriteString("reward_date=")
	builder.WriteString(fmt.Sprintf("%v", grh.RewardDate))
	builder.WriteString(", ")
	builder.WriteString("tid=")
	builder.WriteString(fmt.Sprintf("%v", grh.Tid))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.Amount))
	builder.WriteString(", ")
	builder.WriteString("unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.UnitAmount))
	builder.WriteString(", ")
	builder.WriteString("unit_net_amount=")
	builder.WriteString(fmt.Sprintf("%v", grh.UnitNetAmount))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(grh.Result)
	builder.WriteByte(')')
	return builder.String()
}

// GoodRewardHistories is a parsable slice of GoodRewardHistory.
type GoodRewardHistories []*GoodRewardHistory

func (grh GoodRewardHistories) config(cfg config) {
	for _i := range grh {
		grh[_i].config = cfg
	}
}
