// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmost"
	"github.com/google/uuid"
)

// TopMost is the model entity for the TopMost schema.
type TopMost struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// TopMostType holds the value of the "top_most_type" field.
	TopMostType string `json:"top_most_type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Posters holds the value of the "posters" field.
	Posters []string `json:"posters,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
	// ThresholdCredits holds the value of the "threshold_credits" field.
	ThresholdCredits string `json:"threshold_credits,omitempty"`
	// RegisterElapsedSeconds holds the value of the "register_elapsed_seconds" field.
	RegisterElapsedSeconds uint32 `json:"register_elapsed_seconds,omitempty"`
	// ThresholdPurchases holds the value of the "threshold_purchases" field.
	ThresholdPurchases uint32 `json:"threshold_purchases,omitempty"`
	// ThresholdPaymentAmount holds the value of the "threshold_payment_amount" field.
	ThresholdPaymentAmount string `json:"threshold_payment_amount,omitempty"`
	// KycMust holds the value of the "kyc_must" field.
	KycMust bool `json:"kyc_must,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopMost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case topmost.FieldPosters:
			values[i] = new([]byte)
		case topmost.FieldKycMust:
			values[i] = new(sql.NullBool)
		case topmost.FieldCreatedAt, topmost.FieldUpdatedAt, topmost.FieldDeletedAt, topmost.FieldStartAt, topmost.FieldEndAt, topmost.FieldRegisterElapsedSeconds, topmost.FieldThresholdPurchases:
			values[i] = new(sql.NullInt64)
		case topmost.FieldTopMostType, topmost.FieldTitle, topmost.FieldMessage, topmost.FieldThresholdCredits, topmost.FieldThresholdPaymentAmount:
			values[i] = new(sql.NullString)
		case topmost.FieldID, topmost.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TopMost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopMost fields.
func (tm *TopMost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topmost.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tm.ID = *value
			}
		case topmost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = uint32(value.Int64)
			}
		case topmost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = uint32(value.Int64)
			}
		case topmost.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tm.DeletedAt = uint32(value.Int64)
			}
		case topmost.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				tm.AppID = *value
			}
		case topmost.FieldTopMostType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field top_most_type", values[i])
			} else if value.Valid {
				tm.TopMostType = value.String
			}
		case topmost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tm.Title = value.String
			}
		case topmost.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				tm.Message = value.String
			}
		case topmost.FieldPosters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field posters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tm.Posters); err != nil {
					return fmt.Errorf("unmarshal field posters: %w", err)
				}
			}
		case topmost.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				tm.StartAt = uint32(value.Int64)
			}
		case topmost.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				tm.EndAt = uint32(value.Int64)
			}
		case topmost.FieldThresholdCredits:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field threshold_credits", values[i])
			} else if value.Valid {
				tm.ThresholdCredits = value.String
			}
		case topmost.FieldRegisterElapsedSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field register_elapsed_seconds", values[i])
			} else if value.Valid {
				tm.RegisterElapsedSeconds = uint32(value.Int64)
			}
		case topmost.FieldThresholdPurchases:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field threshold_purchases", values[i])
			} else if value.Valid {
				tm.ThresholdPurchases = uint32(value.Int64)
			}
		case topmost.FieldThresholdPaymentAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field threshold_payment_amount", values[i])
			} else if value.Valid {
				tm.ThresholdPaymentAmount = value.String
			}
		case topmost.FieldKycMust:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field kyc_must", values[i])
			} else if value.Valid {
				tm.KycMust = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TopMost.
// Note that you need to call TopMost.Unwrap() before calling this method if this TopMost
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TopMost) Update() *TopMostUpdateOne {
	return (&TopMostClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the TopMost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TopMost) Unwrap() *TopMost {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopMost is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TopMost) String() string {
	var builder strings.Builder
	builder.WriteString("TopMost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.AppID))
	builder.WriteString(", ")
	builder.WriteString("top_most_type=")
	builder.WriteString(tm.TopMostType)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tm.Title)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(tm.Message)
	builder.WriteString(", ")
	builder.WriteString("posters=")
	builder.WriteString(fmt.Sprintf("%v", tm.Posters))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", tm.EndAt))
	builder.WriteString(", ")
	builder.WriteString("threshold_credits=")
	builder.WriteString(tm.ThresholdCredits)
	builder.WriteString(", ")
	builder.WriteString("register_elapsed_seconds=")
	builder.WriteString(fmt.Sprintf("%v", tm.RegisterElapsedSeconds))
	builder.WriteString(", ")
	builder.WriteString("threshold_purchases=")
	builder.WriteString(fmt.Sprintf("%v", tm.ThresholdPurchases))
	builder.WriteString(", ")
	builder.WriteString("threshold_payment_amount=")
	builder.WriteString(tm.ThresholdPaymentAmount)
	builder.WriteString(", ")
	builder.WriteString("kyc_must=")
	builder.WriteString(fmt.Sprintf("%v", tm.KycMust))
	builder.WriteByte(')')
	return builder.String()
}

// TopMosts is a parsable slice of TopMost.
type TopMosts []*TopMost

func (tm TopMosts) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
