// Code generated by ent, DO NOT EDIT.

package appgood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// Visible applies equality check predicate on the "visible" field. It's identical to VisibleEQ.
func Visible(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisible), v))
	})
}

// GoodName applies equality check predicate on the "good_name" field. It's identical to GoodNameEQ.
func GoodName(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodName), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// DisplayIndex applies equality check predicate on the "display_index" field. It's identical to DisplayIndexEQ.
func DisplayIndex(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// PurchaseLimit applies equality check predicate on the "purchase_limit" field. It's identical to PurchaseLimitEQ.
func PurchaseLimit(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseLimit), v))
	})
}

// SaleStartAt applies equality check predicate on the "sale_start_at" field. It's identical to SaleStartAtEQ.
func SaleStartAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleEndAt applies equality check predicate on the "sale_end_at" field. It's identical to SaleEndAtEQ.
func SaleEndAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleEndAt), v))
	})
}

// ServiceStartAt applies equality check predicate on the "service_start_at" field. It's identical to ServiceStartAtEQ.
func ServiceStartAt(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStartAt), v))
	})
}

// TechnicalFeeRatio applies equality check predicate on the "technical_fee_ratio" field. It's identical to TechnicalFeeRatioEQ.
func TechnicalFeeRatio(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTechnicalFeeRatio), v))
	})
}

// ElectricityFeeRatio applies equality check predicate on the "electricity_fee_ratio" field. It's identical to ElectricityFeeRatioEQ.
func ElectricityFeeRatio(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricityFeeRatio), v))
	})
}

// GoodBanner applies equality check predicate on the "good_banner" field. It's identical to GoodBannerEQ.
func GoodBanner(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodBanner), v))
	})
}

// EnablePurchase applies equality check predicate on the "enable_purchase" field. It's identical to EnablePurchaseEQ.
func EnablePurchase(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnablePurchase), v))
	})
}

// EnableProductPage applies equality check predicate on the "enable_product_page" field. It's identical to EnableProductPageEQ.
func EnableProductPage(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableProductPage), v))
	})
}

// CancelMode applies equality check predicate on the "cancel_mode" field. It's identical to CancelModeEQ.
func CancelMode(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelMode), v))
	})
}

// UserPurchaseLimit applies equality check predicate on the "user_purchase_limit" field. It's identical to UserPurchaseLimitEQ.
func UserPurchaseLimit(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserPurchaseLimit), v))
	})
}

// CancellableBeforeStart applies equality check predicate on the "cancellable_before_start" field. It's identical to CancellableBeforeStartEQ.
func CancellableBeforeStart(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancellableBeforeStart), v))
	})
}

// ProductPage applies equality check predicate on the "product_page" field. It's identical to ProductPageEQ.
func ProductPage(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPage), v))
	})
}

// EnableSetCommission applies equality check predicate on the "enable_set_commission" field. It's identical to EnableSetCommissionEQ.
func EnableSetCommission(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableSetCommission), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnline), v))
	})
}

// OnlineIsNil applies the IsNil predicate on the "online" field.
func OnlineIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOnline)))
	})
}

// OnlineNotNil applies the NotNil predicate on the "online" field.
func OnlineNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOnline)))
	})
}

// VisibleEQ applies the EQ predicate on the "visible" field.
func VisibleEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisible), v))
	})
}

// VisibleNEQ applies the NEQ predicate on the "visible" field.
func VisibleNEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisible), v))
	})
}

// VisibleIsNil applies the IsNil predicate on the "visible" field.
func VisibleIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisible)))
	})
}

// VisibleNotNil applies the NotNil predicate on the "visible" field.
func VisibleNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisible)))
	})
}

// GoodNameEQ applies the EQ predicate on the "good_name" field.
func GoodNameEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodName), v))
	})
}

// GoodNameNEQ applies the NEQ predicate on the "good_name" field.
func GoodNameNEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodName), v))
	})
}

// GoodNameIn applies the In predicate on the "good_name" field.
func GoodNameIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodName), v...))
	})
}

// GoodNameNotIn applies the NotIn predicate on the "good_name" field.
func GoodNameNotIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodName), v...))
	})
}

// GoodNameGT applies the GT predicate on the "good_name" field.
func GoodNameGT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodName), v))
	})
}

// GoodNameGTE applies the GTE predicate on the "good_name" field.
func GoodNameGTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodName), v))
	})
}

// GoodNameLT applies the LT predicate on the "good_name" field.
func GoodNameLT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodName), v))
	})
}

// GoodNameLTE applies the LTE predicate on the "good_name" field.
func GoodNameLTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodName), v))
	})
}

// GoodNameContains applies the Contains predicate on the "good_name" field.
func GoodNameContains(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoodName), v))
	})
}

// GoodNameHasPrefix applies the HasPrefix predicate on the "good_name" field.
func GoodNameHasPrefix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoodName), v))
	})
}

// GoodNameHasSuffix applies the HasSuffix predicate on the "good_name" field.
func GoodNameHasSuffix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoodName), v))
	})
}

// GoodNameIsNil applies the IsNil predicate on the "good_name" field.
func GoodNameIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodName)))
	})
}

// GoodNameNotNil applies the NotNil predicate on the "good_name" field.
func GoodNameNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodName)))
	})
}

// GoodNameEqualFold applies the EqualFold predicate on the "good_name" field.
func GoodNameEqualFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoodName), v))
	})
}

// GoodNameContainsFold applies the ContainsFold predicate on the "good_name" field.
func GoodNameContainsFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoodName), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// DisplayIndexEQ applies the EQ predicate on the "display_index" field.
func DisplayIndexEQ(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexNEQ applies the NEQ predicate on the "display_index" field.
func DisplayIndexNEQ(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIn applies the In predicate on the "display_index" field.
func DisplayIndexIn(vs ...int32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexNotIn applies the NotIn predicate on the "display_index" field.
func DisplayIndexNotIn(vs ...int32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayIndex), v...))
	})
}

// DisplayIndexGT applies the GT predicate on the "display_index" field.
func DisplayIndexGT(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexGTE applies the GTE predicate on the "display_index" field.
func DisplayIndexGTE(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLT applies the LT predicate on the "display_index" field.
func DisplayIndexLT(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexLTE applies the LTE predicate on the "display_index" field.
func DisplayIndexLTE(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayIndex), v))
	})
}

// DisplayIndexIsNil applies the IsNil predicate on the "display_index" field.
func DisplayIndexIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayIndex)))
	})
}

// DisplayIndexNotNil applies the NotNil predicate on the "display_index" field.
func DisplayIndexNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayIndex)))
	})
}

// PurchaseLimitEQ applies the EQ predicate on the "purchase_limit" field.
func PurchaseLimitEQ(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitNEQ applies the NEQ predicate on the "purchase_limit" field.
func PurchaseLimitNEQ(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitIn applies the In predicate on the "purchase_limit" field.
func PurchaseLimitIn(vs ...int32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPurchaseLimit), v...))
	})
}

// PurchaseLimitNotIn applies the NotIn predicate on the "purchase_limit" field.
func PurchaseLimitNotIn(vs ...int32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPurchaseLimit), v...))
	})
}

// PurchaseLimitGT applies the GT predicate on the "purchase_limit" field.
func PurchaseLimitGT(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitGTE applies the GTE predicate on the "purchase_limit" field.
func PurchaseLimitGTE(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitLT applies the LT predicate on the "purchase_limit" field.
func PurchaseLimitLT(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitLTE applies the LTE predicate on the "purchase_limit" field.
func PurchaseLimitLTE(v int32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurchaseLimit), v))
	})
}

// PurchaseLimitIsNil applies the IsNil predicate on the "purchase_limit" field.
func PurchaseLimitIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPurchaseLimit)))
	})
}

// PurchaseLimitNotNil applies the NotNil predicate on the "purchase_limit" field.
func PurchaseLimitNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPurchaseLimit)))
	})
}

// SaleStartAtEQ applies the EQ predicate on the "sale_start_at" field.
func SaleStartAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtNEQ applies the NEQ predicate on the "sale_start_at" field.
func SaleStartAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtIn applies the In predicate on the "sale_start_at" field.
func SaleStartAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaleStartAt), v...))
	})
}

// SaleStartAtNotIn applies the NotIn predicate on the "sale_start_at" field.
func SaleStartAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaleStartAt), v...))
	})
}

// SaleStartAtGT applies the GT predicate on the "sale_start_at" field.
func SaleStartAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtGTE applies the GTE predicate on the "sale_start_at" field.
func SaleStartAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtLT applies the LT predicate on the "sale_start_at" field.
func SaleStartAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtLTE applies the LTE predicate on the "sale_start_at" field.
func SaleStartAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtIsNil applies the IsNil predicate on the "sale_start_at" field.
func SaleStartAtIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaleStartAt)))
	})
}

// SaleStartAtNotNil applies the NotNil predicate on the "sale_start_at" field.
func SaleStartAtNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaleStartAt)))
	})
}

// SaleEndAtEQ applies the EQ predicate on the "sale_end_at" field.
func SaleEndAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtNEQ applies the NEQ predicate on the "sale_end_at" field.
func SaleEndAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtIn applies the In predicate on the "sale_end_at" field.
func SaleEndAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaleEndAt), v...))
	})
}

// SaleEndAtNotIn applies the NotIn predicate on the "sale_end_at" field.
func SaleEndAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaleEndAt), v...))
	})
}

// SaleEndAtGT applies the GT predicate on the "sale_end_at" field.
func SaleEndAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtGTE applies the GTE predicate on the "sale_end_at" field.
func SaleEndAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtLT applies the LT predicate on the "sale_end_at" field.
func SaleEndAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtLTE applies the LTE predicate on the "sale_end_at" field.
func SaleEndAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtIsNil applies the IsNil predicate on the "sale_end_at" field.
func SaleEndAtIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaleEndAt)))
	})
}

// SaleEndAtNotNil applies the NotNil predicate on the "sale_end_at" field.
func SaleEndAtNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaleEndAt)))
	})
}

// ServiceStartAtEQ applies the EQ predicate on the "service_start_at" field.
func ServiceStartAtEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtNEQ applies the NEQ predicate on the "service_start_at" field.
func ServiceStartAtNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtIn applies the In predicate on the "service_start_at" field.
func ServiceStartAtIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServiceStartAt), v...))
	})
}

// ServiceStartAtNotIn applies the NotIn predicate on the "service_start_at" field.
func ServiceStartAtNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServiceStartAt), v...))
	})
}

// ServiceStartAtGT applies the GT predicate on the "service_start_at" field.
func ServiceStartAtGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtGTE applies the GTE predicate on the "service_start_at" field.
func ServiceStartAtGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtLT applies the LT predicate on the "service_start_at" field.
func ServiceStartAtLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtLTE applies the LTE predicate on the "service_start_at" field.
func ServiceStartAtLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtIsNil applies the IsNil predicate on the "service_start_at" field.
func ServiceStartAtIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldServiceStartAt)))
	})
}

// ServiceStartAtNotNil applies the NotNil predicate on the "service_start_at" field.
func ServiceStartAtNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldServiceStartAt)))
	})
}

// TechnicalFeeRatioEQ applies the EQ predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioNEQ applies the NEQ predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioNEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioIn applies the In predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTechnicalFeeRatio), v...))
	})
}

// TechnicalFeeRatioNotIn applies the NotIn predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioNotIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTechnicalFeeRatio), v...))
	})
}

// TechnicalFeeRatioGT applies the GT predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioGT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioGTE applies the GTE predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioGTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioLT applies the LT predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioLT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioLTE applies the LTE predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioLTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTechnicalFeeRatio), v))
	})
}

// TechnicalFeeRatioIsNil applies the IsNil predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTechnicalFeeRatio)))
	})
}

// TechnicalFeeRatioNotNil applies the NotNil predicate on the "technical_fee_ratio" field.
func TechnicalFeeRatioNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTechnicalFeeRatio)))
	})
}

// ElectricityFeeRatioEQ applies the EQ predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioNEQ applies the NEQ predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioNEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioIn applies the In predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElectricityFeeRatio), v...))
	})
}

// ElectricityFeeRatioNotIn applies the NotIn predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioNotIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElectricityFeeRatio), v...))
	})
}

// ElectricityFeeRatioGT applies the GT predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioGT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioGTE applies the GTE predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioGTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioLT applies the LT predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioLT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioLTE applies the LTE predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioLTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElectricityFeeRatio), v))
	})
}

// ElectricityFeeRatioIsNil applies the IsNil predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldElectricityFeeRatio)))
	})
}

// ElectricityFeeRatioNotNil applies the NotNil predicate on the "electricity_fee_ratio" field.
func ElectricityFeeRatioNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldElectricityFeeRatio)))
	})
}

// DescriptionsIsNil applies the IsNil predicate on the "descriptions" field.
func DescriptionsIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescriptions)))
	})
}

// DescriptionsNotNil applies the NotNil predicate on the "descriptions" field.
func DescriptionsNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescriptions)))
	})
}

// GoodBannerEQ applies the EQ predicate on the "good_banner" field.
func GoodBannerEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerNEQ applies the NEQ predicate on the "good_banner" field.
func GoodBannerNEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerIn applies the In predicate on the "good_banner" field.
func GoodBannerIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodBanner), v...))
	})
}

// GoodBannerNotIn applies the NotIn predicate on the "good_banner" field.
func GoodBannerNotIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodBanner), v...))
	})
}

// GoodBannerGT applies the GT predicate on the "good_banner" field.
func GoodBannerGT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerGTE applies the GTE predicate on the "good_banner" field.
func GoodBannerGTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerLT applies the LT predicate on the "good_banner" field.
func GoodBannerLT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerLTE applies the LTE predicate on the "good_banner" field.
func GoodBannerLTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerContains applies the Contains predicate on the "good_banner" field.
func GoodBannerContains(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerHasPrefix applies the HasPrefix predicate on the "good_banner" field.
func GoodBannerHasPrefix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerHasSuffix applies the HasSuffix predicate on the "good_banner" field.
func GoodBannerHasSuffix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerIsNil applies the IsNil predicate on the "good_banner" field.
func GoodBannerIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodBanner)))
	})
}

// GoodBannerNotNil applies the NotNil predicate on the "good_banner" field.
func GoodBannerNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodBanner)))
	})
}

// GoodBannerEqualFold applies the EqualFold predicate on the "good_banner" field.
func GoodBannerEqualFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoodBanner), v))
	})
}

// GoodBannerContainsFold applies the ContainsFold predicate on the "good_banner" field.
func GoodBannerContainsFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoodBanner), v))
	})
}

// DisplayNamesIsNil applies the IsNil predicate on the "display_names" field.
func DisplayNamesIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayNames)))
	})
}

// DisplayNamesNotNil applies the NotNil predicate on the "display_names" field.
func DisplayNamesNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayNames)))
	})
}

// EnablePurchaseEQ applies the EQ predicate on the "enable_purchase" field.
func EnablePurchaseEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnablePurchase), v))
	})
}

// EnablePurchaseNEQ applies the NEQ predicate on the "enable_purchase" field.
func EnablePurchaseNEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnablePurchase), v))
	})
}

// EnablePurchaseIsNil applies the IsNil predicate on the "enable_purchase" field.
func EnablePurchaseIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnablePurchase)))
	})
}

// EnablePurchaseNotNil applies the NotNil predicate on the "enable_purchase" field.
func EnablePurchaseNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnablePurchase)))
	})
}

// EnableProductPageEQ applies the EQ predicate on the "enable_product_page" field.
func EnableProductPageEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableProductPage), v))
	})
}

// EnableProductPageNEQ applies the NEQ predicate on the "enable_product_page" field.
func EnableProductPageNEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableProductPage), v))
	})
}

// EnableProductPageIsNil applies the IsNil predicate on the "enable_product_page" field.
func EnableProductPageIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableProductPage)))
	})
}

// EnableProductPageNotNil applies the NotNil predicate on the "enable_product_page" field.
func EnableProductPageNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableProductPage)))
	})
}

// CancelModeEQ applies the EQ predicate on the "cancel_mode" field.
func CancelModeEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelMode), v))
	})
}

// CancelModeNEQ applies the NEQ predicate on the "cancel_mode" field.
func CancelModeNEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelMode), v))
	})
}

// CancelModeIn applies the In predicate on the "cancel_mode" field.
func CancelModeIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelMode), v...))
	})
}

// CancelModeNotIn applies the NotIn predicate on the "cancel_mode" field.
func CancelModeNotIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelMode), v...))
	})
}

// CancelModeGT applies the GT predicate on the "cancel_mode" field.
func CancelModeGT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelMode), v))
	})
}

// CancelModeGTE applies the GTE predicate on the "cancel_mode" field.
func CancelModeGTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelMode), v))
	})
}

// CancelModeLT applies the LT predicate on the "cancel_mode" field.
func CancelModeLT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelMode), v))
	})
}

// CancelModeLTE applies the LTE predicate on the "cancel_mode" field.
func CancelModeLTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelMode), v))
	})
}

// CancelModeContains applies the Contains predicate on the "cancel_mode" field.
func CancelModeContains(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelMode), v))
	})
}

// CancelModeHasPrefix applies the HasPrefix predicate on the "cancel_mode" field.
func CancelModeHasPrefix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelMode), v))
	})
}

// CancelModeHasSuffix applies the HasSuffix predicate on the "cancel_mode" field.
func CancelModeHasSuffix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelMode), v))
	})
}

// CancelModeIsNil applies the IsNil predicate on the "cancel_mode" field.
func CancelModeIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelMode)))
	})
}

// CancelModeNotNil applies the NotNil predicate on the "cancel_mode" field.
func CancelModeNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelMode)))
	})
}

// CancelModeEqualFold applies the EqualFold predicate on the "cancel_mode" field.
func CancelModeEqualFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelMode), v))
	})
}

// CancelModeContainsFold applies the ContainsFold predicate on the "cancel_mode" field.
func CancelModeContainsFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelMode), v))
	})
}

// UserPurchaseLimitEQ applies the EQ predicate on the "user_purchase_limit" field.
func UserPurchaseLimitEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitNEQ applies the NEQ predicate on the "user_purchase_limit" field.
func UserPurchaseLimitNEQ(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitIn applies the In predicate on the "user_purchase_limit" field.
func UserPurchaseLimitIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserPurchaseLimit), v...))
	})
}

// UserPurchaseLimitNotIn applies the NotIn predicate on the "user_purchase_limit" field.
func UserPurchaseLimitNotIn(vs ...decimal.Decimal) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserPurchaseLimit), v...))
	})
}

// UserPurchaseLimitGT applies the GT predicate on the "user_purchase_limit" field.
func UserPurchaseLimitGT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitGTE applies the GTE predicate on the "user_purchase_limit" field.
func UserPurchaseLimitGTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitLT applies the LT predicate on the "user_purchase_limit" field.
func UserPurchaseLimitLT(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitLTE applies the LTE predicate on the "user_purchase_limit" field.
func UserPurchaseLimitLTE(v decimal.Decimal) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserPurchaseLimit), v))
	})
}

// UserPurchaseLimitIsNil applies the IsNil predicate on the "user_purchase_limit" field.
func UserPurchaseLimitIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserPurchaseLimit)))
	})
}

// UserPurchaseLimitNotNil applies the NotNil predicate on the "user_purchase_limit" field.
func UserPurchaseLimitNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserPurchaseLimit)))
	})
}

// DisplayColorsIsNil applies the IsNil predicate on the "display_colors" field.
func DisplayColorsIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayColors)))
	})
}

// DisplayColorsNotNil applies the NotNil predicate on the "display_colors" field.
func DisplayColorsNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayColors)))
	})
}

// CancellableBeforeStartEQ applies the EQ predicate on the "cancellable_before_start" field.
func CancellableBeforeStartEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartNEQ applies the NEQ predicate on the "cancellable_before_start" field.
func CancellableBeforeStartNEQ(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartIn applies the In predicate on the "cancellable_before_start" field.
func CancellableBeforeStartIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancellableBeforeStart), v...))
	})
}

// CancellableBeforeStartNotIn applies the NotIn predicate on the "cancellable_before_start" field.
func CancellableBeforeStartNotIn(vs ...uint32) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancellableBeforeStart), v...))
	})
}

// CancellableBeforeStartGT applies the GT predicate on the "cancellable_before_start" field.
func CancellableBeforeStartGT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartGTE applies the GTE predicate on the "cancellable_before_start" field.
func CancellableBeforeStartGTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartLT applies the LT predicate on the "cancellable_before_start" field.
func CancellableBeforeStartLT(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartLTE applies the LTE predicate on the "cancellable_before_start" field.
func CancellableBeforeStartLTE(v uint32) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancellableBeforeStart), v))
	})
}

// CancellableBeforeStartIsNil applies the IsNil predicate on the "cancellable_before_start" field.
func CancellableBeforeStartIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancellableBeforeStart)))
	})
}

// CancellableBeforeStartNotNil applies the NotNil predicate on the "cancellable_before_start" field.
func CancellableBeforeStartNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancellableBeforeStart)))
	})
}

// ProductPageEQ applies the EQ predicate on the "product_page" field.
func ProductPageEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPage), v))
	})
}

// ProductPageNEQ applies the NEQ predicate on the "product_page" field.
func ProductPageNEQ(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPage), v))
	})
}

// ProductPageIn applies the In predicate on the "product_page" field.
func ProductPageIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductPage), v...))
	})
}

// ProductPageNotIn applies the NotIn predicate on the "product_page" field.
func ProductPageNotIn(vs ...string) predicate.AppGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductPage), v...))
	})
}

// ProductPageGT applies the GT predicate on the "product_page" field.
func ProductPageGT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPage), v))
	})
}

// ProductPageGTE applies the GTE predicate on the "product_page" field.
func ProductPageGTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPage), v))
	})
}

// ProductPageLT applies the LT predicate on the "product_page" field.
func ProductPageLT(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPage), v))
	})
}

// ProductPageLTE applies the LTE predicate on the "product_page" field.
func ProductPageLTE(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPage), v))
	})
}

// ProductPageContains applies the Contains predicate on the "product_page" field.
func ProductPageContains(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductPage), v))
	})
}

// ProductPageHasPrefix applies the HasPrefix predicate on the "product_page" field.
func ProductPageHasPrefix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductPage), v))
	})
}

// ProductPageHasSuffix applies the HasSuffix predicate on the "product_page" field.
func ProductPageHasSuffix(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductPage), v))
	})
}

// ProductPageIsNil applies the IsNil predicate on the "product_page" field.
func ProductPageIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPage)))
	})
}

// ProductPageNotNil applies the NotNil predicate on the "product_page" field.
func ProductPageNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPage)))
	})
}

// ProductPageEqualFold applies the EqualFold predicate on the "product_page" field.
func ProductPageEqualFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductPage), v))
	})
}

// ProductPageContainsFold applies the ContainsFold predicate on the "product_page" field.
func ProductPageContainsFold(v string) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductPage), v))
	})
}

// EnableSetCommissionEQ applies the EQ predicate on the "enable_set_commission" field.
func EnableSetCommissionEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableSetCommission), v))
	})
}

// EnableSetCommissionNEQ applies the NEQ predicate on the "enable_set_commission" field.
func EnableSetCommissionNEQ(v bool) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableSetCommission), v))
	})
}

// EnableSetCommissionIsNil applies the IsNil predicate on the "enable_set_commission" field.
func EnableSetCommissionIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableSetCommission)))
	})
}

// EnableSetCommissionNotNil applies the NotNil predicate on the "enable_set_commission" field.
func EnableSetCommissionNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableSetCommission)))
	})
}

// PostersIsNil applies the IsNil predicate on the "posters" field.
func PostersIsNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPosters)))
	})
}

// PostersNotNil applies the NotNil predicate on the "posters" field.
func PostersNotNil() predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPosters)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppGood) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppGood) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppGood) predicate.AppGood {
	return predicate.AppGood(func(s *sql.Selector) {
		p(s.Not())
	})
}
