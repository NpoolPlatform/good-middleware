// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appdefaultgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/comment"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/extrainfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/promotion"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/recommend"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/subgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorlocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 11)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appdefaultgood.Table,
			Columns: appdefaultgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appdefaultgood.FieldID,
			},
		},
		Type: "AppDefaultGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appdefaultgood.FieldCreatedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldCreatedAt},
			appdefaultgood.FieldUpdatedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldUpdatedAt},
			appdefaultgood.FieldDeletedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldDeletedAt},
			appdefaultgood.FieldAppID:      {Type: field.TypeUUID, Column: appdefaultgood.FieldAppID},
			appdefaultgood.FieldGoodID:     {Type: field.TypeUUID, Column: appdefaultgood.FieldGoodID},
			appdefaultgood.FieldCoinTypeID: {Type: field.TypeUUID, Column: appdefaultgood.FieldCoinTypeID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgood.FieldID,
			},
		},
		Type: "AppGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgood.FieldCreatedAt:              {Type: field.TypeUint32, Column: appgood.FieldCreatedAt},
			appgood.FieldUpdatedAt:              {Type: field.TypeUint32, Column: appgood.FieldUpdatedAt},
			appgood.FieldDeletedAt:              {Type: field.TypeUint32, Column: appgood.FieldDeletedAt},
			appgood.FieldAppID:                  {Type: field.TypeUUID, Column: appgood.FieldAppID},
			appgood.FieldGoodID:                 {Type: field.TypeUUID, Column: appgood.FieldGoodID},
			appgood.FieldOnline:                 {Type: field.TypeBool, Column: appgood.FieldOnline},
			appgood.FieldVisible:                {Type: field.TypeBool, Column: appgood.FieldVisible},
			appgood.FieldGoodName:               {Type: field.TypeString, Column: appgood.FieldGoodName},
			appgood.FieldPrice:                  {Type: field.TypeOther, Column: appgood.FieldPrice},
			appgood.FieldDisplayIndex:           {Type: field.TypeInt32, Column: appgood.FieldDisplayIndex},
			appgood.FieldPurchaseLimit:          {Type: field.TypeInt32, Column: appgood.FieldPurchaseLimit},
			appgood.FieldCommissionPercent:      {Type: field.TypeInt32, Column: appgood.FieldCommissionPercent},
			appgood.FieldSaleStartAt:            {Type: field.TypeUint32, Column: appgood.FieldSaleStartAt},
			appgood.FieldSaleEndAt:              {Type: field.TypeUint32, Column: appgood.FieldSaleEndAt},
			appgood.FieldServiceStartAt:         {Type: field.TypeUint32, Column: appgood.FieldServiceStartAt},
			appgood.FieldTechnicalFeeRatio:      {Type: field.TypeUint32, Column: appgood.FieldTechnicalFeeRatio},
			appgood.FieldElectricityFeeRatio:    {Type: field.TypeUint32, Column: appgood.FieldElectricityFeeRatio},
			appgood.FieldDailyRewardAmount:      {Type: field.TypeOther, Column: appgood.FieldDailyRewardAmount},
			appgood.FieldCommissionSettleType:   {Type: field.TypeString, Column: appgood.FieldCommissionSettleType},
			appgood.FieldDescriptions:           {Type: field.TypeJSON, Column: appgood.FieldDescriptions},
			appgood.FieldGoodBanner:             {Type: field.TypeString, Column: appgood.FieldGoodBanner},
			appgood.FieldDisplayNames:           {Type: field.TypeJSON, Column: appgood.FieldDisplayNames},
			appgood.FieldEnablePurchase:         {Type: field.TypeBool, Column: appgood.FieldEnablePurchase},
			appgood.FieldEnableProductPage:      {Type: field.TypeBool, Column: appgood.FieldEnableProductPage},
			appgood.FieldCancelMode:             {Type: field.TypeString, Column: appgood.FieldCancelMode},
			appgood.FieldUserPurchaseLimit:      {Type: field.TypeOther, Column: appgood.FieldUserPurchaseLimit},
			appgood.FieldDisplayColors:          {Type: field.TypeJSON, Column: appgood.FieldDisplayColors},
			appgood.FieldCancellableBeforeStart: {Type: field.TypeUint32, Column: appgood.FieldCancellableBeforeStart},
			appgood.FieldProductPage:            {Type: field.TypeString, Column: appgood.FieldProductPage},
			appgood.FieldEnableSetCommission:    {Type: field.TypeBool, Column: appgood.FieldEnableSetCommission},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: comment.FieldID,
			},
		},
		Type: "Comment",
		Fields: map[string]*sqlgraph.FieldSpec{
			comment.FieldCreatedAt: {Type: field.TypeUint32, Column: comment.FieldCreatedAt},
			comment.FieldUpdatedAt: {Type: field.TypeUint32, Column: comment.FieldUpdatedAt},
			comment.FieldDeletedAt: {Type: field.TypeUint32, Column: comment.FieldDeletedAt},
			comment.FieldAppID:     {Type: field.TypeUUID, Column: comment.FieldAppID},
			comment.FieldUserID:    {Type: field.TypeUUID, Column: comment.FieldUserID},
			comment.FieldGoodID:    {Type: field.TypeUUID, Column: comment.FieldGoodID},
			comment.FieldOrderID:   {Type: field.TypeUUID, Column: comment.FieldOrderID},
			comment.FieldContent:   {Type: field.TypeString, Column: comment.FieldContent},
			comment.FieldReplyToID: {Type: field.TypeUUID, Column: comment.FieldReplyToID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceinfo.Table,
			Columns: deviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		},
		Type: "DeviceInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceinfo.FieldCreatedAt:       {Type: field.TypeUint32, Column: deviceinfo.FieldCreatedAt},
			deviceinfo.FieldUpdatedAt:       {Type: field.TypeUint32, Column: deviceinfo.FieldUpdatedAt},
			deviceinfo.FieldDeletedAt:       {Type: field.TypeUint32, Column: deviceinfo.FieldDeletedAt},
			deviceinfo.FieldType:            {Type: field.TypeString, Column: deviceinfo.FieldType},
			deviceinfo.FieldManufacturer:    {Type: field.TypeString, Column: deviceinfo.FieldManufacturer},
			deviceinfo.FieldPowerComsuption: {Type: field.TypeUint32, Column: deviceinfo.FieldPowerComsuption},
			deviceinfo.FieldShipmentAt:      {Type: field.TypeUint32, Column: deviceinfo.FieldShipmentAt},
			deviceinfo.FieldPosters:         {Type: field.TypeJSON, Column: deviceinfo.FieldPosters},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   extrainfo.Table,
			Columns: extrainfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: extrainfo.FieldID,
			},
		},
		Type: "ExtraInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			extrainfo.FieldCreatedAt: {Type: field.TypeUint32, Column: extrainfo.FieldCreatedAt},
			extrainfo.FieldUpdatedAt: {Type: field.TypeUint32, Column: extrainfo.FieldUpdatedAt},
			extrainfo.FieldDeletedAt: {Type: field.TypeUint32, Column: extrainfo.FieldDeletedAt},
			extrainfo.FieldGoodID:    {Type: field.TypeUUID, Column: extrainfo.FieldGoodID},
			extrainfo.FieldPosters:   {Type: field.TypeJSON, Column: extrainfo.FieldPosters},
			extrainfo.FieldLabels:    {Type: field.TypeJSON, Column: extrainfo.FieldLabels},
			extrainfo.FieldVoteCount: {Type: field.TypeUint32, Column: extrainfo.FieldVoteCount},
			extrainfo.FieldRating:    {Type: field.TypeFloat32, Column: extrainfo.FieldRating},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   good.Table,
			Columns: good.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: good.FieldID,
			},
		},
		Type: "Good",
		Fields: map[string]*sqlgraph.FieldSpec{
			good.FieldCreatedAt:              {Type: field.TypeUint32, Column: good.FieldCreatedAt},
			good.FieldUpdatedAt:              {Type: field.TypeUint32, Column: good.FieldUpdatedAt},
			good.FieldDeletedAt:              {Type: field.TypeUint32, Column: good.FieldDeletedAt},
			good.FieldDeviceInfoID:           {Type: field.TypeUUID, Column: good.FieldDeviceInfoID},
			good.FieldDurationDays:           {Type: field.TypeInt32, Column: good.FieldDurationDays},
			good.FieldCoinTypeID:             {Type: field.TypeUUID, Column: good.FieldCoinTypeID},
			good.FieldInheritFromGoodID:      {Type: field.TypeUUID, Column: good.FieldInheritFromGoodID},
			good.FieldVendorLocationID:       {Type: field.TypeUUID, Column: good.FieldVendorLocationID},
			good.FieldPrice:                  {Type: field.TypeOther, Column: good.FieldPrice},
			good.FieldBenefitType:            {Type: field.TypeString, Column: good.FieldBenefitType},
			good.FieldGoodType:               {Type: field.TypeString, Column: good.FieldGoodType},
			good.FieldTitle:                  {Type: field.TypeString, Column: good.FieldTitle},
			good.FieldUnit:                   {Type: field.TypeString, Column: good.FieldUnit},
			good.FieldUnitAmount:             {Type: field.TypeInt32, Column: good.FieldUnitAmount},
			good.FieldSupportCoinTypeIds:     {Type: field.TypeJSON, Column: good.FieldSupportCoinTypeIds},
			good.FieldDeliveryAt:             {Type: field.TypeUint32, Column: good.FieldDeliveryAt},
			good.FieldStartAt:                {Type: field.TypeUint32, Column: good.FieldStartAt},
			good.FieldTestOnly:               {Type: field.TypeBool, Column: good.FieldTestOnly},
			good.FieldBenefitIntervalHours:   {Type: field.TypeUint32, Column: good.FieldBenefitIntervalHours},
			good.FieldBenefitState:           {Type: field.TypeString, Column: good.FieldBenefitState},
			good.FieldLastBenefitAt:          {Type: field.TypeUint32, Column: good.FieldLastBenefitAt},
			good.FieldBenefitTids:            {Type: field.TypeJSON, Column: good.FieldBenefitTids},
			good.FieldNextBenefitStartAmount: {Type: field.TypeOther, Column: good.FieldNextBenefitStartAmount},
			good.FieldLastBenefitAmount:      {Type: field.TypeOther, Column: good.FieldLastBenefitAmount},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotion.Table,
			Columns: promotion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: promotion.FieldID,
			},
		},
		Type: "Promotion",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotion.FieldCreatedAt: {Type: field.TypeUint32, Column: promotion.FieldCreatedAt},
			promotion.FieldUpdatedAt: {Type: field.TypeUint32, Column: promotion.FieldUpdatedAt},
			promotion.FieldDeletedAt: {Type: field.TypeUint32, Column: promotion.FieldDeletedAt},
			promotion.FieldAppID:     {Type: field.TypeUUID, Column: promotion.FieldAppID},
			promotion.FieldGoodID:    {Type: field.TypeUUID, Column: promotion.FieldGoodID},
			promotion.FieldMessage:   {Type: field.TypeString, Column: promotion.FieldMessage},
			promotion.FieldStartAt:   {Type: field.TypeUint32, Column: promotion.FieldStartAt},
			promotion.FieldEndAt:     {Type: field.TypeUint32, Column: promotion.FieldEndAt},
			promotion.FieldPrice:     {Type: field.TypeOther, Column: promotion.FieldPrice},
			promotion.FieldPosters:   {Type: field.TypeJSON, Column: promotion.FieldPosters},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   recommend.Table,
			Columns: recommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: recommend.FieldID,
			},
		},
		Type: "Recommend",
		Fields: map[string]*sqlgraph.FieldSpec{
			recommend.FieldCreatedAt:      {Type: field.TypeUint32, Column: recommend.FieldCreatedAt},
			recommend.FieldUpdatedAt:      {Type: field.TypeUint32, Column: recommend.FieldUpdatedAt},
			recommend.FieldDeletedAt:      {Type: field.TypeUint32, Column: recommend.FieldDeletedAt},
			recommend.FieldAppID:          {Type: field.TypeUUID, Column: recommend.FieldAppID},
			recommend.FieldGoodID:         {Type: field.TypeUUID, Column: recommend.FieldGoodID},
			recommend.FieldRecommenderID:  {Type: field.TypeUUID, Column: recommend.FieldRecommenderID},
			recommend.FieldMessage:        {Type: field.TypeString, Column: recommend.FieldMessage},
			recommend.FieldRecommendIndex: {Type: field.TypeFloat64, Column: recommend.FieldRecommendIndex},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldCreatedAt: {Type: field.TypeUint32, Column: stock.FieldCreatedAt},
			stock.FieldUpdatedAt: {Type: field.TypeUint32, Column: stock.FieldUpdatedAt},
			stock.FieldDeletedAt: {Type: field.TypeUint32, Column: stock.FieldDeletedAt},
			stock.FieldGoodID:    {Type: field.TypeUUID, Column: stock.FieldGoodID},
			stock.FieldTotal:     {Type: field.TypeOther, Column: stock.FieldTotal},
			stock.FieldLocked:    {Type: field.TypeOther, Column: stock.FieldLocked},
			stock.FieldInService: {Type: field.TypeOther, Column: stock.FieldInService},
			stock.FieldWaitStart: {Type: field.TypeOther, Column: stock.FieldWaitStart},
			stock.FieldSold:      {Type: field.TypeOther, Column: stock.FieldSold},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subgood.Table,
			Columns: subgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subgood.FieldID,
			},
		},
		Type: "SubGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			subgood.FieldCreatedAt:  {Type: field.TypeUint32, Column: subgood.FieldCreatedAt},
			subgood.FieldUpdatedAt:  {Type: field.TypeUint32, Column: subgood.FieldUpdatedAt},
			subgood.FieldDeletedAt:  {Type: field.TypeUint32, Column: subgood.FieldDeletedAt},
			subgood.FieldAppID:      {Type: field.TypeUUID, Column: subgood.FieldAppID},
			subgood.FieldMainGoodID: {Type: field.TypeUUID, Column: subgood.FieldMainGoodID},
			subgood.FieldSubGoodID:  {Type: field.TypeUUID, Column: subgood.FieldSubGoodID},
			subgood.FieldMust:       {Type: field.TypeBool, Column: subgood.FieldMust},
			subgood.FieldCommission: {Type: field.TypeBool, Column: subgood.FieldCommission},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vendorlocation.Table,
			Columns: vendorlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vendorlocation.FieldID,
			},
		},
		Type: "VendorLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			vendorlocation.FieldCreatedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldCreatedAt},
			vendorlocation.FieldUpdatedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldUpdatedAt},
			vendorlocation.FieldDeletedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldDeletedAt},
			vendorlocation.FieldCountry:   {Type: field.TypeString, Column: vendorlocation.FieldCountry},
			vendorlocation.FieldProvince:  {Type: field.TypeString, Column: vendorlocation.FieldProvince},
			vendorlocation.FieldCity:      {Type: field.TypeString, Column: vendorlocation.FieldCity},
			vendorlocation.FieldAddress:   {Type: field.TypeString, Column: vendorlocation.FieldAddress},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (adgq *AppDefaultGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	adgq.predicates = append(adgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppDefaultGoodQuery builder.
func (adgq *AppDefaultGoodQuery) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: adgq.config, predicateAdder: adgq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppDefaultGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppDefaultGoodMutation builder.
func (m *AppDefaultGoodMutation) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: m.config, predicateAdder: m}
}

// AppDefaultGoodFilter provides a generic filtering capability at runtime for AppDefaultGoodQuery.
type AppDefaultGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppDefaultGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppDefaultGoodFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppDefaultGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppDefaultGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppDefaultGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppDefaultGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppDefaultGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AppDefaultGoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldCoinTypeID))
}

// addPredicate implements the predicateAdder interface.
func (agq *AppGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	agq.predicates = append(agq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodQuery builder.
func (agq *AppGoodQuery) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: agq.config, predicateAdder: agq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodMutation builder.
func (m *AppGoodMutation) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: m.config, predicateAdder: m}
}

// AppGoodFilter provides a generic filtering capability at runtime for AppGoodQuery.
type AppGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppGoodFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldGoodID))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *AppGoodFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldOnline))
}

// WhereVisible applies the entql bool predicate on the visible field.
func (f *AppGoodFilter) WhereVisible(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldVisible))
}

// WhereGoodName applies the entql string predicate on the good_name field.
func (f *AppGoodFilter) WhereGoodName(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodName))
}

// WherePrice applies the entql other predicate on the price field.
func (f *AppGoodFilter) WherePrice(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldPrice))
}

// WhereDisplayIndex applies the entql int32 predicate on the display_index field.
func (f *AppGoodFilter) WhereDisplayIndex(p entql.Int32P) {
	f.Where(p.Field(appgood.FieldDisplayIndex))
}

// WherePurchaseLimit applies the entql int32 predicate on the purchase_limit field.
func (f *AppGoodFilter) WherePurchaseLimit(p entql.Int32P) {
	f.Where(p.Field(appgood.FieldPurchaseLimit))
}

// WhereCommissionPercent applies the entql int32 predicate on the commission_percent field.
func (f *AppGoodFilter) WhereCommissionPercent(p entql.Int32P) {
	f.Where(p.Field(appgood.FieldCommissionPercent))
}

// WhereSaleStartAt applies the entql uint32 predicate on the sale_start_at field.
func (f *AppGoodFilter) WhereSaleStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleStartAt))
}

// WhereSaleEndAt applies the entql uint32 predicate on the sale_end_at field.
func (f *AppGoodFilter) WhereSaleEndAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleEndAt))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *AppGoodFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldServiceStartAt))
}

// WhereTechnicalFeeRatio applies the entql uint32 predicate on the technical_fee_ratio field.
func (f *AppGoodFilter) WhereTechnicalFeeRatio(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldTechnicalFeeRatio))
}

// WhereElectricityFeeRatio applies the entql uint32 predicate on the electricity_fee_ratio field.
func (f *AppGoodFilter) WhereElectricityFeeRatio(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldElectricityFeeRatio))
}

// WhereDailyRewardAmount applies the entql other predicate on the daily_reward_amount field.
func (f *AppGoodFilter) WhereDailyRewardAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldDailyRewardAmount))
}

// WhereCommissionSettleType applies the entql string predicate on the commission_settle_type field.
func (f *AppGoodFilter) WhereCommissionSettleType(p entql.StringP) {
	f.Where(p.Field(appgood.FieldCommissionSettleType))
}

// WhereDescriptions applies the entql json.RawMessage predicate on the descriptions field.
func (f *AppGoodFilter) WhereDescriptions(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDescriptions))
}

// WhereGoodBanner applies the entql string predicate on the good_banner field.
func (f *AppGoodFilter) WhereGoodBanner(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodBanner))
}

// WhereDisplayNames applies the entql json.RawMessage predicate on the display_names field.
func (f *AppGoodFilter) WhereDisplayNames(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayNames))
}

// WhereEnablePurchase applies the entql bool predicate on the enable_purchase field.
func (f *AppGoodFilter) WhereEnablePurchase(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnablePurchase))
}

// WhereEnableProductPage applies the entql bool predicate on the enable_product_page field.
func (f *AppGoodFilter) WhereEnableProductPage(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableProductPage))
}

// WhereCancelMode applies the entql string predicate on the cancel_mode field.
func (f *AppGoodFilter) WhereCancelMode(p entql.StringP) {
	f.Where(p.Field(appgood.FieldCancelMode))
}

// WhereUserPurchaseLimit applies the entql other predicate on the user_purchase_limit field.
func (f *AppGoodFilter) WhereUserPurchaseLimit(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldUserPurchaseLimit))
}

// WhereDisplayColors applies the entql json.RawMessage predicate on the display_colors field.
func (f *AppGoodFilter) WhereDisplayColors(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayColors))
}

// WhereCancellableBeforeStart applies the entql uint32 predicate on the cancellable_before_start field.
func (f *AppGoodFilter) WhereCancellableBeforeStart(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldCancellableBeforeStart))
}

// WhereProductPage applies the entql string predicate on the product_page field.
func (f *AppGoodFilter) WhereProductPage(p entql.StringP) {
	f.Where(p.Field(appgood.FieldProductPage))
}

// WhereEnableSetCommission applies the entql bool predicate on the enable_set_commission field.
func (f *AppGoodFilter) WhereEnableSetCommission(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableSetCommission))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommentQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentQuery builder.
func (cq *CommentQuery) Filter() *CommentFilter {
	return &CommentFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentMutation builder.
func (m *CommentMutation) Filter() *CommentFilter {
	return &CommentFilter{config: m.config, predicateAdder: m}
}

// CommentFilter provides a generic filtering capability at runtime for CommentQuery.
type CommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CommentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CommentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CommentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CommentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CommentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CommentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CommentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldOrderID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *CommentFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(comment.FieldContent))
}

// WhereReplyToID applies the entql [16]byte predicate on the reply_to_id field.
func (f *CommentFilter) WhereReplyToID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldReplyToID))
}

// addPredicate implements the predicateAdder interface.
func (diq *DeviceInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	diq.predicates = append(diq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceInfoQuery builder.
func (diq *DeviceInfoQuery) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: diq.config, predicateAdder: diq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceInfoMutation builder.
func (m *DeviceInfoMutation) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: m.config, predicateAdder: m}
}

// DeviceInfoFilter provides a generic filtering capability at runtime for DeviceInfoQuery.
type DeviceInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DeviceInfoFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(deviceinfo.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DeviceInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DeviceInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DeviceInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldDeletedAt))
}

// WhereType applies the entql string predicate on the type field.
func (f *DeviceInfoFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(deviceinfo.FieldType))
}

// WhereManufacturer applies the entql string predicate on the manufacturer field.
func (f *DeviceInfoFilter) WhereManufacturer(p entql.StringP) {
	f.Where(p.Field(deviceinfo.FieldManufacturer))
}

// WherePowerComsuption applies the entql uint32 predicate on the power_comsuption field.
func (f *DeviceInfoFilter) WherePowerComsuption(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldPowerComsuption))
}

// WhereShipmentAt applies the entql uint32 predicate on the shipment_at field.
func (f *DeviceInfoFilter) WhereShipmentAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldShipmentAt))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *DeviceInfoFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(deviceinfo.FieldPosters))
}

// addPredicate implements the predicateAdder interface.
func (eiq *ExtraInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	eiq.predicates = append(eiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExtraInfoQuery builder.
func (eiq *ExtraInfoQuery) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: eiq.config, predicateAdder: eiq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExtraInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExtraInfoMutation builder.
func (m *ExtraInfoMutation) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: m.config, predicateAdder: m}
}

// ExtraInfoFilter provides a generic filtering capability at runtime for ExtraInfoQuery.
type ExtraInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExtraInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ExtraInfoFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ExtraInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ExtraInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ExtraInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ExtraInfoFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldGoodID))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *ExtraInfoFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(extrainfo.FieldPosters))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *ExtraInfoFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(extrainfo.FieldLabels))
}

// WhereVoteCount applies the entql uint32 predicate on the vote_count field.
func (f *ExtraInfoFilter) WhereVoteCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldVoteCount))
}

// WhereRating applies the entql float32 predicate on the rating field.
func (f *ExtraInfoFilter) WhereRating(p entql.Float32P) {
	f.Where(p.Field(extrainfo.FieldRating))
}

// addPredicate implements the predicateAdder interface.
func (gq *GoodQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodQuery builder.
func (gq *GoodQuery) Filter() *GoodFilter {
	return &GoodFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodMutation builder.
func (m *GoodMutation) Filter() *GoodFilter {
	return &GoodFilter{config: m.config, predicateAdder: m}
}

// GoodFilter provides a generic filtering capability at runtime for GoodQuery.
type GoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(good.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldDeletedAt))
}

// WhereDeviceInfoID applies the entql [16]byte predicate on the device_info_id field.
func (f *GoodFilter) WhereDeviceInfoID(p entql.ValueP) {
	f.Where(p.Field(good.FieldDeviceInfoID))
}

// WhereDurationDays applies the entql int32 predicate on the duration_days field.
func (f *GoodFilter) WhereDurationDays(p entql.Int32P) {
	f.Where(p.Field(good.FieldDurationDays))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(good.FieldCoinTypeID))
}

// WhereInheritFromGoodID applies the entql [16]byte predicate on the inherit_from_good_id field.
func (f *GoodFilter) WhereInheritFromGoodID(p entql.ValueP) {
	f.Where(p.Field(good.FieldInheritFromGoodID))
}

// WhereVendorLocationID applies the entql [16]byte predicate on the vendor_location_id field.
func (f *GoodFilter) WhereVendorLocationID(p entql.ValueP) {
	f.Where(p.Field(good.FieldVendorLocationID))
}

// WherePrice applies the entql other predicate on the price field.
func (f *GoodFilter) WherePrice(p entql.OtherP) {
	f.Where(p.Field(good.FieldPrice))
}

// WhereBenefitType applies the entql string predicate on the benefit_type field.
func (f *GoodFilter) WhereBenefitType(p entql.StringP) {
	f.Where(p.Field(good.FieldBenefitType))
}

// WhereGoodType applies the entql string predicate on the good_type field.
func (f *GoodFilter) WhereGoodType(p entql.StringP) {
	f.Where(p.Field(good.FieldGoodType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *GoodFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(good.FieldTitle))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *GoodFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(good.FieldUnit))
}

// WhereUnitAmount applies the entql int32 predicate on the unit_amount field.
func (f *GoodFilter) WhereUnitAmount(p entql.Int32P) {
	f.Where(p.Field(good.FieldUnitAmount))
}

// WhereSupportCoinTypeIds applies the entql json.RawMessage predicate on the support_coin_type_ids field.
func (f *GoodFilter) WhereSupportCoinTypeIds(p entql.BytesP) {
	f.Where(p.Field(good.FieldSupportCoinTypeIds))
}

// WhereDeliveryAt applies the entql uint32 predicate on the delivery_at field.
func (f *GoodFilter) WhereDeliveryAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldDeliveryAt))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldStartAt))
}

// WhereTestOnly applies the entql bool predicate on the test_only field.
func (f *GoodFilter) WhereTestOnly(p entql.BoolP) {
	f.Where(p.Field(good.FieldTestOnly))
}

// WhereBenefitIntervalHours applies the entql uint32 predicate on the benefit_interval_hours field.
func (f *GoodFilter) WhereBenefitIntervalHours(p entql.Uint32P) {
	f.Where(p.Field(good.FieldBenefitIntervalHours))
}

// WhereBenefitState applies the entql string predicate on the benefit_state field.
func (f *GoodFilter) WhereBenefitState(p entql.StringP) {
	f.Where(p.Field(good.FieldBenefitState))
}

// WhereLastBenefitAt applies the entql uint32 predicate on the last_benefit_at field.
func (f *GoodFilter) WhereLastBenefitAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldLastBenefitAt))
}

// WhereBenefitTids applies the entql json.RawMessage predicate on the benefit_tids field.
func (f *GoodFilter) WhereBenefitTids(p entql.BytesP) {
	f.Where(p.Field(good.FieldBenefitTids))
}

// WhereNextBenefitStartAmount applies the entql other predicate on the next_benefit_start_amount field.
func (f *GoodFilter) WhereNextBenefitStartAmount(p entql.OtherP) {
	f.Where(p.Field(good.FieldNextBenefitStartAmount))
}

// WhereLastBenefitAmount applies the entql other predicate on the last_benefit_amount field.
func (f *GoodFilter) WhereLastBenefitAmount(p entql.OtherP) {
	f.Where(p.Field(good.FieldLastBenefitAmount))
}

// addPredicate implements the predicateAdder interface.
func (pq *PromotionQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionQuery builder.
func (pq *PromotionQuery) Filter() *PromotionFilter {
	return &PromotionFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionMutation builder.
func (m *PromotionMutation) Filter() *PromotionFilter {
	return &PromotionFilter{config: m.config, predicateAdder: m}
}

// PromotionFilter provides a generic filtering capability at runtime for PromotionQuery.
type PromotionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PromotionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(promotion.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PromotionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(promotion.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PromotionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(promotion.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PromotionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(promotion.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *PromotionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(promotion.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *PromotionFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(promotion.FieldGoodID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *PromotionFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(promotion.FieldMessage))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *PromotionFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(promotion.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *PromotionFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(promotion.FieldEndAt))
}

// WherePrice applies the entql other predicate on the price field.
func (f *PromotionFilter) WherePrice(p entql.OtherP) {
	f.Where(p.Field(promotion.FieldPrice))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *PromotionFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(promotion.FieldPosters))
}

// addPredicate implements the predicateAdder interface.
func (rq *RecommendQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RecommendQuery builder.
func (rq *RecommendQuery) Filter() *RecommendFilter {
	return &RecommendFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RecommendMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RecommendMutation builder.
func (m *RecommendMutation) Filter() *RecommendFilter {
	return &RecommendFilter{config: m.config, predicateAdder: m}
}

// RecommendFilter provides a generic filtering capability at runtime for RecommendQuery.
type RecommendFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RecommendFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RecommendFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RecommendFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RecommendFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RecommendFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RecommendFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *RecommendFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldGoodID))
}

// WhereRecommenderID applies the entql [16]byte predicate on the recommender_id field.
func (f *RecommendFilter) WhereRecommenderID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldRecommenderID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *RecommendFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(recommend.FieldMessage))
}

// WhereRecommendIndex applies the entql float64 predicate on the recommend_index field.
func (f *RecommendFilter) WhereRecommendIndex(p entql.Float64P) {
	f.Where(p.Field(recommend.FieldRecommendIndex))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{config: m.config, predicateAdder: m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StockFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StockFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldGoodID))
}

// WhereTotal applies the entql other predicate on the total field.
func (f *StockFilter) WhereTotal(p entql.OtherP) {
	f.Where(p.Field(stock.FieldTotal))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *StockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(stock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *StockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(stock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *StockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(stock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *StockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(stock.FieldSold))
}

// addPredicate implements the predicateAdder interface.
func (sgq *SubGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	sgq.predicates = append(sgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubGoodQuery builder.
func (sgq *SubGoodQuery) Filter() *SubGoodFilter {
	return &SubGoodFilter{config: sgq.config, predicateAdder: sgq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubGoodMutation builder.
func (m *SubGoodMutation) Filter() *SubGoodFilter {
	return &SubGoodFilter{config: m.config, predicateAdder: m}
}

// SubGoodFilter provides a generic filtering capability at runtime for SubGoodQuery.
type SubGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SubGoodFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(subgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *SubGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(subgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *SubGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(subgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *SubGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(subgood.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *SubGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(subgood.FieldAppID))
}

// WhereMainGoodID applies the entql [16]byte predicate on the main_good_id field.
func (f *SubGoodFilter) WhereMainGoodID(p entql.ValueP) {
	f.Where(p.Field(subgood.FieldMainGoodID))
}

// WhereSubGoodID applies the entql [16]byte predicate on the sub_good_id field.
func (f *SubGoodFilter) WhereSubGoodID(p entql.ValueP) {
	f.Where(p.Field(subgood.FieldSubGoodID))
}

// WhereMust applies the entql bool predicate on the must field.
func (f *SubGoodFilter) WhereMust(p entql.BoolP) {
	f.Where(p.Field(subgood.FieldMust))
}

// WhereCommission applies the entql bool predicate on the commission field.
func (f *SubGoodFilter) WhereCommission(p entql.BoolP) {
	f.Where(p.Field(subgood.FieldCommission))
}

// addPredicate implements the predicateAdder interface.
func (vlq *VendorLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	vlq.predicates = append(vlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VendorLocationQuery builder.
func (vlq *VendorLocationQuery) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: vlq.config, predicateAdder: vlq}
}

// addPredicate implements the predicateAdder interface.
func (m *VendorLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VendorLocationMutation builder.
func (m *VendorLocationMutation) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: m.config, predicateAdder: m}
}

// VendorLocationFilter provides a generic filtering capability at runtime for VendorLocationQuery.
type VendorLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VendorLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *VendorLocationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(vendorlocation.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *VendorLocationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *VendorLocationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *VendorLocationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldDeletedAt))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *VendorLocationFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCountry))
}

// WhereProvince applies the entql string predicate on the province field.
func (f *VendorLocationFilter) WhereProvince(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldProvince))
}

// WhereCity applies the entql string predicate on the city field.
func (f *VendorLocationFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCity))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *VendorLocationFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldAddress))
}
