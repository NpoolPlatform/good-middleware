// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appdefaultgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstocklock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/comment"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/extrainfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodreward"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodrewardhistory"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/like"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/recommend"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/score"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmost"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorbrand"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorlocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 19)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appdefaultgood.Table,
			Columns: appdefaultgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appdefaultgood.FieldID,
			},
		},
		Type: "AppDefaultGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appdefaultgood.FieldCreatedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldCreatedAt},
			appdefaultgood.FieldUpdatedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldUpdatedAt},
			appdefaultgood.FieldDeletedAt:  {Type: field.TypeUint32, Column: appdefaultgood.FieldDeletedAt},
			appdefaultgood.FieldEntID:      {Type: field.TypeUUID, Column: appdefaultgood.FieldEntID},
			appdefaultgood.FieldAppID:      {Type: field.TypeUUID, Column: appdefaultgood.FieldAppID},
			appdefaultgood.FieldGoodID:     {Type: field.TypeUUID, Column: appdefaultgood.FieldGoodID},
			appdefaultgood.FieldAppGoodID:  {Type: field.TypeUUID, Column: appdefaultgood.FieldAppGoodID},
			appdefaultgood.FieldCoinTypeID: {Type: field.TypeUUID, Column: appdefaultgood.FieldCoinTypeID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgood.FieldID,
			},
		},
		Type: "AppGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			appgood.FieldCreatedAt:              {Type: field.TypeUint32, Column: appgood.FieldCreatedAt},
			appgood.FieldUpdatedAt:              {Type: field.TypeUint32, Column: appgood.FieldUpdatedAt},
			appgood.FieldDeletedAt:              {Type: field.TypeUint32, Column: appgood.FieldDeletedAt},
			appgood.FieldEntID:                  {Type: field.TypeUUID, Column: appgood.FieldEntID},
			appgood.FieldAppID:                  {Type: field.TypeUUID, Column: appgood.FieldAppID},
			appgood.FieldGoodID:                 {Type: field.TypeUUID, Column: appgood.FieldGoodID},
			appgood.FieldOnline:                 {Type: field.TypeBool, Column: appgood.FieldOnline},
			appgood.FieldVisible:                {Type: field.TypeBool, Column: appgood.FieldVisible},
			appgood.FieldGoodName:               {Type: field.TypeString, Column: appgood.FieldGoodName},
			appgood.FieldUnitPrice:              {Type: field.TypeOther, Column: appgood.FieldUnitPrice},
			appgood.FieldPackagePrice:           {Type: field.TypeOther, Column: appgood.FieldPackagePrice},
			appgood.FieldDisplayIndex:           {Type: field.TypeInt32, Column: appgood.FieldDisplayIndex},
			appgood.FieldSaleStartAt:            {Type: field.TypeUint32, Column: appgood.FieldSaleStartAt},
			appgood.FieldSaleEndAt:              {Type: field.TypeUint32, Column: appgood.FieldSaleEndAt},
			appgood.FieldServiceStartAt:         {Type: field.TypeUint32, Column: appgood.FieldServiceStartAt},
			appgood.FieldTechnicalFeeRatio:      {Type: field.TypeOther, Column: appgood.FieldTechnicalFeeRatio},
			appgood.FieldElectricityFeeRatio:    {Type: field.TypeOther, Column: appgood.FieldElectricityFeeRatio},
			appgood.FieldDescriptions:           {Type: field.TypeJSON, Column: appgood.FieldDescriptions},
			appgood.FieldGoodBanner:             {Type: field.TypeString, Column: appgood.FieldGoodBanner},
			appgood.FieldDisplayNames:           {Type: field.TypeJSON, Column: appgood.FieldDisplayNames},
			appgood.FieldEnablePurchase:         {Type: field.TypeBool, Column: appgood.FieldEnablePurchase},
			appgood.FieldEnableProductPage:      {Type: field.TypeBool, Column: appgood.FieldEnableProductPage},
			appgood.FieldCancelMode:             {Type: field.TypeString, Column: appgood.FieldCancelMode},
			appgood.FieldDisplayColors:          {Type: field.TypeJSON, Column: appgood.FieldDisplayColors},
			appgood.FieldCancellableBeforeStart: {Type: field.TypeUint32, Column: appgood.FieldCancellableBeforeStart},
			appgood.FieldProductPage:            {Type: field.TypeString, Column: appgood.FieldProductPage},
			appgood.FieldEnableSetCommission:    {Type: field.TypeBool, Column: appgood.FieldEnableSetCommission},
			appgood.FieldPosters:                {Type: field.TypeJSON, Column: appgood.FieldPosters},
			appgood.FieldMinOrderAmount:         {Type: field.TypeOther, Column: appgood.FieldMinOrderAmount},
			appgood.FieldMaxOrderAmount:         {Type: field.TypeOther, Column: appgood.FieldMaxOrderAmount},
			appgood.FieldMaxUserAmount:          {Type: field.TypeOther, Column: appgood.FieldMaxUserAmount},
			appgood.FieldMinOrderDuration:       {Type: field.TypeUint32, Column: appgood.FieldMinOrderDuration},
			appgood.FieldMaxOrderDuration:       {Type: field.TypeUint32, Column: appgood.FieldMaxOrderDuration},
			appgood.FieldPackageWithRequireds:   {Type: field.TypeBool, Column: appgood.FieldPackageWithRequireds},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appstock.Table,
			Columns: appstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appstock.FieldID,
			},
		},
		Type: "AppStock",
		Fields: map[string]*sqlgraph.FieldSpec{
			appstock.FieldCreatedAt:    {Type: field.TypeUint32, Column: appstock.FieldCreatedAt},
			appstock.FieldUpdatedAt:    {Type: field.TypeUint32, Column: appstock.FieldUpdatedAt},
			appstock.FieldDeletedAt:    {Type: field.TypeUint32, Column: appstock.FieldDeletedAt},
			appstock.FieldEntID:        {Type: field.TypeUUID, Column: appstock.FieldEntID},
			appstock.FieldAppID:        {Type: field.TypeUUID, Column: appstock.FieldAppID},
			appstock.FieldGoodID:       {Type: field.TypeUUID, Column: appstock.FieldGoodID},
			appstock.FieldAppGoodID:    {Type: field.TypeUUID, Column: appstock.FieldAppGoodID},
			appstock.FieldReserved:     {Type: field.TypeOther, Column: appstock.FieldReserved},
			appstock.FieldSpotQuantity: {Type: field.TypeOther, Column: appstock.FieldSpotQuantity},
			appstock.FieldLocked:       {Type: field.TypeOther, Column: appstock.FieldLocked},
			appstock.FieldInService:    {Type: field.TypeOther, Column: appstock.FieldInService},
			appstock.FieldWaitStart:    {Type: field.TypeOther, Column: appstock.FieldWaitStart},
			appstock.FieldSold:         {Type: field.TypeOther, Column: appstock.FieldSold},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appstocklock.Table,
			Columns: appstocklock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appstocklock.FieldID,
			},
		},
		Type: "AppStockLock",
		Fields: map[string]*sqlgraph.FieldSpec{
			appstocklock.FieldCreatedAt:       {Type: field.TypeUint32, Column: appstocklock.FieldCreatedAt},
			appstocklock.FieldUpdatedAt:       {Type: field.TypeUint32, Column: appstocklock.FieldUpdatedAt},
			appstocklock.FieldDeletedAt:       {Type: field.TypeUint32, Column: appstocklock.FieldDeletedAt},
			appstocklock.FieldEntID:           {Type: field.TypeUUID, Column: appstocklock.FieldEntID},
			appstocklock.FieldAppStockID:      {Type: field.TypeUUID, Column: appstocklock.FieldAppStockID},
			appstocklock.FieldUnits:           {Type: field.TypeOther, Column: appstocklock.FieldUnits},
			appstocklock.FieldAppSpotUnits:    {Type: field.TypeOther, Column: appstocklock.FieldAppSpotUnits},
			appstocklock.FieldLockState:       {Type: field.TypeString, Column: appstocklock.FieldLockState},
			appstocklock.FieldChargeBackState: {Type: field.TypeString, Column: appstocklock.FieldChargeBackState},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: comment.FieldID,
			},
		},
		Type: "Comment",
		Fields: map[string]*sqlgraph.FieldSpec{
			comment.FieldCreatedAt: {Type: field.TypeUint32, Column: comment.FieldCreatedAt},
			comment.FieldUpdatedAt: {Type: field.TypeUint32, Column: comment.FieldUpdatedAt},
			comment.FieldDeletedAt: {Type: field.TypeUint32, Column: comment.FieldDeletedAt},
			comment.FieldEntID:     {Type: field.TypeUUID, Column: comment.FieldEntID},
			comment.FieldAppID:     {Type: field.TypeUUID, Column: comment.FieldAppID},
			comment.FieldUserID:    {Type: field.TypeUUID, Column: comment.FieldUserID},
			comment.FieldGoodID:    {Type: field.TypeUUID, Column: comment.FieldGoodID},
			comment.FieldAppGoodID: {Type: field.TypeUUID, Column: comment.FieldAppGoodID},
			comment.FieldOrderID:   {Type: field.TypeUUID, Column: comment.FieldOrderID},
			comment.FieldContent:   {Type: field.TypeString, Column: comment.FieldContent},
			comment.FieldReplyToID: {Type: field.TypeUUID, Column: comment.FieldReplyToID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deviceinfo.Table,
			Columns: deviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deviceinfo.FieldID,
			},
		},
		Type: "DeviceInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			deviceinfo.FieldCreatedAt:        {Type: field.TypeUint32, Column: deviceinfo.FieldCreatedAt},
			deviceinfo.FieldUpdatedAt:        {Type: field.TypeUint32, Column: deviceinfo.FieldUpdatedAt},
			deviceinfo.FieldDeletedAt:        {Type: field.TypeUint32, Column: deviceinfo.FieldDeletedAt},
			deviceinfo.FieldEntID:            {Type: field.TypeUUID, Column: deviceinfo.FieldEntID},
			deviceinfo.FieldType:             {Type: field.TypeString, Column: deviceinfo.FieldType},
			deviceinfo.FieldManufacturer:     {Type: field.TypeString, Column: deviceinfo.FieldManufacturer},
			deviceinfo.FieldPowerConsumption: {Type: field.TypeUint32, Column: deviceinfo.FieldPowerConsumption},
			deviceinfo.FieldShipmentAt:       {Type: field.TypeUint32, Column: deviceinfo.FieldShipmentAt},
			deviceinfo.FieldPosters:          {Type: field.TypeJSON, Column: deviceinfo.FieldPosters},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   extrainfo.Table,
			Columns: extrainfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: extrainfo.FieldID,
			},
		},
		Type: "ExtraInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			extrainfo.FieldCreatedAt:      {Type: field.TypeUint32, Column: extrainfo.FieldCreatedAt},
			extrainfo.FieldUpdatedAt:      {Type: field.TypeUint32, Column: extrainfo.FieldUpdatedAt},
			extrainfo.FieldDeletedAt:      {Type: field.TypeUint32, Column: extrainfo.FieldDeletedAt},
			extrainfo.FieldEntID:          {Type: field.TypeUUID, Column: extrainfo.FieldEntID},
			extrainfo.FieldGoodID:         {Type: field.TypeUUID, Column: extrainfo.FieldGoodID},
			extrainfo.FieldPosters:        {Type: field.TypeJSON, Column: extrainfo.FieldPosters},
			extrainfo.FieldLabels:         {Type: field.TypeJSON, Column: extrainfo.FieldLabels},
			extrainfo.FieldLikes:          {Type: field.TypeUint32, Column: extrainfo.FieldLikes},
			extrainfo.FieldDislikes:       {Type: field.TypeUint32, Column: extrainfo.FieldDislikes},
			extrainfo.FieldRecommendCount: {Type: field.TypeUint32, Column: extrainfo.FieldRecommendCount},
			extrainfo.FieldCommentCount:   {Type: field.TypeUint32, Column: extrainfo.FieldCommentCount},
			extrainfo.FieldScoreCount:     {Type: field.TypeUint32, Column: extrainfo.FieldScoreCount},
			extrainfo.FieldScore:          {Type: field.TypeOther, Column: extrainfo.FieldScore},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   good.Table,
			Columns: good.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: good.FieldID,
			},
		},
		Type: "Good",
		Fields: map[string]*sqlgraph.FieldSpec{
			good.FieldCreatedAt:             {Type: field.TypeUint32, Column: good.FieldCreatedAt},
			good.FieldUpdatedAt:             {Type: field.TypeUint32, Column: good.FieldUpdatedAt},
			good.FieldDeletedAt:             {Type: field.TypeUint32, Column: good.FieldDeletedAt},
			good.FieldEntID:                 {Type: field.TypeUUID, Column: good.FieldEntID},
			good.FieldDeviceInfoID:          {Type: field.TypeUUID, Column: good.FieldDeviceInfoID},
			good.FieldCoinTypeID:            {Type: field.TypeUUID, Column: good.FieldCoinTypeID},
			good.FieldInheritFromGoodID:     {Type: field.TypeUUID, Column: good.FieldInheritFromGoodID},
			good.FieldVendorLocationID:      {Type: field.TypeUUID, Column: good.FieldVendorLocationID},
			good.FieldUnitPrice:             {Type: field.TypeOther, Column: good.FieldUnitPrice},
			good.FieldBenefitType:           {Type: field.TypeString, Column: good.FieldBenefitType},
			good.FieldGoodType:              {Type: field.TypeString, Column: good.FieldGoodType},
			good.FieldTitle:                 {Type: field.TypeString, Column: good.FieldTitle},
			good.FieldUnit:                  {Type: field.TypeString, Column: good.FieldUnit},
			good.FieldQuantityUnit:          {Type: field.TypeString, Column: good.FieldQuantityUnit},
			good.FieldUnitAmount:            {Type: field.TypeInt32, Column: good.FieldUnitAmount},
			good.FieldQuantityUnitAmount:    {Type: field.TypeOther, Column: good.FieldQuantityUnitAmount},
			good.FieldDeliveryAt:            {Type: field.TypeUint32, Column: good.FieldDeliveryAt},
			good.FieldStartAt:               {Type: field.TypeUint32, Column: good.FieldStartAt},
			good.FieldStartMode:             {Type: field.TypeString, Column: good.FieldStartMode},
			good.FieldTestOnly:              {Type: field.TypeBool, Column: good.FieldTestOnly},
			good.FieldBenefitIntervalHours:  {Type: field.TypeUint32, Column: good.FieldBenefitIntervalHours},
			good.FieldUnitLockDeposit:       {Type: field.TypeOther, Column: good.FieldUnitLockDeposit},
			good.FieldUnitType:              {Type: field.TypeString, Column: good.FieldUnitType},
			good.FieldQuantityCalculateType: {Type: field.TypeString, Column: good.FieldQuantityCalculateType},
			good.FieldDurationType:          {Type: field.TypeString, Column: good.FieldDurationType},
			good.FieldDurationCalculateType: {Type: field.TypeString, Column: good.FieldDurationCalculateType},
			good.FieldSettlementType:        {Type: field.TypeString, Column: good.FieldSettlementType},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodreward.Table,
			Columns: goodreward.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodreward.FieldID,
			},
		},
		Type: "GoodReward",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodreward.FieldCreatedAt:             {Type: field.TypeUint32, Column: goodreward.FieldCreatedAt},
			goodreward.FieldUpdatedAt:             {Type: field.TypeUint32, Column: goodreward.FieldUpdatedAt},
			goodreward.FieldDeletedAt:             {Type: field.TypeUint32, Column: goodreward.FieldDeletedAt},
			goodreward.FieldEntID:                 {Type: field.TypeUUID, Column: goodreward.FieldEntID},
			goodreward.FieldGoodID:                {Type: field.TypeUUID, Column: goodreward.FieldGoodID},
			goodreward.FieldRewardState:           {Type: field.TypeString, Column: goodreward.FieldRewardState},
			goodreward.FieldLastRewardAt:          {Type: field.TypeUint32, Column: goodreward.FieldLastRewardAt},
			goodreward.FieldRewardTid:             {Type: field.TypeUUID, Column: goodreward.FieldRewardTid},
			goodreward.FieldNextRewardStartAmount: {Type: field.TypeOther, Column: goodreward.FieldNextRewardStartAmount},
			goodreward.FieldLastRewardAmount:      {Type: field.TypeOther, Column: goodreward.FieldLastRewardAmount},
			goodreward.FieldLastUnitRewardAmount:  {Type: field.TypeOther, Column: goodreward.FieldLastUnitRewardAmount},
			goodreward.FieldTotalRewardAmount:     {Type: field.TypeOther, Column: goodreward.FieldTotalRewardAmount},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodrewardhistory.Table,
			Columns: goodrewardhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodrewardhistory.FieldID,
			},
		},
		Type: "GoodRewardHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodrewardhistory.FieldCreatedAt:     {Type: field.TypeUint32, Column: goodrewardhistory.FieldCreatedAt},
			goodrewardhistory.FieldUpdatedAt:     {Type: field.TypeUint32, Column: goodrewardhistory.FieldUpdatedAt},
			goodrewardhistory.FieldDeletedAt:     {Type: field.TypeUint32, Column: goodrewardhistory.FieldDeletedAt},
			goodrewardhistory.FieldEntID:         {Type: field.TypeUUID, Column: goodrewardhistory.FieldEntID},
			goodrewardhistory.FieldGoodID:        {Type: field.TypeUUID, Column: goodrewardhistory.FieldGoodID},
			goodrewardhistory.FieldRewardDate:    {Type: field.TypeUint32, Column: goodrewardhistory.FieldRewardDate},
			goodrewardhistory.FieldTid:           {Type: field.TypeUUID, Column: goodrewardhistory.FieldTid},
			goodrewardhistory.FieldAmount:        {Type: field.TypeOther, Column: goodrewardhistory.FieldAmount},
			goodrewardhistory.FieldUnitAmount:    {Type: field.TypeOther, Column: goodrewardhistory.FieldUnitAmount},
			goodrewardhistory.FieldUnitNetAmount: {Type: field.TypeOther, Column: goodrewardhistory.FieldUnitNetAmount},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   like.Table,
			Columns: like.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: like.FieldID,
			},
		},
		Type: "Like",
		Fields: map[string]*sqlgraph.FieldSpec{
			like.FieldCreatedAt: {Type: field.TypeUint32, Column: like.FieldCreatedAt},
			like.FieldUpdatedAt: {Type: field.TypeUint32, Column: like.FieldUpdatedAt},
			like.FieldDeletedAt: {Type: field.TypeUint32, Column: like.FieldDeletedAt},
			like.FieldEntID:     {Type: field.TypeUUID, Column: like.FieldEntID},
			like.FieldAppID:     {Type: field.TypeUUID, Column: like.FieldAppID},
			like.FieldUserID:    {Type: field.TypeUUID, Column: like.FieldUserID},
			like.FieldGoodID:    {Type: field.TypeUUID, Column: like.FieldGoodID},
			like.FieldAppGoodID: {Type: field.TypeUUID, Column: like.FieldAppGoodID},
			like.FieldLike:      {Type: field.TypeBool, Column: like.FieldLike},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   recommend.Table,
			Columns: recommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: recommend.FieldID,
			},
		},
		Type: "Recommend",
		Fields: map[string]*sqlgraph.FieldSpec{
			recommend.FieldCreatedAt:      {Type: field.TypeUint32, Column: recommend.FieldCreatedAt},
			recommend.FieldUpdatedAt:      {Type: field.TypeUint32, Column: recommend.FieldUpdatedAt},
			recommend.FieldDeletedAt:      {Type: field.TypeUint32, Column: recommend.FieldDeletedAt},
			recommend.FieldEntID:          {Type: field.TypeUUID, Column: recommend.FieldEntID},
			recommend.FieldAppID:          {Type: field.TypeUUID, Column: recommend.FieldAppID},
			recommend.FieldGoodID:         {Type: field.TypeUUID, Column: recommend.FieldGoodID},
			recommend.FieldRecommenderID:  {Type: field.TypeUUID, Column: recommend.FieldRecommenderID},
			recommend.FieldMessage:        {Type: field.TypeString, Column: recommend.FieldMessage},
			recommend.FieldRecommendIndex: {Type: field.TypeOther, Column: recommend.FieldRecommendIndex},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   requiredgood.Table,
			Columns: requiredgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: requiredgood.FieldID,
			},
		},
		Type: "RequiredGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			requiredgood.FieldCreatedAt:      {Type: field.TypeUint32, Column: requiredgood.FieldCreatedAt},
			requiredgood.FieldUpdatedAt:      {Type: field.TypeUint32, Column: requiredgood.FieldUpdatedAt},
			requiredgood.FieldDeletedAt:      {Type: field.TypeUint32, Column: requiredgood.FieldDeletedAt},
			requiredgood.FieldEntID:          {Type: field.TypeUUID, Column: requiredgood.FieldEntID},
			requiredgood.FieldMainGoodID:     {Type: field.TypeUUID, Column: requiredgood.FieldMainGoodID},
			requiredgood.FieldRequiredGoodID: {Type: field.TypeUUID, Column: requiredgood.FieldRequiredGoodID},
			requiredgood.FieldMust:           {Type: field.TypeBool, Column: requiredgood.FieldMust},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   score.Table,
			Columns: score.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: score.FieldID,
			},
		},
		Type: "Score",
		Fields: map[string]*sqlgraph.FieldSpec{
			score.FieldCreatedAt: {Type: field.TypeUint32, Column: score.FieldCreatedAt},
			score.FieldUpdatedAt: {Type: field.TypeUint32, Column: score.FieldUpdatedAt},
			score.FieldDeletedAt: {Type: field.TypeUint32, Column: score.FieldDeletedAt},
			score.FieldEntID:     {Type: field.TypeUUID, Column: score.FieldEntID},
			score.FieldAppID:     {Type: field.TypeUUID, Column: score.FieldAppID},
			score.FieldUserID:    {Type: field.TypeUUID, Column: score.FieldUserID},
			score.FieldGoodID:    {Type: field.TypeUUID, Column: score.FieldGoodID},
			score.FieldAppGoodID: {Type: field.TypeUUID, Column: score.FieldAppGoodID},
			score.FieldScore:     {Type: field.TypeOther, Column: score.FieldScore},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldCreatedAt:    {Type: field.TypeUint32, Column: stock.FieldCreatedAt},
			stock.FieldUpdatedAt:    {Type: field.TypeUint32, Column: stock.FieldUpdatedAt},
			stock.FieldDeletedAt:    {Type: field.TypeUint32, Column: stock.FieldDeletedAt},
			stock.FieldEntID:        {Type: field.TypeUUID, Column: stock.FieldEntID},
			stock.FieldGoodID:       {Type: field.TypeUUID, Column: stock.FieldGoodID},
			stock.FieldTotal:        {Type: field.TypeOther, Column: stock.FieldTotal},
			stock.FieldSpotQuantity: {Type: field.TypeOther, Column: stock.FieldSpotQuantity},
			stock.FieldLocked:       {Type: field.TypeOther, Column: stock.FieldLocked},
			stock.FieldInService:    {Type: field.TypeOther, Column: stock.FieldInService},
			stock.FieldWaitStart:    {Type: field.TypeOther, Column: stock.FieldWaitStart},
			stock.FieldSold:         {Type: field.TypeOther, Column: stock.FieldSold},
			stock.FieldAppReserved:  {Type: field.TypeOther, Column: stock.FieldAppReserved},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmost.Table,
			Columns: topmost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmost.FieldID,
			},
		},
		Type: "TopMost",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmost.FieldCreatedAt:              {Type: field.TypeUint32, Column: topmost.FieldCreatedAt},
			topmost.FieldUpdatedAt:              {Type: field.TypeUint32, Column: topmost.FieldUpdatedAt},
			topmost.FieldDeletedAt:              {Type: field.TypeUint32, Column: topmost.FieldDeletedAt},
			topmost.FieldEntID:                  {Type: field.TypeUUID, Column: topmost.FieldEntID},
			topmost.FieldAppID:                  {Type: field.TypeUUID, Column: topmost.FieldAppID},
			topmost.FieldTopMostType:            {Type: field.TypeString, Column: topmost.FieldTopMostType},
			topmost.FieldTitle:                  {Type: field.TypeString, Column: topmost.FieldTitle},
			topmost.FieldMessage:                {Type: field.TypeString, Column: topmost.FieldMessage},
			topmost.FieldPosters:                {Type: field.TypeJSON, Column: topmost.FieldPosters},
			topmost.FieldStartAt:                {Type: field.TypeUint32, Column: topmost.FieldStartAt},
			topmost.FieldEndAt:                  {Type: field.TypeUint32, Column: topmost.FieldEndAt},
			topmost.FieldThresholdCredits:       {Type: field.TypeOther, Column: topmost.FieldThresholdCredits},
			topmost.FieldRegisterElapsedSeconds: {Type: field.TypeUint32, Column: topmost.FieldRegisterElapsedSeconds},
			topmost.FieldThresholdPurchases:     {Type: field.TypeUint32, Column: topmost.FieldThresholdPurchases},
			topmost.FieldThresholdPaymentAmount: {Type: field.TypeOther, Column: topmost.FieldThresholdPaymentAmount},
			topmost.FieldKycMust:                {Type: field.TypeBool, Column: topmost.FieldKycMust},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topmostgood.Table,
			Columns: topmostgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgood.FieldID,
			},
		},
		Type: "TopMostGood",
		Fields: map[string]*sqlgraph.FieldSpec{
			topmostgood.FieldCreatedAt:    {Type: field.TypeUint32, Column: topmostgood.FieldCreatedAt},
			topmostgood.FieldUpdatedAt:    {Type: field.TypeUint32, Column: topmostgood.FieldUpdatedAt},
			topmostgood.FieldDeletedAt:    {Type: field.TypeUint32, Column: topmostgood.FieldDeletedAt},
			topmostgood.FieldEntID:        {Type: field.TypeUUID, Column: topmostgood.FieldEntID},
			topmostgood.FieldAppID:        {Type: field.TypeUUID, Column: topmostgood.FieldAppID},
			topmostgood.FieldGoodID:       {Type: field.TypeUUID, Column: topmostgood.FieldGoodID},
			topmostgood.FieldAppGoodID:    {Type: field.TypeUUID, Column: topmostgood.FieldAppGoodID},
			topmostgood.FieldCoinTypeID:   {Type: field.TypeUUID, Column: topmostgood.FieldCoinTypeID},
			topmostgood.FieldTopMostID:    {Type: field.TypeUUID, Column: topmostgood.FieldTopMostID},
			topmostgood.FieldDisplayIndex: {Type: field.TypeUint32, Column: topmostgood.FieldDisplayIndex},
			topmostgood.FieldPosters:      {Type: field.TypeJSON, Column: topmostgood.FieldPosters},
			topmostgood.FieldUnitPrice:    {Type: field.TypeOther, Column: topmostgood.FieldUnitPrice},
			topmostgood.FieldPackagePrice: {Type: field.TypeOther, Column: topmostgood.FieldPackagePrice},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vendorbrand.Table,
			Columns: vendorbrand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: vendorbrand.FieldID,
			},
		},
		Type: "VendorBrand",
		Fields: map[string]*sqlgraph.FieldSpec{
			vendorbrand.FieldCreatedAt: {Type: field.TypeUint32, Column: vendorbrand.FieldCreatedAt},
			vendorbrand.FieldUpdatedAt: {Type: field.TypeUint32, Column: vendorbrand.FieldUpdatedAt},
			vendorbrand.FieldDeletedAt: {Type: field.TypeUint32, Column: vendorbrand.FieldDeletedAt},
			vendorbrand.FieldEntID:     {Type: field.TypeUUID, Column: vendorbrand.FieldEntID},
			vendorbrand.FieldName:      {Type: field.TypeString, Column: vendorbrand.FieldName},
			vendorbrand.FieldLogo:      {Type: field.TypeString, Column: vendorbrand.FieldLogo},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vendorlocation.Table,
			Columns: vendorlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: vendorlocation.FieldID,
			},
		},
		Type: "VendorLocation",
		Fields: map[string]*sqlgraph.FieldSpec{
			vendorlocation.FieldCreatedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldCreatedAt},
			vendorlocation.FieldUpdatedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldUpdatedAt},
			vendorlocation.FieldDeletedAt: {Type: field.TypeUint32, Column: vendorlocation.FieldDeletedAt},
			vendorlocation.FieldEntID:     {Type: field.TypeUUID, Column: vendorlocation.FieldEntID},
			vendorlocation.FieldCountry:   {Type: field.TypeString, Column: vendorlocation.FieldCountry},
			vendorlocation.FieldProvince:  {Type: field.TypeString, Column: vendorlocation.FieldProvince},
			vendorlocation.FieldCity:      {Type: field.TypeString, Column: vendorlocation.FieldCity},
			vendorlocation.FieldAddress:   {Type: field.TypeString, Column: vendorlocation.FieldAddress},
			vendorlocation.FieldBrandID:   {Type: field.TypeUUID, Column: vendorlocation.FieldBrandID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (adgq *AppDefaultGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	adgq.predicates = append(adgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppDefaultGoodQuery builder.
func (adgq *AppDefaultGoodQuery) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: adgq.config, predicateAdder: adgq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppDefaultGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppDefaultGoodMutation builder.
func (m *AppDefaultGoodMutation) Filter() *AppDefaultGoodFilter {
	return &AppDefaultGoodFilter{config: m.config, predicateAdder: m}
}

// AppDefaultGoodFilter provides a generic filtering capability at runtime for AppDefaultGoodQuery.
type AppDefaultGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppDefaultGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppDefaultGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppDefaultGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppDefaultGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppDefaultGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appdefaultgood.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppDefaultGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppDefaultGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppDefaultGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppDefaultGoodFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AppDefaultGoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(appdefaultgood.FieldCoinTypeID))
}

// addPredicate implements the predicateAdder interface.
func (agq *AppGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	agq.predicates = append(agq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppGoodQuery builder.
func (agq *AppGoodQuery) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: agq.config, predicateAdder: agq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppGoodMutation builder.
func (m *AppGoodMutation) Filter() *AppGoodFilter {
	return &AppGoodFilter{config: m.config, predicateAdder: m}
}

// AppGoodFilter provides a generic filtering capability at runtime for AppGoodQuery.
type AppGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appgood.FieldGoodID))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *AppGoodFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldOnline))
}

// WhereVisible applies the entql bool predicate on the visible field.
func (f *AppGoodFilter) WhereVisible(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldVisible))
}

// WhereGoodName applies the entql string predicate on the good_name field.
func (f *AppGoodFilter) WhereGoodName(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodName))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *AppGoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldUnitPrice))
}

// WherePackagePrice applies the entql other predicate on the package_price field.
func (f *AppGoodFilter) WherePackagePrice(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldPackagePrice))
}

// WhereDisplayIndex applies the entql int32 predicate on the display_index field.
func (f *AppGoodFilter) WhereDisplayIndex(p entql.Int32P) {
	f.Where(p.Field(appgood.FieldDisplayIndex))
}

// WhereSaleStartAt applies the entql uint32 predicate on the sale_start_at field.
func (f *AppGoodFilter) WhereSaleStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleStartAt))
}

// WhereSaleEndAt applies the entql uint32 predicate on the sale_end_at field.
func (f *AppGoodFilter) WhereSaleEndAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldSaleEndAt))
}

// WhereServiceStartAt applies the entql uint32 predicate on the service_start_at field.
func (f *AppGoodFilter) WhereServiceStartAt(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldServiceStartAt))
}

// WhereTechnicalFeeRatio applies the entql other predicate on the technical_fee_ratio field.
func (f *AppGoodFilter) WhereTechnicalFeeRatio(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldTechnicalFeeRatio))
}

// WhereElectricityFeeRatio applies the entql other predicate on the electricity_fee_ratio field.
func (f *AppGoodFilter) WhereElectricityFeeRatio(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldElectricityFeeRatio))
}

// WhereDescriptions applies the entql json.RawMessage predicate on the descriptions field.
func (f *AppGoodFilter) WhereDescriptions(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDescriptions))
}

// WhereGoodBanner applies the entql string predicate on the good_banner field.
func (f *AppGoodFilter) WhereGoodBanner(p entql.StringP) {
	f.Where(p.Field(appgood.FieldGoodBanner))
}

// WhereDisplayNames applies the entql json.RawMessage predicate on the display_names field.
func (f *AppGoodFilter) WhereDisplayNames(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayNames))
}

// WhereEnablePurchase applies the entql bool predicate on the enable_purchase field.
func (f *AppGoodFilter) WhereEnablePurchase(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnablePurchase))
}

// WhereEnableProductPage applies the entql bool predicate on the enable_product_page field.
func (f *AppGoodFilter) WhereEnableProductPage(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableProductPage))
}

// WhereCancelMode applies the entql string predicate on the cancel_mode field.
func (f *AppGoodFilter) WhereCancelMode(p entql.StringP) {
	f.Where(p.Field(appgood.FieldCancelMode))
}

// WhereDisplayColors applies the entql json.RawMessage predicate on the display_colors field.
func (f *AppGoodFilter) WhereDisplayColors(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldDisplayColors))
}

// WhereCancellableBeforeStart applies the entql uint32 predicate on the cancellable_before_start field.
func (f *AppGoodFilter) WhereCancellableBeforeStart(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldCancellableBeforeStart))
}

// WhereProductPage applies the entql string predicate on the product_page field.
func (f *AppGoodFilter) WhereProductPage(p entql.StringP) {
	f.Where(p.Field(appgood.FieldProductPage))
}

// WhereEnableSetCommission applies the entql bool predicate on the enable_set_commission field.
func (f *AppGoodFilter) WhereEnableSetCommission(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldEnableSetCommission))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *AppGoodFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(appgood.FieldPosters))
}

// WhereMinOrderAmount applies the entql other predicate on the min_order_amount field.
func (f *AppGoodFilter) WhereMinOrderAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMinOrderAmount))
}

// WhereMaxOrderAmount applies the entql other predicate on the max_order_amount field.
func (f *AppGoodFilter) WhereMaxOrderAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMaxOrderAmount))
}

// WhereMaxUserAmount applies the entql other predicate on the max_user_amount field.
func (f *AppGoodFilter) WhereMaxUserAmount(p entql.OtherP) {
	f.Where(p.Field(appgood.FieldMaxUserAmount))
}

// WhereMinOrderDuration applies the entql uint32 predicate on the min_order_duration field.
func (f *AppGoodFilter) WhereMinOrderDuration(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldMinOrderDuration))
}

// WhereMaxOrderDuration applies the entql uint32 predicate on the max_order_duration field.
func (f *AppGoodFilter) WhereMaxOrderDuration(p entql.Uint32P) {
	f.Where(p.Field(appgood.FieldMaxOrderDuration))
}

// WherePackageWithRequireds applies the entql bool predicate on the package_with_requireds field.
func (f *AppGoodFilter) WherePackageWithRequireds(p entql.BoolP) {
	f.Where(p.Field(appgood.FieldPackageWithRequireds))
}

// addPredicate implements the predicateAdder interface.
func (asq *AppStockQuery) addPredicate(pred func(s *sql.Selector)) {
	asq.predicates = append(asq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppStockQuery builder.
func (asq *AppStockQuery) Filter() *AppStockFilter {
	return &AppStockFilter{config: asq.config, predicateAdder: asq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppStockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppStockMutation builder.
func (m *AppStockMutation) Filter() *AppStockFilter {
	return &AppStockFilter{config: m.config, predicateAdder: m}
}

// AppStockFilter provides a generic filtering capability at runtime for AppStockQuery.
type AppStockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppStockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppStockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appstock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppStockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appstock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppStockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appstock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppStockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appstock.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppStockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppStockFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppStockFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *AppStockFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(appstock.FieldAppGoodID))
}

// WhereReserved applies the entql other predicate on the reserved field.
func (f *AppStockFilter) WhereReserved(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldReserved))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *AppStockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *AppStockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *AppStockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *AppStockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *AppStockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(appstock.FieldSold))
}

// addPredicate implements the predicateAdder interface.
func (aslq *AppStockLockQuery) addPredicate(pred func(s *sql.Selector)) {
	aslq.predicates = append(aslq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppStockLockQuery builder.
func (aslq *AppStockLockQuery) Filter() *AppStockLockFilter {
	return &AppStockLockFilter{config: aslq.config, predicateAdder: aslq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppStockLockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppStockLockMutation builder.
func (m *AppStockLockMutation) Filter() *AppStockLockFilter {
	return &AppStockLockFilter{config: m.config, predicateAdder: m}
}

// AppStockLockFilter provides a generic filtering capability at runtime for AppStockLockQuery.
type AppStockLockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppStockLockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppStockLockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(appstocklock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppStockLockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(appstocklock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppStockLockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(appstocklock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppStockLockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(appstocklock.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppStockLockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldEntID))
}

// WhereAppStockID applies the entql [16]byte predicate on the app_stock_id field.
func (f *AppStockLockFilter) WhereAppStockID(p entql.ValueP) {
	f.Where(p.Field(appstocklock.FieldAppStockID))
}

// WhereUnits applies the entql other predicate on the units field.
func (f *AppStockLockFilter) WhereUnits(p entql.OtherP) {
	f.Where(p.Field(appstocklock.FieldUnits))
}

// WhereAppSpotUnits applies the entql other predicate on the app_spot_units field.
func (f *AppStockLockFilter) WhereAppSpotUnits(p entql.OtherP) {
	f.Where(p.Field(appstocklock.FieldAppSpotUnits))
}

// WhereLockState applies the entql string predicate on the lock_state field.
func (f *AppStockLockFilter) WhereLockState(p entql.StringP) {
	f.Where(p.Field(appstocklock.FieldLockState))
}

// WhereChargeBackState applies the entql string predicate on the charge_back_state field.
func (f *AppStockLockFilter) WhereChargeBackState(p entql.StringP) {
	f.Where(p.Field(appstocklock.FieldChargeBackState))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommentQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentQuery builder.
func (cq *CommentQuery) Filter() *CommentFilter {
	return &CommentFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentMutation builder.
func (m *CommentMutation) Filter() *CommentFilter {
	return &CommentFilter{config: m.config, predicateAdder: m}
}

// CommentFilter provides a generic filtering capability at runtime for CommentQuery.
type CommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CommentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CommentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CommentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CommentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CommentFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CommentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CommentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *CommentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *CommentFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldAppGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *CommentFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldOrderID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *CommentFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(comment.FieldContent))
}

// WhereReplyToID applies the entql [16]byte predicate on the reply_to_id field.
func (f *CommentFilter) WhereReplyToID(p entql.ValueP) {
	f.Where(p.Field(comment.FieldReplyToID))
}

// addPredicate implements the predicateAdder interface.
func (diq *DeviceInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	diq.predicates = append(diq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceInfoQuery builder.
func (diq *DeviceInfoQuery) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: diq.config, predicateAdder: diq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceInfoMutation builder.
func (m *DeviceInfoMutation) Filter() *DeviceInfoFilter {
	return &DeviceInfoFilter{config: m.config, predicateAdder: m}
}

// DeviceInfoFilter provides a generic filtering capability at runtime for DeviceInfoQuery.
type DeviceInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DeviceInfoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *DeviceInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *DeviceInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *DeviceInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *DeviceInfoFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(deviceinfo.FieldEntID))
}

// WhereType applies the entql string predicate on the type field.
func (f *DeviceInfoFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(deviceinfo.FieldType))
}

// WhereManufacturer applies the entql string predicate on the manufacturer field.
func (f *DeviceInfoFilter) WhereManufacturer(p entql.StringP) {
	f.Where(p.Field(deviceinfo.FieldManufacturer))
}

// WherePowerConsumption applies the entql uint32 predicate on the power_consumption field.
func (f *DeviceInfoFilter) WherePowerConsumption(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldPowerConsumption))
}

// WhereShipmentAt applies the entql uint32 predicate on the shipment_at field.
func (f *DeviceInfoFilter) WhereShipmentAt(p entql.Uint32P) {
	f.Where(p.Field(deviceinfo.FieldShipmentAt))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *DeviceInfoFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(deviceinfo.FieldPosters))
}

// addPredicate implements the predicateAdder interface.
func (eiq *ExtraInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	eiq.predicates = append(eiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExtraInfoQuery builder.
func (eiq *ExtraInfoQuery) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: eiq.config, predicateAdder: eiq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExtraInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExtraInfoMutation builder.
func (m *ExtraInfoMutation) Filter() *ExtraInfoFilter {
	return &ExtraInfoFilter{config: m.config, predicateAdder: m}
}

// ExtraInfoFilter provides a generic filtering capability at runtime for ExtraInfoQuery.
type ExtraInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExtraInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ExtraInfoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ExtraInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ExtraInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ExtraInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *ExtraInfoFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ExtraInfoFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(extrainfo.FieldGoodID))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *ExtraInfoFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(extrainfo.FieldPosters))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *ExtraInfoFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(extrainfo.FieldLabels))
}

// WhereLikes applies the entql uint32 predicate on the likes field.
func (f *ExtraInfoFilter) WhereLikes(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldLikes))
}

// WhereDislikes applies the entql uint32 predicate on the dislikes field.
func (f *ExtraInfoFilter) WhereDislikes(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldDislikes))
}

// WhereRecommendCount applies the entql uint32 predicate on the recommend_count field.
func (f *ExtraInfoFilter) WhereRecommendCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldRecommendCount))
}

// WhereCommentCount applies the entql uint32 predicate on the comment_count field.
func (f *ExtraInfoFilter) WhereCommentCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldCommentCount))
}

// WhereScoreCount applies the entql uint32 predicate on the score_count field.
func (f *ExtraInfoFilter) WhereScoreCount(p entql.Uint32P) {
	f.Where(p.Field(extrainfo.FieldScoreCount))
}

// WhereScore applies the entql other predicate on the score field.
func (f *ExtraInfoFilter) WhereScore(p entql.OtherP) {
	f.Where(p.Field(extrainfo.FieldScore))
}

// addPredicate implements the predicateAdder interface.
func (gq *GoodQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodQuery builder.
func (gq *GoodQuery) Filter() *GoodFilter {
	return &GoodFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodMutation builder.
func (m *GoodMutation) Filter() *GoodFilter {
	return &GoodFilter{config: m.config, predicateAdder: m}
}

// GoodFilter provides a generic filtering capability at runtime for GoodQuery.
type GoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(good.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(good.FieldEntID))
}

// WhereDeviceInfoID applies the entql [16]byte predicate on the device_info_id field.
func (f *GoodFilter) WhereDeviceInfoID(p entql.ValueP) {
	f.Where(p.Field(good.FieldDeviceInfoID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *GoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(good.FieldCoinTypeID))
}

// WhereInheritFromGoodID applies the entql [16]byte predicate on the inherit_from_good_id field.
func (f *GoodFilter) WhereInheritFromGoodID(p entql.ValueP) {
	f.Where(p.Field(good.FieldInheritFromGoodID))
}

// WhereVendorLocationID applies the entql [16]byte predicate on the vendor_location_id field.
func (f *GoodFilter) WhereVendorLocationID(p entql.ValueP) {
	f.Where(p.Field(good.FieldVendorLocationID))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *GoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(good.FieldUnitPrice))
}

// WhereBenefitType applies the entql string predicate on the benefit_type field.
func (f *GoodFilter) WhereBenefitType(p entql.StringP) {
	f.Where(p.Field(good.FieldBenefitType))
}

// WhereGoodType applies the entql string predicate on the good_type field.
func (f *GoodFilter) WhereGoodType(p entql.StringP) {
	f.Where(p.Field(good.FieldGoodType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *GoodFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(good.FieldTitle))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *GoodFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(good.FieldUnit))
}

// WhereQuantityUnit applies the entql string predicate on the quantity_unit field.
func (f *GoodFilter) WhereQuantityUnit(p entql.StringP) {
	f.Where(p.Field(good.FieldQuantityUnit))
}

// WhereUnitAmount applies the entql int32 predicate on the unit_amount field.
func (f *GoodFilter) WhereUnitAmount(p entql.Int32P) {
	f.Where(p.Field(good.FieldUnitAmount))
}

// WhereQuantityUnitAmount applies the entql other predicate on the quantity_unit_amount field.
func (f *GoodFilter) WhereQuantityUnitAmount(p entql.OtherP) {
	f.Where(p.Field(good.FieldQuantityUnitAmount))
}

// WhereDeliveryAt applies the entql uint32 predicate on the delivery_at field.
func (f *GoodFilter) WhereDeliveryAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldDeliveryAt))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(good.FieldStartAt))
}

// WhereStartMode applies the entql string predicate on the start_mode field.
func (f *GoodFilter) WhereStartMode(p entql.StringP) {
	f.Where(p.Field(good.FieldStartMode))
}

// WhereTestOnly applies the entql bool predicate on the test_only field.
func (f *GoodFilter) WhereTestOnly(p entql.BoolP) {
	f.Where(p.Field(good.FieldTestOnly))
}

// WhereBenefitIntervalHours applies the entql uint32 predicate on the benefit_interval_hours field.
func (f *GoodFilter) WhereBenefitIntervalHours(p entql.Uint32P) {
	f.Where(p.Field(good.FieldBenefitIntervalHours))
}

// WhereUnitLockDeposit applies the entql other predicate on the unit_lock_deposit field.
func (f *GoodFilter) WhereUnitLockDeposit(p entql.OtherP) {
	f.Where(p.Field(good.FieldUnitLockDeposit))
}

// WhereUnitType applies the entql string predicate on the unit_type field.
func (f *GoodFilter) WhereUnitType(p entql.StringP) {
	f.Where(p.Field(good.FieldUnitType))
}

// WhereQuantityCalculateType applies the entql string predicate on the quantity_calculate_type field.
func (f *GoodFilter) WhereQuantityCalculateType(p entql.StringP) {
	f.Where(p.Field(good.FieldQuantityCalculateType))
}

// WhereDurationType applies the entql string predicate on the duration_type field.
func (f *GoodFilter) WhereDurationType(p entql.StringP) {
	f.Where(p.Field(good.FieldDurationType))
}

// WhereDurationCalculateType applies the entql string predicate on the duration_calculate_type field.
func (f *GoodFilter) WhereDurationCalculateType(p entql.StringP) {
	f.Where(p.Field(good.FieldDurationCalculateType))
}

// WhereSettlementType applies the entql string predicate on the settlement_type field.
func (f *GoodFilter) WhereSettlementType(p entql.StringP) {
	f.Where(p.Field(good.FieldSettlementType))
}

// addPredicate implements the predicateAdder interface.
func (grq *GoodRewardQuery) addPredicate(pred func(s *sql.Selector)) {
	grq.predicates = append(grq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodRewardQuery builder.
func (grq *GoodRewardQuery) Filter() *GoodRewardFilter {
	return &GoodRewardFilter{config: grq.config, predicateAdder: grq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodRewardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodRewardMutation builder.
func (m *GoodRewardMutation) Filter() *GoodRewardFilter {
	return &GoodRewardFilter{config: m.config, predicateAdder: m}
}

// GoodRewardFilter provides a generic filtering capability at runtime for GoodRewardQuery.
type GoodRewardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodRewardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodRewardFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodRewardFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodRewardFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodRewardFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodRewardFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodreward.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodRewardFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodreward.FieldGoodID))
}

// WhereRewardState applies the entql string predicate on the reward_state field.
func (f *GoodRewardFilter) WhereRewardState(p entql.StringP) {
	f.Where(p.Field(goodreward.FieldRewardState))
}

// WhereLastRewardAt applies the entql uint32 predicate on the last_reward_at field.
func (f *GoodRewardFilter) WhereLastRewardAt(p entql.Uint32P) {
	f.Where(p.Field(goodreward.FieldLastRewardAt))
}

// WhereRewardTid applies the entql [16]byte predicate on the reward_tid field.
func (f *GoodRewardFilter) WhereRewardTid(p entql.ValueP) {
	f.Where(p.Field(goodreward.FieldRewardTid))
}

// WhereNextRewardStartAmount applies the entql other predicate on the next_reward_start_amount field.
func (f *GoodRewardFilter) WhereNextRewardStartAmount(p entql.OtherP) {
	f.Where(p.Field(goodreward.FieldNextRewardStartAmount))
}

// WhereLastRewardAmount applies the entql other predicate on the last_reward_amount field.
func (f *GoodRewardFilter) WhereLastRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodreward.FieldLastRewardAmount))
}

// WhereLastUnitRewardAmount applies the entql other predicate on the last_unit_reward_amount field.
func (f *GoodRewardFilter) WhereLastUnitRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodreward.FieldLastUnitRewardAmount))
}

// WhereTotalRewardAmount applies the entql other predicate on the total_reward_amount field.
func (f *GoodRewardFilter) WhereTotalRewardAmount(p entql.OtherP) {
	f.Where(p.Field(goodreward.FieldTotalRewardAmount))
}

// addPredicate implements the predicateAdder interface.
func (grhq *GoodRewardHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	grhq.predicates = append(grhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodRewardHistoryQuery builder.
func (grhq *GoodRewardHistoryQuery) Filter() *GoodRewardHistoryFilter {
	return &GoodRewardHistoryFilter{config: grhq.config, predicateAdder: grhq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodRewardHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodRewardHistoryMutation builder.
func (m *GoodRewardHistoryMutation) Filter() *GoodRewardHistoryFilter {
	return &GoodRewardHistoryFilter{config: m.config, predicateAdder: m}
}

// GoodRewardHistoryFilter provides a generic filtering capability at runtime for GoodRewardHistoryQuery.
type GoodRewardHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodRewardHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodRewardHistoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodRewardHistoryFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodRewardHistoryFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodRewardHistoryFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodRewardHistoryFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodRewardHistoryFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldGoodID))
}

// WhereRewardDate applies the entql uint32 predicate on the reward_date field.
func (f *GoodRewardHistoryFilter) WhereRewardDate(p entql.Uint32P) {
	f.Where(p.Field(goodrewardhistory.FieldRewardDate))
}

// WhereTid applies the entql [16]byte predicate on the tid field.
func (f *GoodRewardHistoryFilter) WhereTid(p entql.ValueP) {
	f.Where(p.Field(goodrewardhistory.FieldTid))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *GoodRewardHistoryFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldAmount))
}

// WhereUnitAmount applies the entql other predicate on the unit_amount field.
func (f *GoodRewardHistoryFilter) WhereUnitAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldUnitAmount))
}

// WhereUnitNetAmount applies the entql other predicate on the unit_net_amount field.
func (f *GoodRewardHistoryFilter) WhereUnitNetAmount(p entql.OtherP) {
	f.Where(p.Field(goodrewardhistory.FieldUnitNetAmount))
}

// addPredicate implements the predicateAdder interface.
func (lq *LikeQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LikeQuery builder.
func (lq *LikeQuery) Filter() *LikeFilter {
	return &LikeFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LikeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LikeMutation builder.
func (m *LikeMutation) Filter() *LikeFilter {
	return &LikeFilter{config: m.config, predicateAdder: m}
}

// LikeFilter provides a generic filtering capability at runtime for LikeQuery.
type LikeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LikeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LikeFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(like.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *LikeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(like.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *LikeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(like.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *LikeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(like.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *LikeFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(like.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *LikeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(like.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *LikeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(like.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *LikeFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(like.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *LikeFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(like.FieldAppGoodID))
}

// WhereLike applies the entql bool predicate on the like field.
func (f *LikeFilter) WhereLike(p entql.BoolP) {
	f.Where(p.Field(like.FieldLike))
}

// addPredicate implements the predicateAdder interface.
func (rq *RecommendQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RecommendQuery builder.
func (rq *RecommendQuery) Filter() *RecommendFilter {
	return &RecommendFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RecommendMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RecommendMutation builder.
func (m *RecommendMutation) Filter() *RecommendFilter {
	return &RecommendFilter{config: m.config, predicateAdder: m}
}

// RecommendFilter provides a generic filtering capability at runtime for RecommendQuery.
type RecommendFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RecommendFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RecommendFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RecommendFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RecommendFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RecommendFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(recommend.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RecommendFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RecommendFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *RecommendFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldGoodID))
}

// WhereRecommenderID applies the entql [16]byte predicate on the recommender_id field.
func (f *RecommendFilter) WhereRecommenderID(p entql.ValueP) {
	f.Where(p.Field(recommend.FieldRecommenderID))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *RecommendFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(recommend.FieldMessage))
}

// WhereRecommendIndex applies the entql other predicate on the recommend_index field.
func (f *RecommendFilter) WhereRecommendIndex(p entql.OtherP) {
	f.Where(p.Field(recommend.FieldRecommendIndex))
}

// addPredicate implements the predicateAdder interface.
func (rgq *RequiredGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	rgq.predicates = append(rgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RequiredGoodQuery builder.
func (rgq *RequiredGoodQuery) Filter() *RequiredGoodFilter {
	return &RequiredGoodFilter{config: rgq.config, predicateAdder: rgq}
}

// addPredicate implements the predicateAdder interface.
func (m *RequiredGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RequiredGoodMutation builder.
func (m *RequiredGoodMutation) Filter() *RequiredGoodFilter {
	return &RequiredGoodFilter{config: m.config, predicateAdder: m}
}

// RequiredGoodFilter provides a generic filtering capability at runtime for RequiredGoodQuery.
type RequiredGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RequiredGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RequiredGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(requiredgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RequiredGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(requiredgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RequiredGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(requiredgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RequiredGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(requiredgood.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RequiredGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldEntID))
}

// WhereMainGoodID applies the entql [16]byte predicate on the main_good_id field.
func (f *RequiredGoodFilter) WhereMainGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldMainGoodID))
}

// WhereRequiredGoodID applies the entql [16]byte predicate on the required_good_id field.
func (f *RequiredGoodFilter) WhereRequiredGoodID(p entql.ValueP) {
	f.Where(p.Field(requiredgood.FieldRequiredGoodID))
}

// WhereMust applies the entql bool predicate on the must field.
func (f *RequiredGoodFilter) WhereMust(p entql.BoolP) {
	f.Where(p.Field(requiredgood.FieldMust))
}

// addPredicate implements the predicateAdder interface.
func (sq *ScoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScoreQuery builder.
func (sq *ScoreQuery) Filter() *ScoreFilter {
	return &ScoreFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ScoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScoreMutation builder.
func (m *ScoreMutation) Filter() *ScoreFilter {
	return &ScoreFilter{config: m.config, predicateAdder: m}
}

// ScoreFilter provides a generic filtering capability at runtime for ScoreQuery.
type ScoreFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *ScoreFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(score.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ScoreFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(score.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ScoreFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(score.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ScoreFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(score.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *ScoreFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(score.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ScoreFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(score.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ScoreFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(score.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ScoreFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(score.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *ScoreFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(score.FieldAppGoodID))
}

// WhereScore applies the entql other predicate on the score field.
func (f *ScoreFilter) WhereScore(p entql.OtherP) {
	f.Where(p.Field(score.FieldScore))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{config: m.config, predicateAdder: m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *StockFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StockFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StockFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StockFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(stock.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *StockFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldEntID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StockFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldGoodID))
}

// WhereTotal applies the entql other predicate on the total field.
func (f *StockFilter) WhereTotal(p entql.OtherP) {
	f.Where(p.Field(stock.FieldTotal))
}

// WhereSpotQuantity applies the entql other predicate on the spot_quantity field.
func (f *StockFilter) WhereSpotQuantity(p entql.OtherP) {
	f.Where(p.Field(stock.FieldSpotQuantity))
}

// WhereLocked applies the entql other predicate on the locked field.
func (f *StockFilter) WhereLocked(p entql.OtherP) {
	f.Where(p.Field(stock.FieldLocked))
}

// WhereInService applies the entql other predicate on the in_service field.
func (f *StockFilter) WhereInService(p entql.OtherP) {
	f.Where(p.Field(stock.FieldInService))
}

// WhereWaitStart applies the entql other predicate on the wait_start field.
func (f *StockFilter) WhereWaitStart(p entql.OtherP) {
	f.Where(p.Field(stock.FieldWaitStart))
}

// WhereSold applies the entql other predicate on the sold field.
func (f *StockFilter) WhereSold(p entql.OtherP) {
	f.Where(p.Field(stock.FieldSold))
}

// WhereAppReserved applies the entql other predicate on the app_reserved field.
func (f *StockFilter) WhereAppReserved(p entql.OtherP) {
	f.Where(p.Field(stock.FieldAppReserved))
}

// addPredicate implements the predicateAdder interface.
func (tmq *TopMostQuery) addPredicate(pred func(s *sql.Selector)) {
	tmq.predicates = append(tmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostQuery builder.
func (tmq *TopMostQuery) Filter() *TopMostFilter {
	return &TopMostFilter{config: tmq.config, predicateAdder: tmq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostMutation builder.
func (m *TopMostMutation) Filter() *TopMostFilter {
	return &TopMostFilter{config: m.config, predicateAdder: m}
}

// TopMostFilter provides a generic filtering capability at runtime for TopMostQuery.
type TopMostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TopMostFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TopMostFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TopMostFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmost.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TopMostFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(topmost.FieldAppID))
}

// WhereTopMostType applies the entql string predicate on the top_most_type field.
func (f *TopMostFilter) WhereTopMostType(p entql.StringP) {
	f.Where(p.Field(topmost.FieldTopMostType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TopMostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(topmost.FieldTitle))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *TopMostFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(topmost.FieldMessage))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *TopMostFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(topmost.FieldPosters))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *TopMostFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *TopMostFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldEndAt))
}

// WhereThresholdCredits applies the entql other predicate on the threshold_credits field.
func (f *TopMostFilter) WhereThresholdCredits(p entql.OtherP) {
	f.Where(p.Field(topmost.FieldThresholdCredits))
}

// WhereRegisterElapsedSeconds applies the entql uint32 predicate on the register_elapsed_seconds field.
func (f *TopMostFilter) WhereRegisterElapsedSeconds(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldRegisterElapsedSeconds))
}

// WhereThresholdPurchases applies the entql uint32 predicate on the threshold_purchases field.
func (f *TopMostFilter) WhereThresholdPurchases(p entql.Uint32P) {
	f.Where(p.Field(topmost.FieldThresholdPurchases))
}

// WhereThresholdPaymentAmount applies the entql other predicate on the threshold_payment_amount field.
func (f *TopMostFilter) WhereThresholdPaymentAmount(p entql.OtherP) {
	f.Where(p.Field(topmost.FieldThresholdPaymentAmount))
}

// WhereKycMust applies the entql bool predicate on the kyc_must field.
func (f *TopMostFilter) WhereKycMust(p entql.BoolP) {
	f.Where(p.Field(topmost.FieldKycMust))
}

// addPredicate implements the predicateAdder interface.
func (tmgq *TopMostGoodQuery) addPredicate(pred func(s *sql.Selector)) {
	tmgq.predicates = append(tmgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopMostGoodQuery builder.
func (tmgq *TopMostGoodQuery) Filter() *TopMostGoodFilter {
	return &TopMostGoodFilter{config: tmgq.config, predicateAdder: tmgq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopMostGoodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopMostGoodMutation builder.
func (m *TopMostGoodMutation) Filter() *TopMostGoodFilter {
	return &TopMostGoodFilter{config: m.config, predicateAdder: m}
}

// TopMostGoodFilter provides a generic filtering capability at runtime for TopMostGoodQuery.
type TopMostGoodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopMostGoodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TopMostGoodFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TopMostGoodFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TopMostGoodFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TopMostGoodFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TopMostGoodFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *TopMostGoodFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *TopMostGoodFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldGoodID))
}

// WhereAppGoodID applies the entql [16]byte predicate on the app_good_id field.
func (f *TopMostGoodFilter) WhereAppGoodID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldAppGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *TopMostGoodFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldCoinTypeID))
}

// WhereTopMostID applies the entql [16]byte predicate on the top_most_id field.
func (f *TopMostGoodFilter) WhereTopMostID(p entql.ValueP) {
	f.Where(p.Field(topmostgood.FieldTopMostID))
}

// WhereDisplayIndex applies the entql uint32 predicate on the display_index field.
func (f *TopMostGoodFilter) WhereDisplayIndex(p entql.Uint32P) {
	f.Where(p.Field(topmostgood.FieldDisplayIndex))
}

// WherePosters applies the entql json.RawMessage predicate on the posters field.
func (f *TopMostGoodFilter) WherePosters(p entql.BytesP) {
	f.Where(p.Field(topmostgood.FieldPosters))
}

// WhereUnitPrice applies the entql other predicate on the unit_price field.
func (f *TopMostGoodFilter) WhereUnitPrice(p entql.OtherP) {
	f.Where(p.Field(topmostgood.FieldUnitPrice))
}

// WherePackagePrice applies the entql other predicate on the package_price field.
func (f *TopMostGoodFilter) WherePackagePrice(p entql.OtherP) {
	f.Where(p.Field(topmostgood.FieldPackagePrice))
}

// addPredicate implements the predicateAdder interface.
func (vbq *VendorBrandQuery) addPredicate(pred func(s *sql.Selector)) {
	vbq.predicates = append(vbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VendorBrandQuery builder.
func (vbq *VendorBrandQuery) Filter() *VendorBrandFilter {
	return &VendorBrandFilter{config: vbq.config, predicateAdder: vbq}
}

// addPredicate implements the predicateAdder interface.
func (m *VendorBrandMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VendorBrandMutation builder.
func (m *VendorBrandMutation) Filter() *VendorBrandFilter {
	return &VendorBrandFilter{config: m.config, predicateAdder: m}
}

// VendorBrandFilter provides a generic filtering capability at runtime for VendorBrandQuery.
type VendorBrandFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VendorBrandFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *VendorBrandFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(vendorbrand.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *VendorBrandFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorbrand.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *VendorBrandFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorbrand.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *VendorBrandFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorbrand.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *VendorBrandFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(vendorbrand.FieldEntID))
}

// WhereName applies the entql string predicate on the name field.
func (f *VendorBrandFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(vendorbrand.FieldName))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *VendorBrandFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(vendorbrand.FieldLogo))
}

// addPredicate implements the predicateAdder interface.
func (vlq *VendorLocationQuery) addPredicate(pred func(s *sql.Selector)) {
	vlq.predicates = append(vlq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VendorLocationQuery builder.
func (vlq *VendorLocationQuery) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: vlq.config, predicateAdder: vlq}
}

// addPredicate implements the predicateAdder interface.
func (m *VendorLocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VendorLocationMutation builder.
func (m *VendorLocationMutation) Filter() *VendorLocationFilter {
	return &VendorLocationFilter{config: m.config, predicateAdder: m}
}

// VendorLocationFilter provides a generic filtering capability at runtime for VendorLocationQuery.
type VendorLocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VendorLocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *VendorLocationFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *VendorLocationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *VendorLocationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *VendorLocationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(vendorlocation.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *VendorLocationFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(vendorlocation.FieldEntID))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *VendorLocationFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCountry))
}

// WhereProvince applies the entql string predicate on the province field.
func (f *VendorLocationFilter) WhereProvince(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldProvince))
}

// WhereCity applies the entql string predicate on the city field.
func (f *VendorLocationFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldCity))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *VendorLocationFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(vendorlocation.FieldAddress))
}

// WhereBrandID applies the entql [16]byte predicate on the brand_id field.
func (f *VendorLocationFilter) WhereBrandID(p entql.ValueP) {
	f.Where(p.Field(vendorlocation.FieldBrandID))
}
