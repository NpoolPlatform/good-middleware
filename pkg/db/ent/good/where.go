// Code generated by ent, DO NOT EDIT.

package good

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// DurationDays applies equality check predicate on the "duration_days" field. It's identical to DurationDaysEQ.
func DurationDays(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationDays), v))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// InheritFromGoodID applies equality check predicate on the "inherit_from_good_id" field. It's identical to InheritFromGoodIDEQ.
func InheritFromGoodID(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// BenefitType applies equality check predicate on the "benefit_type" field. It's identical to BenefitTypeEQ.
func BenefitType(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitType), v))
	})
}

// GoodType applies equality check predicate on the "good_type" field. It's identical to GoodTypeEQ.
func GoodType(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodType), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitAmount applies equality check predicate on the "unit_amount" field. It's identical to UnitAmountEQ.
func UnitAmount(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitAmount), v))
	})
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// TestOnly applies equality check predicate on the "test_only" field. It's identical to TestOnlyEQ.
func TestOnly(v bool) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestOnly), v))
	})
}

// BenefitIntervalHours applies equality check predicate on the "benefit_interval_hours" field. It's identical to BenefitIntervalHoursEQ.
func BenefitIntervalHours(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitState applies equality check predicate on the "benefit_state" field. It's identical to BenefitStateEQ.
func BenefitState(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// LastBenefitAt applies equality check predicate on the "last_benefit_at" field. It's identical to LastBenefitAtEQ.
func LastBenefitAt(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// NextBenefitStartAmount applies equality check predicate on the "next_benefit_start_amount" field. It's identical to NextBenefitStartAmountEQ.
func NextBenefitStartAmount(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// LastBenefitAmount applies equality check predicate on the "last_benefit_amount" field. It's identical to LastBenefitAmountEQ.
func LastBenefitAmount(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAmount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDGT applies the GT predicate on the "device_info_id" field.
func DeviceInfoIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDGTE applies the GTE predicate on the "device_info_id" field.
func DeviceInfoIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLT applies the LT predicate on the "device_info_id" field.
func DeviceInfoIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLTE applies the LTE predicate on the "device_info_id" field.
func DeviceInfoIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceInfoID), v))
	})
}

// DurationDaysEQ applies the EQ predicate on the "duration_days" field.
func DurationDaysEQ(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationDays), v))
	})
}

// DurationDaysNEQ applies the NEQ predicate on the "duration_days" field.
func DurationDaysNEQ(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationDays), v))
	})
}

// DurationDaysIn applies the In predicate on the "duration_days" field.
func DurationDaysIn(vs ...int32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDurationDays), v...))
	})
}

// DurationDaysNotIn applies the NotIn predicate on the "duration_days" field.
func DurationDaysNotIn(vs ...int32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDurationDays), v...))
	})
}

// DurationDaysGT applies the GT predicate on the "duration_days" field.
func DurationDaysGT(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationDays), v))
	})
}

// DurationDaysGTE applies the GTE predicate on the "duration_days" field.
func DurationDaysGTE(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationDays), v))
	})
}

// DurationDaysLT applies the LT predicate on the "duration_days" field.
func DurationDaysLT(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationDays), v))
	})
}

// DurationDaysLTE applies the LTE predicate on the "duration_days" field.
func DurationDaysLTE(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationDays), v))
	})
}

// DurationDaysIsNil applies the IsNil predicate on the "duration_days" field.
func DurationDaysIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDurationDays)))
	})
}

// DurationDaysNotNil applies the NotNil predicate on the "duration_days" field.
func DurationDaysNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDurationDays)))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// InheritFromGoodIDEQ applies the EQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDNEQ applies the NEQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDIn applies the In predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDNotIn applies the NotIn predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDGT applies the GT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDGTE applies the GTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLT applies the LT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLTE applies the LTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDIsNil applies the IsNil predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInheritFromGoodID)))
	})
}

// InheritFromGoodIDNotNil applies the NotNil predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInheritFromGoodID)))
	})
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorLocationID), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// BenefitTypeEQ applies the EQ predicate on the "benefit_type" field.
func BenefitTypeEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeNEQ applies the NEQ predicate on the "benefit_type" field.
func BenefitTypeNEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeIn applies the In predicate on the "benefit_type" field.
func BenefitTypeIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBenefitType), v...))
	})
}

// BenefitTypeNotIn applies the NotIn predicate on the "benefit_type" field.
func BenefitTypeNotIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBenefitType), v...))
	})
}

// BenefitTypeGT applies the GT predicate on the "benefit_type" field.
func BenefitTypeGT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeGTE applies the GTE predicate on the "benefit_type" field.
func BenefitTypeGTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeLT applies the LT predicate on the "benefit_type" field.
func BenefitTypeLT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeLTE applies the LTE predicate on the "benefit_type" field.
func BenefitTypeLTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeContains applies the Contains predicate on the "benefit_type" field.
func BenefitTypeContains(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeHasPrefix applies the HasPrefix predicate on the "benefit_type" field.
func BenefitTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeHasSuffix applies the HasSuffix predicate on the "benefit_type" field.
func BenefitTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeIsNil applies the IsNil predicate on the "benefit_type" field.
func BenefitTypeIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitType)))
	})
}

// BenefitTypeNotNil applies the NotNil predicate on the "benefit_type" field.
func BenefitTypeNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitType)))
	})
}

// BenefitTypeEqualFold applies the EqualFold predicate on the "benefit_type" field.
func BenefitTypeEqualFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeContainsFold applies the ContainsFold predicate on the "benefit_type" field.
func BenefitTypeContainsFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBenefitType), v))
	})
}

// GoodTypeEQ applies the EQ predicate on the "good_type" field.
func GoodTypeEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodType), v))
	})
}

// GoodTypeNEQ applies the NEQ predicate on the "good_type" field.
func GoodTypeNEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodType), v))
	})
}

// GoodTypeIn applies the In predicate on the "good_type" field.
func GoodTypeIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodType), v...))
	})
}

// GoodTypeNotIn applies the NotIn predicate on the "good_type" field.
func GoodTypeNotIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodType), v...))
	})
}

// GoodTypeGT applies the GT predicate on the "good_type" field.
func GoodTypeGT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodType), v))
	})
}

// GoodTypeGTE applies the GTE predicate on the "good_type" field.
func GoodTypeGTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodType), v))
	})
}

// GoodTypeLT applies the LT predicate on the "good_type" field.
func GoodTypeLT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodType), v))
	})
}

// GoodTypeLTE applies the LTE predicate on the "good_type" field.
func GoodTypeLTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodType), v))
	})
}

// GoodTypeContains applies the Contains predicate on the "good_type" field.
func GoodTypeContains(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoodType), v))
	})
}

// GoodTypeHasPrefix applies the HasPrefix predicate on the "good_type" field.
func GoodTypeHasPrefix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoodType), v))
	})
}

// GoodTypeHasSuffix applies the HasSuffix predicate on the "good_type" field.
func GoodTypeHasSuffix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoodType), v))
	})
}

// GoodTypeIsNil applies the IsNil predicate on the "good_type" field.
func GoodTypeIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodType)))
	})
}

// GoodTypeNotNil applies the NotNil predicate on the "good_type" field.
func GoodTypeNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodType)))
	})
}

// GoodTypeEqualFold applies the EqualFold predicate on the "good_type" field.
func GoodTypeEqualFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoodType), v))
	})
}

// GoodTypeContainsFold applies the ContainsFold predicate on the "good_type" field.
func GoodTypeContainsFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoodType), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnit)))
	})
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnit)))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// UnitAmountEQ applies the EQ predicate on the "unit_amount" field.
func UnitAmountEQ(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountNEQ applies the NEQ predicate on the "unit_amount" field.
func UnitAmountNEQ(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountIn applies the In predicate on the "unit_amount" field.
func UnitAmountIn(vs ...int32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitAmount), v...))
	})
}

// UnitAmountNotIn applies the NotIn predicate on the "unit_amount" field.
func UnitAmountNotIn(vs ...int32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitAmount), v...))
	})
}

// UnitAmountGT applies the GT predicate on the "unit_amount" field.
func UnitAmountGT(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountGTE applies the GTE predicate on the "unit_amount" field.
func UnitAmountGTE(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountLT applies the LT predicate on the "unit_amount" field.
func UnitAmountLT(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountLTE applies the LTE predicate on the "unit_amount" field.
func UnitAmountLTE(v int32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitAmount), v))
	})
}

// UnitAmountIsNil applies the IsNil predicate on the "unit_amount" field.
func UnitAmountIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitAmount)))
	})
}

// UnitAmountNotNil applies the NotNil predicate on the "unit_amount" field.
func UnitAmountNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitAmount)))
	})
}

// SupportCoinTypeIdsIsNil applies the IsNil predicate on the "support_coin_type_ids" field.
func SupportCoinTypeIdsIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupportCoinTypeIds)))
	})
}

// SupportCoinTypeIdsNotNil applies the NotNil predicate on the "support_coin_type_ids" field.
func SupportCoinTypeIdsNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupportCoinTypeIds)))
	})
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIsNil applies the IsNil predicate on the "delivery_at" field.
func DeliveryAtIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeliveryAt)))
	})
}

// DeliveryAtNotNil applies the NotNil predicate on the "delivery_at" field.
func DeliveryAtNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeliveryAt)))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// TestOnlyEQ applies the EQ predicate on the "test_only" field.
func TestOnlyEQ(v bool) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestOnly), v))
	})
}

// TestOnlyNEQ applies the NEQ predicate on the "test_only" field.
func TestOnlyNEQ(v bool) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestOnly), v))
	})
}

// TestOnlyIsNil applies the IsNil predicate on the "test_only" field.
func TestOnlyIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestOnly)))
	})
}

// TestOnlyNotNil applies the NotNil predicate on the "test_only" field.
func TestOnlyNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestOnly)))
	})
}

// BenefitIntervalHoursEQ applies the EQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursNEQ applies the NEQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursIn applies the In predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBenefitIntervalHours), v...))
	})
}

// BenefitIntervalHoursNotIn applies the NotIn predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBenefitIntervalHours), v...))
	})
}

// BenefitIntervalHoursGT applies the GT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursGTE applies the GTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursLT applies the LT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursLTE applies the LTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursIsNil applies the IsNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitIntervalHours)))
	})
}

// BenefitIntervalHoursNotNil applies the NotNil predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitIntervalHours)))
	})
}

// BenefitStateEQ applies the EQ predicate on the "benefit_state" field.
func BenefitStateEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateNEQ applies the NEQ predicate on the "benefit_state" field.
func BenefitStateNEQ(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIn applies the In predicate on the "benefit_state" field.
func BenefitStateIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateNotIn applies the NotIn predicate on the "benefit_state" field.
func BenefitStateNotIn(vs ...string) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBenefitState), v...))
	})
}

// BenefitStateGT applies the GT predicate on the "benefit_state" field.
func BenefitStateGT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateGTE applies the GTE predicate on the "benefit_state" field.
func BenefitStateGTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLT applies the LT predicate on the "benefit_state" field.
func BenefitStateLT(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitState), v))
	})
}

// BenefitStateLTE applies the LTE predicate on the "benefit_state" field.
func BenefitStateLTE(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContains applies the Contains predicate on the "benefit_state" field.
func BenefitStateContains(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasPrefix applies the HasPrefix predicate on the "benefit_state" field.
func BenefitStateHasPrefix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateHasSuffix applies the HasSuffix predicate on the "benefit_state" field.
func BenefitStateHasSuffix(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBenefitState), v))
	})
}

// BenefitStateIsNil applies the IsNil predicate on the "benefit_state" field.
func BenefitStateIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateNotNil applies the NotNil predicate on the "benefit_state" field.
func BenefitStateNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitState)))
	})
}

// BenefitStateEqualFold applies the EqualFold predicate on the "benefit_state" field.
func BenefitStateEqualFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBenefitState), v))
	})
}

// BenefitStateContainsFold applies the ContainsFold predicate on the "benefit_state" field.
func BenefitStateContainsFold(v string) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBenefitState), v))
	})
}

// LastBenefitAtEQ applies the EQ predicate on the "last_benefit_at" field.
func LastBenefitAtEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtNEQ applies the NEQ predicate on the "last_benefit_at" field.
func LastBenefitAtNEQ(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIn applies the In predicate on the "last_benefit_at" field.
func LastBenefitAtIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtNotIn applies the NotIn predicate on the "last_benefit_at" field.
func LastBenefitAtNotIn(vs ...uint32) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastBenefitAt), v...))
	})
}

// LastBenefitAtGT applies the GT predicate on the "last_benefit_at" field.
func LastBenefitAtGT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtGTE applies the GTE predicate on the "last_benefit_at" field.
func LastBenefitAtGTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLT applies the LT predicate on the "last_benefit_at" field.
func LastBenefitAtLT(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtLTE applies the LTE predicate on the "last_benefit_at" field.
func LastBenefitAtLTE(v uint32) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBenefitAt), v))
	})
}

// LastBenefitAtIsNil applies the IsNil predicate on the "last_benefit_at" field.
func LastBenefitAtIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBenefitAt)))
	})
}

// LastBenefitAtNotNil applies the NotNil predicate on the "last_benefit_at" field.
func LastBenefitAtNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBenefitAt)))
	})
}

// BenefitTidsIsNil applies the IsNil predicate on the "benefit_tids" field.
func BenefitTidsIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBenefitTids)))
	})
}

// BenefitTidsNotNil applies the NotNil predicate on the "benefit_tids" field.
func BenefitTidsNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBenefitTids)))
	})
}

// NextBenefitStartAmountEQ applies the EQ predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountNEQ applies the NEQ predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountIn applies the In predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNextBenefitStartAmount), v...))
	})
}

// NextBenefitStartAmountNotIn applies the NotIn predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNotIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNextBenefitStartAmount), v...))
	})
}

// NextBenefitStartAmountGT applies the GT predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountGTE applies the GTE predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountLT applies the LT predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountLTE applies the LTE predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextBenefitStartAmount), v))
	})
}

// NextBenefitStartAmountIsNil applies the IsNil predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextBenefitStartAmount)))
	})
}

// NextBenefitStartAmountNotNil applies the NotNil predicate on the "next_benefit_start_amount" field.
func NextBenefitStartAmountNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextBenefitStartAmount)))
	})
}

// LastBenefitAmountEQ applies the EQ predicate on the "last_benefit_amount" field.
func LastBenefitAmountEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountNEQ applies the NEQ predicate on the "last_benefit_amount" field.
func LastBenefitAmountNEQ(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountIn applies the In predicate on the "last_benefit_amount" field.
func LastBenefitAmountIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastBenefitAmount), v...))
	})
}

// LastBenefitAmountNotIn applies the NotIn predicate on the "last_benefit_amount" field.
func LastBenefitAmountNotIn(vs ...decimal.Decimal) predicate.Good {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastBenefitAmount), v...))
	})
}

// LastBenefitAmountGT applies the GT predicate on the "last_benefit_amount" field.
func LastBenefitAmountGT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountGTE applies the GTE predicate on the "last_benefit_amount" field.
func LastBenefitAmountGTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountLT applies the LT predicate on the "last_benefit_amount" field.
func LastBenefitAmountLT(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountLTE applies the LTE predicate on the "last_benefit_amount" field.
func LastBenefitAmountLTE(v decimal.Decimal) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastBenefitAmount), v))
	})
}

// LastBenefitAmountIsNil applies the IsNil predicate on the "last_benefit_amount" field.
func LastBenefitAmountIsNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastBenefitAmount)))
	})
}

// LastBenefitAmountNotNil applies the NotNil predicate on the "last_benefit_amount" field.
func LastBenefitAmountNotNil() predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastBenefitAmount)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Good) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Good) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Good) predicate.Good {
	return predicate.Good(func(s *sql.Selector) {
		p(s.Not())
	})
}
