// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/pledge"
	"github.com/google/uuid"
)

// Pledge is the model entity for the Pledge schema.
type Pledge struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// ContractCodeURL holds the value of the "contract_code_url" field.
	ContractCodeURL string `json:"contract_code_url,omitempty"`
	// ContractCodeBranch holds the value of the "contract_code_branch" field.
	ContractCodeBranch string `json:"contract_code_branch,omitempty"`
	// ContractState holds the value of the "contract_state" field.
	ContractState string `json:"contract_state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pledge) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pledge.FieldID, pledge.FieldCreatedAt, pledge.FieldUpdatedAt, pledge.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case pledge.FieldContractCodeURL, pledge.FieldContractCodeBranch, pledge.FieldContractState:
			values[i] = new(sql.NullString)
		case pledge.FieldEntID, pledge.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pledge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pledge fields.
func (pl *Pledge) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pledge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint32(value.Int64)
		case pledge.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = uint32(value.Int64)
			}
		case pledge.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = uint32(value.Int64)
			}
		case pledge.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = uint32(value.Int64)
			}
		case pledge.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				pl.EntID = *value
			}
		case pledge.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				pl.GoodID = *value
			}
		case pledge.FieldContractCodeURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_code_url", values[i])
			} else if value.Valid {
				pl.ContractCodeURL = value.String
			}
		case pledge.FieldContractCodeBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_code_branch", values[i])
			} else if value.Valid {
				pl.ContractCodeBranch = value.String
			}
		case pledge.FieldContractState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_state", values[i])
			} else if value.Valid {
				pl.ContractState = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pledge.
// Note that you need to call Pledge.Unwrap() before calling this method if this Pledge
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Pledge) Update() *PledgeUpdateOne {
	return (&PledgeClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Pledge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Pledge) Unwrap() *Pledge {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pledge is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Pledge) String() string {
	var builder strings.Builder
	builder.WriteString("Pledge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pl.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.GoodID))
	builder.WriteString(", ")
	builder.WriteString("contract_code_url=")
	builder.WriteString(pl.ContractCodeURL)
	builder.WriteString(", ")
	builder.WriteString("contract_code_branch=")
	builder.WriteString(pl.ContractCodeBranch)
	builder.WriteString(", ")
	builder.WriteString("contract_state=")
	builder.WriteString(pl.ContractState)
	builder.WriteByte(')')
	return builder.String()
}

// Pledges is a parsable slice of Pledge.
type Pledges []*Pledge

func (pl Pledges) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
