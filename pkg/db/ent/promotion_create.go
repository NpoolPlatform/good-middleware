// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/promotion"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PromotionCreate is the builder for creating a Promotion entity.
type PromotionCreate struct {
	config
	mutation *PromotionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PromotionCreate) SetCreatedAt(u uint32) *PromotionCreate {
	pc.mutation.SetCreatedAt(u)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableCreatedAt(u *uint32) *PromotionCreate {
	if u != nil {
		pc.SetCreatedAt(*u)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PromotionCreate) SetUpdatedAt(u uint32) *PromotionCreate {
	pc.mutation.SetUpdatedAt(u)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableUpdatedAt(u *uint32) *PromotionCreate {
	if u != nil {
		pc.SetUpdatedAt(*u)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PromotionCreate) SetDeletedAt(u uint32) *PromotionCreate {
	pc.mutation.SetDeletedAt(u)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableDeletedAt(u *uint32) *PromotionCreate {
	if u != nil {
		pc.SetDeletedAt(*u)
	}
	return pc
}

// SetAppID sets the "app_id" field.
func (pc *PromotionCreate) SetAppID(u uuid.UUID) *PromotionCreate {
	pc.mutation.SetAppID(u)
	return pc
}

// SetGoodID sets the "good_id" field.
func (pc *PromotionCreate) SetGoodID(u uuid.UUID) *PromotionCreate {
	pc.mutation.SetGoodID(u)
	return pc
}

// SetMessage sets the "message" field.
func (pc *PromotionCreate) SetMessage(s string) *PromotionCreate {
	pc.mutation.SetMessage(s)
	return pc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableMessage(s *string) *PromotionCreate {
	if s != nil {
		pc.SetMessage(*s)
	}
	return pc
}

// SetStartAt sets the "start_at" field.
func (pc *PromotionCreate) SetStartAt(u uint32) *PromotionCreate {
	pc.mutation.SetStartAt(u)
	return pc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableStartAt(u *uint32) *PromotionCreate {
	if u != nil {
		pc.SetStartAt(*u)
	}
	return pc
}

// SetEndAt sets the "end_at" field.
func (pc *PromotionCreate) SetEndAt(u uint32) *PromotionCreate {
	pc.mutation.SetEndAt(u)
	return pc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableEndAt(u *uint32) *PromotionCreate {
	if u != nil {
		pc.SetEndAt(*u)
	}
	return pc
}

// SetPrice sets the "price" field.
func (pc *PromotionCreate) SetPrice(d decimal.Decimal) *PromotionCreate {
	pc.mutation.SetPrice(d)
	return pc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pc *PromotionCreate) SetNillablePrice(d *decimal.Decimal) *PromotionCreate {
	if d != nil {
		pc.SetPrice(*d)
	}
	return pc
}

// SetPosters sets the "posters" field.
func (pc *PromotionCreate) SetPosters(s []string) *PromotionCreate {
	pc.mutation.SetPosters(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PromotionCreate) SetID(u uuid.UUID) *PromotionCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PromotionCreate) SetNillableID(u *uuid.UUID) *PromotionCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PromotionMutation object of the builder.
func (pc *PromotionCreate) Mutation() *PromotionMutation {
	return pc.mutation
}

// Save creates the Promotion in the database.
func (pc *PromotionCreate) Save(ctx context.Context) (*Promotion, error) {
	var (
		err  error
		node *Promotion
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Promotion)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PromotionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotionCreate) SaveX(ctx context.Context) *Promotion {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PromotionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PromotionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PromotionCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if promotion.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotion.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotion.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if promotion.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotion.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotion.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		if promotion.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized promotion.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := promotion.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.Message(); !ok {
		v := promotion.DefaultMessage
		pc.mutation.SetMessage(v)
	}
	if _, ok := pc.mutation.StartAt(); !ok {
		v := promotion.DefaultStartAt
		pc.mutation.SetStartAt(v)
	}
	if _, ok := pc.mutation.EndAt(); !ok {
		v := promotion.DefaultEndAt
		pc.mutation.SetEndAt(v)
	}
	if _, ok := pc.mutation.Price(); !ok {
		v := promotion.DefaultPrice
		pc.mutation.SetPrice(v)
	}
	if _, ok := pc.mutation.Posters(); !ok {
		v := promotion.DefaultPosters
		pc.mutation.SetPosters(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if promotion.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized promotion.DefaultID (forgotten import ent/runtime?)")
		}
		v := promotion.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PromotionCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Promotion.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Promotion.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Promotion.deleted_at"`)}
	}
	if _, ok := pc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Promotion.app_id"`)}
	}
	if _, ok := pc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "Promotion.good_id"`)}
	}
	return nil
}

func (pc *PromotionCreate) sqlSave(ctx context.Context) (*Promotion, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PromotionCreate) createSpec() (*Promotion, *sqlgraph.CreateSpec) {
	var (
		_node = &Promotion{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: promotion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: promotion.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: promotion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: promotion.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: promotion.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: promotion.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := pc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: promotion.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := pc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: promotion.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := pc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: promotion.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := pc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: promotion.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: promotion.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := pc.mutation.Posters(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: promotion.FieldPosters,
		})
		_node.Posters = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Promotion.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PromotionCreate) OnConflict(opts ...sql.ConflictOption) *PromotionUpsertOne {
	pc.conflict = opts
	return &PromotionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Promotion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PromotionCreate) OnConflictColumns(columns ...string) *PromotionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PromotionUpsertOne{
		create: pc,
	}
}

type (
	// PromotionUpsertOne is the builder for "upsert"-ing
	//  one Promotion node.
	PromotionUpsertOne struct {
		create *PromotionCreate
	}

	// PromotionUpsert is the "OnConflict" setter.
	PromotionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PromotionUpsert) SetCreatedAt(v uint32) *PromotionUpsert {
	u.Set(promotion.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateCreatedAt() *PromotionUpsert {
	u.SetExcluded(promotion.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PromotionUpsert) AddCreatedAt(v uint32) *PromotionUpsert {
	u.Add(promotion.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionUpsert) SetUpdatedAt(v uint32) *PromotionUpsert {
	u.Set(promotion.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateUpdatedAt() *PromotionUpsert {
	u.SetExcluded(promotion.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PromotionUpsert) AddUpdatedAt(v uint32) *PromotionUpsert {
	u.Add(promotion.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionUpsert) SetDeletedAt(v uint32) *PromotionUpsert {
	u.Set(promotion.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateDeletedAt() *PromotionUpsert {
	u.SetExcluded(promotion.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PromotionUpsert) AddDeletedAt(v uint32) *PromotionUpsert {
	u.Add(promotion.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *PromotionUpsert) SetAppID(v uuid.UUID) *PromotionUpsert {
	u.Set(promotion.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateAppID() *PromotionUpsert {
	u.SetExcluded(promotion.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *PromotionUpsert) SetGoodID(v uuid.UUID) *PromotionUpsert {
	u.Set(promotion.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateGoodID() *PromotionUpsert {
	u.SetExcluded(promotion.FieldGoodID)
	return u
}

// SetMessage sets the "message" field.
func (u *PromotionUpsert) SetMessage(v string) *PromotionUpsert {
	u.Set(promotion.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateMessage() *PromotionUpsert {
	u.SetExcluded(promotion.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *PromotionUpsert) ClearMessage() *PromotionUpsert {
	u.SetNull(promotion.FieldMessage)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *PromotionUpsert) SetStartAt(v uint32) *PromotionUpsert {
	u.Set(promotion.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateStartAt() *PromotionUpsert {
	u.SetExcluded(promotion.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *PromotionUpsert) AddStartAt(v uint32) *PromotionUpsert {
	u.Add(promotion.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionUpsert) ClearStartAt() *PromotionUpsert {
	u.SetNull(promotion.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *PromotionUpsert) SetEndAt(v uint32) *PromotionUpsert {
	u.Set(promotion.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionUpsert) UpdateEndAt() *PromotionUpsert {
	u.SetExcluded(promotion.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *PromotionUpsert) AddEndAt(v uint32) *PromotionUpsert {
	u.Add(promotion.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionUpsert) ClearEndAt() *PromotionUpsert {
	u.SetNull(promotion.FieldEndAt)
	return u
}

// SetPrice sets the "price" field.
func (u *PromotionUpsert) SetPrice(v decimal.Decimal) *PromotionUpsert {
	u.Set(promotion.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PromotionUpsert) UpdatePrice() *PromotionUpsert {
	u.SetExcluded(promotion.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *PromotionUpsert) ClearPrice() *PromotionUpsert {
	u.SetNull(promotion.FieldPrice)
	return u
}

// SetPosters sets the "posters" field.
func (u *PromotionUpsert) SetPosters(v []string) *PromotionUpsert {
	u.Set(promotion.FieldPosters, v)
	return u
}

// UpdatePosters sets the "posters" field to the value that was provided on create.
func (u *PromotionUpsert) UpdatePosters() *PromotionUpsert {
	u.SetExcluded(promotion.FieldPosters)
	return u
}

// ClearPosters clears the value of the "posters" field.
func (u *PromotionUpsert) ClearPosters() *PromotionUpsert {
	u.SetNull(promotion.FieldPosters)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Promotion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(promotion.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PromotionUpsertOne) UpdateNewValues() *PromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(promotion.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Promotion.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PromotionUpsertOne) Ignore() *PromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionUpsertOne) DoNothing() *PromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCreate.OnConflict
// documentation for more info.
func (u *PromotionUpsertOne) Update(set func(*PromotionUpsert)) *PromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PromotionUpsertOne) SetCreatedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PromotionUpsertOne) AddCreatedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateCreatedAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionUpsertOne) SetUpdatedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PromotionUpsertOne) AddUpdatedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateUpdatedAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionUpsertOne) SetDeletedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PromotionUpsertOne) AddDeletedAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateDeletedAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PromotionUpsertOne) SetAppID(v uuid.UUID) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateAppID() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PromotionUpsertOne) SetGoodID(v uuid.UUID) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateGoodID() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateGoodID()
	})
}

// SetMessage sets the "message" field.
func (u *PromotionUpsertOne) SetMessage(v string) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateMessage() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *PromotionUpsertOne) ClearMessage() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "start_at" field.
func (u *PromotionUpsertOne) SetStartAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *PromotionUpsertOne) AddStartAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateStartAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionUpsertOne) ClearStartAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *PromotionUpsertOne) SetEndAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *PromotionUpsertOne) AddEndAt(v uint32) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdateEndAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionUpsertOne) ClearEndAt() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearEndAt()
	})
}

// SetPrice sets the "price" field.
func (u *PromotionUpsertOne) SetPrice(v decimal.Decimal) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdatePrice() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *PromotionUpsertOne) ClearPrice() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearPrice()
	})
}

// SetPosters sets the "posters" field.
func (u *PromotionUpsertOne) SetPosters(v []string) *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.SetPosters(v)
	})
}

// UpdatePosters sets the "posters" field to the value that was provided on create.
func (u *PromotionUpsertOne) UpdatePosters() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdatePosters()
	})
}

// ClearPosters clears the value of the "posters" field.
func (u *PromotionUpsertOne) ClearPosters() *PromotionUpsertOne {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearPosters()
	})
}

// Exec executes the query.
func (u *PromotionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PromotionUpsertOne.ID is not supported by MySQL driver. Use PromotionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionCreateBulk is the builder for creating many Promotion entities in bulk.
type PromotionCreateBulk struct {
	config
	builders []*PromotionCreate
	conflict []sql.ConflictOption
}

// Save creates the Promotion entities in the database.
func (pcb *PromotionCreateBulk) Save(ctx context.Context) ([]*Promotion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Promotion, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PromotionCreateBulk) SaveX(ctx context.Context) []*Promotion {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PromotionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PromotionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Promotion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PromotionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionUpsertBulk {
	pcb.conflict = opts
	return &PromotionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Promotion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PromotionCreateBulk) OnConflictColumns(columns ...string) *PromotionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionUpsertBulk{
		create: pcb,
	}
}

// PromotionUpsertBulk is the builder for "upsert"-ing
// a bulk of Promotion nodes.
type PromotionUpsertBulk struct {
	create *PromotionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Promotion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(promotion.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PromotionUpsertBulk) UpdateNewValues() *PromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(promotion.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Promotion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PromotionUpsertBulk) Ignore() *PromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionUpsertBulk) DoNothing() *PromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionUpsertBulk) Update(set func(*PromotionUpsert)) *PromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PromotionUpsertBulk) SetCreatedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PromotionUpsertBulk) AddCreatedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateCreatedAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionUpsertBulk) SetUpdatedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PromotionUpsertBulk) AddUpdatedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateUpdatedAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionUpsertBulk) SetDeletedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PromotionUpsertBulk) AddDeletedAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateDeletedAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PromotionUpsertBulk) SetAppID(v uuid.UUID) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateAppID() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PromotionUpsertBulk) SetGoodID(v uuid.UUID) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateGoodID() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateGoodID()
	})
}

// SetMessage sets the "message" field.
func (u *PromotionUpsertBulk) SetMessage(v string) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateMessage() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *PromotionUpsertBulk) ClearMessage() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "start_at" field.
func (u *PromotionUpsertBulk) SetStartAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *PromotionUpsertBulk) AddStartAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateStartAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionUpsertBulk) ClearStartAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *PromotionUpsertBulk) SetEndAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *PromotionUpsertBulk) AddEndAt(v uint32) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdateEndAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionUpsertBulk) ClearEndAt() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearEndAt()
	})
}

// SetPrice sets the "price" field.
func (u *PromotionUpsertBulk) SetPrice(v decimal.Decimal) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdatePrice() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *PromotionUpsertBulk) ClearPrice() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearPrice()
	})
}

// SetPosters sets the "posters" field.
func (u *PromotionUpsertBulk) SetPosters(v []string) *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.SetPosters(v)
	})
}

// UpdatePosters sets the "posters" field to the value that was provided on create.
func (u *PromotionUpsertBulk) UpdatePosters() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.UpdatePosters()
	})
}

// ClearPosters clears the value of the "posters" field.
func (u *PromotionUpsertBulk) ClearPosters() *PromotionUpsertBulk {
	return u.Update(func(s *PromotionUpsert) {
		s.ClearPosters()
	})
}

// Exec executes the query.
func (u *PromotionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
