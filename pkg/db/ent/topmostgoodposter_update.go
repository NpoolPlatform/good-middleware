// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgoodposter"
	"github.com/google/uuid"
)

// TopMostGoodPosterUpdate is the builder for updating TopMostGoodPoster entities.
type TopMostGoodPosterUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostGoodPosterUpdate builder.
func (tmgpu *TopMostGoodPosterUpdate) Where(ps ...predicate.TopMostGoodPoster) *TopMostGoodPosterUpdate {
	tmgpu.mutation.Where(ps...)
	return tmgpu
}

// SetCreatedAt sets the "created_at" field.
func (tmgpu *TopMostGoodPosterUpdate) SetCreatedAt(u uint32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.ResetCreatedAt()
	tmgpu.mutation.SetCreatedAt(u)
	return tmgpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableCreatedAt(u *uint32) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetCreatedAt(*u)
	}
	return tmgpu
}

// AddCreatedAt adds u to the "created_at" field.
func (tmgpu *TopMostGoodPosterUpdate) AddCreatedAt(u int32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.AddCreatedAt(u)
	return tmgpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmgpu *TopMostGoodPosterUpdate) SetUpdatedAt(u uint32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.ResetUpdatedAt()
	tmgpu.mutation.SetUpdatedAt(u)
	return tmgpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmgpu *TopMostGoodPosterUpdate) AddUpdatedAt(u int32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.AddUpdatedAt(u)
	return tmgpu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmgpu *TopMostGoodPosterUpdate) SetDeletedAt(u uint32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.ResetDeletedAt()
	tmgpu.mutation.SetDeletedAt(u)
	return tmgpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableDeletedAt(u *uint32) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetDeletedAt(*u)
	}
	return tmgpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmgpu *TopMostGoodPosterUpdate) AddDeletedAt(u int32) *TopMostGoodPosterUpdate {
	tmgpu.mutation.AddDeletedAt(u)
	return tmgpu
}

// SetEntID sets the "ent_id" field.
func (tmgpu *TopMostGoodPosterUpdate) SetEntID(u uuid.UUID) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetEntID(u)
	return tmgpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableEntID(u *uuid.UUID) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetEntID(*u)
	}
	return tmgpu
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgpu *TopMostGoodPosterUpdate) SetTopMostGoodID(u uuid.UUID) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetTopMostGoodID(u)
	return tmgpu
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetTopMostGoodID(*u)
	}
	return tmgpu
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearTopMostGoodID() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearTopMostGoodID()
	return tmgpu
}

// SetPoster sets the "poster" field.
func (tmgpu *TopMostGoodPosterUpdate) SetPoster(s string) *TopMostGoodPosterUpdate {
	tmgpu.mutation.SetPoster(s)
	return tmgpu
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillablePoster(s *string) *TopMostGoodPosterUpdate {
	if s != nil {
		tmgpu.SetPoster(*s)
	}
	return tmgpu
}

// ClearPoster clears the value of the "poster" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearPoster() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearPoster()
	return tmgpu
}

// SetIndex sets the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) SetIndex(u uint8) *TopMostGoodPosterUpdate {
	tmgpu.mutation.ResetIndex()
	tmgpu.mutation.SetIndex(u)
	return tmgpu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgpu *TopMostGoodPosterUpdate) SetNillableIndex(u *uint8) *TopMostGoodPosterUpdate {
	if u != nil {
		tmgpu.SetIndex(*u)
	}
	return tmgpu
}

// AddIndex adds u to the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) AddIndex(u int8) *TopMostGoodPosterUpdate {
	tmgpu.mutation.AddIndex(u)
	return tmgpu
}

// ClearIndex clears the value of the "index" field.
func (tmgpu *TopMostGoodPosterUpdate) ClearIndex() *TopMostGoodPosterUpdate {
	tmgpu.mutation.ClearIndex()
	return tmgpu
}

// Mutation returns the TopMostGoodPosterMutation object of the builder.
func (tmgpu *TopMostGoodPosterUpdate) Mutation() *TopMostGoodPosterMutation {
	return tmgpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmgpu *TopMostGoodPosterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tmgpu.defaults(); err != nil {
		return 0, err
	}
	if len(tmgpu.hooks) == 0 {
		affected, err = tmgpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostGoodPosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmgpu.mutation = mutation
			affected, err = tmgpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmgpu.hooks) - 1; i >= 0; i-- {
			if tmgpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmgpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmgpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmgpu *TopMostGoodPosterUpdate) SaveX(ctx context.Context) int {
	affected, err := tmgpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmgpu *TopMostGoodPosterUpdate) Exec(ctx context.Context) error {
	_, err := tmgpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpu *TopMostGoodPosterUpdate) ExecX(ctx context.Context) {
	if err := tmgpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgpu *TopMostGoodPosterUpdate) defaults() error {
	if _, ok := tmgpu.mutation.UpdatedAt(); !ok {
		if topmostgoodposter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmostgoodposter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmostgoodposter.UpdateDefaultUpdatedAt()
		tmgpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgpu *TopMostGoodPosterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodPosterUpdate {
	tmgpu.modifiers = append(tmgpu.modifiers, modifiers...)
	return tmgpu
}

func (tmgpu *TopMostGoodPosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmostgoodposter.Table,
			Columns: topmostgoodposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodposter.FieldID,
			},
		},
	}
	if ps := tmgpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldCreatedAt,
		})
	}
	if value, ok := tmgpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldCreatedAt,
		})
	}
	if value, ok := tmgpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldUpdatedAt,
		})
	}
	if value, ok := tmgpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldUpdatedAt,
		})
	}
	if value, ok := tmgpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldDeletedAt,
		})
	}
	if value, ok := tmgpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldDeletedAt,
		})
	}
	if value, ok := tmgpu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodposter.FieldEntID,
		})
	}
	if value, ok := tmgpu.mutation.TopMostGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodposter.FieldTopMostGoodID,
		})
	}
	if tmgpu.mutation.TopMostGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: topmostgoodposter.FieldTopMostGoodID,
		})
	}
	if value, ok := tmgpu.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmostgoodposter.FieldPoster,
		})
	}
	if tmgpu.mutation.PosterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmostgoodposter.FieldPoster,
		})
	}
	if value, ok := tmgpu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	if value, ok := tmgpu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	if tmgpu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	_spec.Modifiers = tmgpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tmgpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TopMostGoodPosterUpdateOne is the builder for updating a single TopMostGoodPoster entity.
type TopMostGoodPosterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostGoodPosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetCreatedAt(u uint32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ResetCreatedAt()
	tmgpuo.mutation.SetCreatedAt(u)
	return tmgpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableCreatedAt(u *uint32) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetCreatedAt(*u)
	}
	return tmgpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) AddCreatedAt(u int32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.AddCreatedAt(u)
	return tmgpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetUpdatedAt(u uint32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ResetUpdatedAt()
	tmgpuo.mutation.SetUpdatedAt(u)
	return tmgpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) AddUpdatedAt(u int32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.AddUpdatedAt(u)
	return tmgpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetDeletedAt(u uint32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ResetDeletedAt()
	tmgpuo.mutation.SetDeletedAt(u)
	return tmgpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableDeletedAt(u *uint32) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetDeletedAt(*u)
	}
	return tmgpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) AddDeletedAt(u int32) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.AddDeletedAt(u)
	return tmgpuo
}

// SetEntID sets the "ent_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetEntID(u uuid.UUID) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetEntID(u)
	return tmgpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableEntID(u *uuid.UUID) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetEntID(*u)
	}
	return tmgpuo
}

// SetTopMostGoodID sets the "top_most_good_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetTopMostGoodID(u uuid.UUID) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetTopMostGoodID(u)
	return tmgpuo
}

// SetNillableTopMostGoodID sets the "top_most_good_id" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableTopMostGoodID(u *uuid.UUID) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetTopMostGoodID(*u)
	}
	return tmgpuo
}

// ClearTopMostGoodID clears the value of the "top_most_good_id" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearTopMostGoodID() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearTopMostGoodID()
	return tmgpuo
}

// SetPoster sets the "poster" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetPoster(s string) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.SetPoster(s)
	return tmgpuo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillablePoster(s *string) *TopMostGoodPosterUpdateOne {
	if s != nil {
		tmgpuo.SetPoster(*s)
	}
	return tmgpuo
}

// ClearPoster clears the value of the "poster" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearPoster() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearPoster()
	return tmgpuo
}

// SetIndex sets the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetIndex(u uint8) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ResetIndex()
	tmgpuo.mutation.SetIndex(u)
	return tmgpuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tmgpuo *TopMostGoodPosterUpdateOne) SetNillableIndex(u *uint8) *TopMostGoodPosterUpdateOne {
	if u != nil {
		tmgpuo.SetIndex(*u)
	}
	return tmgpuo
}

// AddIndex adds u to the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) AddIndex(u int8) *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.AddIndex(u)
	return tmgpuo
}

// ClearIndex clears the value of the "index" field.
func (tmgpuo *TopMostGoodPosterUpdateOne) ClearIndex() *TopMostGoodPosterUpdateOne {
	tmgpuo.mutation.ClearIndex()
	return tmgpuo
}

// Mutation returns the TopMostGoodPosterMutation object of the builder.
func (tmgpuo *TopMostGoodPosterUpdateOne) Mutation() *TopMostGoodPosterMutation {
	return tmgpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmgpuo *TopMostGoodPosterUpdateOne) Select(field string, fields ...string) *TopMostGoodPosterUpdateOne {
	tmgpuo.fields = append([]string{field}, fields...)
	return tmgpuo
}

// Save executes the query and returns the updated TopMostGoodPoster entity.
func (tmgpuo *TopMostGoodPosterUpdateOne) Save(ctx context.Context) (*TopMostGoodPoster, error) {
	var (
		err  error
		node *TopMostGoodPoster
	)
	if err := tmgpuo.defaults(); err != nil {
		return nil, err
	}
	if len(tmgpuo.hooks) == 0 {
		node, err = tmgpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostGoodPosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmgpuo.mutation = mutation
			node, err = tmgpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmgpuo.hooks) - 1; i >= 0; i-- {
			if tmgpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmgpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmgpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopMostGoodPoster)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopMostGoodPosterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmgpuo *TopMostGoodPosterUpdateOne) SaveX(ctx context.Context) *TopMostGoodPoster {
	node, err := tmgpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmgpuo *TopMostGoodPosterUpdateOne) Exec(ctx context.Context) error {
	_, err := tmgpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmgpuo *TopMostGoodPosterUpdateOne) ExecX(ctx context.Context) {
	if err := tmgpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmgpuo *TopMostGoodPosterUpdateOne) defaults() error {
	if _, ok := tmgpuo.mutation.UpdatedAt(); !ok {
		if topmostgoodposter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmostgoodposter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmostgoodposter.UpdateDefaultUpdatedAt()
		tmgpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmgpuo *TopMostGoodPosterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostGoodPosterUpdateOne {
	tmgpuo.modifiers = append(tmgpuo.modifiers, modifiers...)
	return tmgpuo
}

func (tmgpuo *TopMostGoodPosterUpdateOne) sqlSave(ctx context.Context) (_node *TopMostGoodPoster, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmostgoodposter.Table,
			Columns: topmostgoodposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: topmostgoodposter.FieldID,
			},
		},
	}
	id, ok := tmgpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopMostGoodPoster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmgpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmostgoodposter.FieldID)
		for _, f := range fields {
			if !topmostgoodposter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topmostgoodposter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmgpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmgpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldCreatedAt,
		})
	}
	if value, ok := tmgpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldCreatedAt,
		})
	}
	if value, ok := tmgpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldUpdatedAt,
		})
	}
	if value, ok := tmgpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldUpdatedAt,
		})
	}
	if value, ok := tmgpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldDeletedAt,
		})
	}
	if value, ok := tmgpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmostgoodposter.FieldDeletedAt,
		})
	}
	if value, ok := tmgpuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodposter.FieldEntID,
		})
	}
	if value, ok := tmgpuo.mutation.TopMostGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmostgoodposter.FieldTopMostGoodID,
		})
	}
	if tmgpuo.mutation.TopMostGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: topmostgoodposter.FieldTopMostGoodID,
		})
	}
	if value, ok := tmgpuo.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmostgoodposter.FieldPoster,
		})
	}
	if tmgpuo.mutation.PosterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmostgoodposter.FieldPoster,
		})
	}
	if value, ok := tmgpuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	if value, ok := tmgpuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	if tmgpuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: topmostgoodposter.FieldIndex,
		})
	}
	_spec.Modifiers = tmgpuo.modifiers
	_node = &TopMostGoodPoster{config: tmgpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmgpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmostgoodposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
