// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/apppledge"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppPledgeUpdate is the builder for updating AppPledge entities.
type AppPledgeUpdate struct {
	config
	hooks     []Hook
	mutation  *AppPledgeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppPledgeUpdate builder.
func (apu *AppPledgeUpdate) Where(ps ...predicate.AppPledge) *AppPledgeUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetCreatedAt sets the "created_at" field.
func (apu *AppPledgeUpdate) SetCreatedAt(u uint32) *AppPledgeUpdate {
	apu.mutation.ResetCreatedAt()
	apu.mutation.SetCreatedAt(u)
	return apu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableCreatedAt(u *uint32) *AppPledgeUpdate {
	if u != nil {
		apu.SetCreatedAt(*u)
	}
	return apu
}

// AddCreatedAt adds u to the "created_at" field.
func (apu *AppPledgeUpdate) AddCreatedAt(u int32) *AppPledgeUpdate {
	apu.mutation.AddCreatedAt(u)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AppPledgeUpdate) SetUpdatedAt(u uint32) *AppPledgeUpdate {
	apu.mutation.ResetUpdatedAt()
	apu.mutation.SetUpdatedAt(u)
	return apu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (apu *AppPledgeUpdate) AddUpdatedAt(u int32) *AppPledgeUpdate {
	apu.mutation.AddUpdatedAt(u)
	return apu
}

// SetDeletedAt sets the "deleted_at" field.
func (apu *AppPledgeUpdate) SetDeletedAt(u uint32) *AppPledgeUpdate {
	apu.mutation.ResetDeletedAt()
	apu.mutation.SetDeletedAt(u)
	return apu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableDeletedAt(u *uint32) *AppPledgeUpdate {
	if u != nil {
		apu.SetDeletedAt(*u)
	}
	return apu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (apu *AppPledgeUpdate) AddDeletedAt(u int32) *AppPledgeUpdate {
	apu.mutation.AddDeletedAt(u)
	return apu
}

// SetEntID sets the "ent_id" field.
func (apu *AppPledgeUpdate) SetEntID(u uuid.UUID) *AppPledgeUpdate {
	apu.mutation.SetEntID(u)
	return apu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableEntID(u *uuid.UUID) *AppPledgeUpdate {
	if u != nil {
		apu.SetEntID(*u)
	}
	return apu
}

// SetAppGoodID sets the "app_good_id" field.
func (apu *AppPledgeUpdate) SetAppGoodID(u uuid.UUID) *AppPledgeUpdate {
	apu.mutation.SetAppGoodID(u)
	return apu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppPledgeUpdate {
	if u != nil {
		apu.SetAppGoodID(*u)
	}
	return apu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (apu *AppPledgeUpdate) ClearAppGoodID() *AppPledgeUpdate {
	apu.mutation.ClearAppGoodID()
	return apu
}

// SetServiceStartAt sets the "service_start_at" field.
func (apu *AppPledgeUpdate) SetServiceStartAt(u uint32) *AppPledgeUpdate {
	apu.mutation.ResetServiceStartAt()
	apu.mutation.SetServiceStartAt(u)
	return apu
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableServiceStartAt(u *uint32) *AppPledgeUpdate {
	if u != nil {
		apu.SetServiceStartAt(*u)
	}
	return apu
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (apu *AppPledgeUpdate) AddServiceStartAt(u int32) *AppPledgeUpdate {
	apu.mutation.AddServiceStartAt(u)
	return apu
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (apu *AppPledgeUpdate) ClearServiceStartAt() *AppPledgeUpdate {
	apu.mutation.ClearServiceStartAt()
	return apu
}

// SetStartMode sets the "start_mode" field.
func (apu *AppPledgeUpdate) SetStartMode(s string) *AppPledgeUpdate {
	apu.mutation.SetStartMode(s)
	return apu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableStartMode(s *string) *AppPledgeUpdate {
	if s != nil {
		apu.SetStartMode(*s)
	}
	return apu
}

// ClearStartMode clears the value of the "start_mode" field.
func (apu *AppPledgeUpdate) ClearStartMode() *AppPledgeUpdate {
	apu.mutation.ClearStartMode()
	return apu
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (apu *AppPledgeUpdate) SetEnableSetCommission(b bool) *AppPledgeUpdate {
	apu.mutation.SetEnableSetCommission(b)
	return apu
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (apu *AppPledgeUpdate) SetNillableEnableSetCommission(b *bool) *AppPledgeUpdate {
	if b != nil {
		apu.SetEnableSetCommission(*b)
	}
	return apu
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (apu *AppPledgeUpdate) ClearEnableSetCommission() *AppPledgeUpdate {
	apu.mutation.ClearEnableSetCommission()
	return apu
}

// Mutation returns the AppPledgeMutation object of the builder.
func (apu *AppPledgeUpdate) Mutation() *AppPledgeMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPledgeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := apu.defaults(); err != nil {
		return 0, err
	}
	if len(apu.hooks) == 0 {
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppPledgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPledgeUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPledgeUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPledgeUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AppPledgeUpdate) defaults() error {
	if _, ok := apu.mutation.UpdatedAt(); !ok {
		if apppledge.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppledge.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apppledge.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apu *AppPledgeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPledgeUpdate {
	apu.modifiers = append(apu.modifiers, modifiers...)
	return apu
}

func (apu *AppPledgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apppledge.Table,
			Columns: apppledge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: apppledge.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldCreatedAt,
		})
	}
	if value, ok := apu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldCreatedAt,
		})
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldUpdatedAt,
		})
	}
	if value, ok := apu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldUpdatedAt,
		})
	}
	if value, ok := apu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldDeletedAt,
		})
	}
	if value, ok := apu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldDeletedAt,
		})
	}
	if value, ok := apu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppledge.FieldEntID,
		})
	}
	if value, ok := apu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppledge.FieldAppGoodID,
		})
	}
	if apu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: apppledge.FieldAppGoodID,
		})
	}
	if value, ok := apu.mutation.ServiceStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if value, ok := apu.mutation.AddedServiceStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if apu.mutation.ServiceStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if value, ok := apu.mutation.StartMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppledge.FieldStartMode,
		})
	}
	if apu.mutation.StartModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: apppledge.FieldStartMode,
		})
	}
	if value, ok := apu.mutation.EnableSetCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: apppledge.FieldEnableSetCommission,
		})
	}
	if apu.mutation.EnableSetCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: apppledge.FieldEnableSetCommission,
		})
	}
	_spec.Modifiers = apu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppledge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppPledgeUpdateOne is the builder for updating a single AppPledge entity.
type AppPledgeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppPledgeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (apuo *AppPledgeUpdateOne) SetCreatedAt(u uint32) *AppPledgeUpdateOne {
	apuo.mutation.ResetCreatedAt()
	apuo.mutation.SetCreatedAt(u)
	return apuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableCreatedAt(u *uint32) *AppPledgeUpdateOne {
	if u != nil {
		apuo.SetCreatedAt(*u)
	}
	return apuo
}

// AddCreatedAt adds u to the "created_at" field.
func (apuo *AppPledgeUpdateOne) AddCreatedAt(u int32) *AppPledgeUpdateOne {
	apuo.mutation.AddCreatedAt(u)
	return apuo
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AppPledgeUpdateOne) SetUpdatedAt(u uint32) *AppPledgeUpdateOne {
	apuo.mutation.ResetUpdatedAt()
	apuo.mutation.SetUpdatedAt(u)
	return apuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (apuo *AppPledgeUpdateOne) AddUpdatedAt(u int32) *AppPledgeUpdateOne {
	apuo.mutation.AddUpdatedAt(u)
	return apuo
}

// SetDeletedAt sets the "deleted_at" field.
func (apuo *AppPledgeUpdateOne) SetDeletedAt(u uint32) *AppPledgeUpdateOne {
	apuo.mutation.ResetDeletedAt()
	apuo.mutation.SetDeletedAt(u)
	return apuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableDeletedAt(u *uint32) *AppPledgeUpdateOne {
	if u != nil {
		apuo.SetDeletedAt(*u)
	}
	return apuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (apuo *AppPledgeUpdateOne) AddDeletedAt(u int32) *AppPledgeUpdateOne {
	apuo.mutation.AddDeletedAt(u)
	return apuo
}

// SetEntID sets the "ent_id" field.
func (apuo *AppPledgeUpdateOne) SetEntID(u uuid.UUID) *AppPledgeUpdateOne {
	apuo.mutation.SetEntID(u)
	return apuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableEntID(u *uuid.UUID) *AppPledgeUpdateOne {
	if u != nil {
		apuo.SetEntID(*u)
	}
	return apuo
}

// SetAppGoodID sets the "app_good_id" field.
func (apuo *AppPledgeUpdateOne) SetAppGoodID(u uuid.UUID) *AppPledgeUpdateOne {
	apuo.mutation.SetAppGoodID(u)
	return apuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppPledgeUpdateOne {
	if u != nil {
		apuo.SetAppGoodID(*u)
	}
	return apuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (apuo *AppPledgeUpdateOne) ClearAppGoodID() *AppPledgeUpdateOne {
	apuo.mutation.ClearAppGoodID()
	return apuo
}

// SetServiceStartAt sets the "service_start_at" field.
func (apuo *AppPledgeUpdateOne) SetServiceStartAt(u uint32) *AppPledgeUpdateOne {
	apuo.mutation.ResetServiceStartAt()
	apuo.mutation.SetServiceStartAt(u)
	return apuo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableServiceStartAt(u *uint32) *AppPledgeUpdateOne {
	if u != nil {
		apuo.SetServiceStartAt(*u)
	}
	return apuo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (apuo *AppPledgeUpdateOne) AddServiceStartAt(u int32) *AppPledgeUpdateOne {
	apuo.mutation.AddServiceStartAt(u)
	return apuo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (apuo *AppPledgeUpdateOne) ClearServiceStartAt() *AppPledgeUpdateOne {
	apuo.mutation.ClearServiceStartAt()
	return apuo
}

// SetStartMode sets the "start_mode" field.
func (apuo *AppPledgeUpdateOne) SetStartMode(s string) *AppPledgeUpdateOne {
	apuo.mutation.SetStartMode(s)
	return apuo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableStartMode(s *string) *AppPledgeUpdateOne {
	if s != nil {
		apuo.SetStartMode(*s)
	}
	return apuo
}

// ClearStartMode clears the value of the "start_mode" field.
func (apuo *AppPledgeUpdateOne) ClearStartMode() *AppPledgeUpdateOne {
	apuo.mutation.ClearStartMode()
	return apuo
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (apuo *AppPledgeUpdateOne) SetEnableSetCommission(b bool) *AppPledgeUpdateOne {
	apuo.mutation.SetEnableSetCommission(b)
	return apuo
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (apuo *AppPledgeUpdateOne) SetNillableEnableSetCommission(b *bool) *AppPledgeUpdateOne {
	if b != nil {
		apuo.SetEnableSetCommission(*b)
	}
	return apuo
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (apuo *AppPledgeUpdateOne) ClearEnableSetCommission() *AppPledgeUpdateOne {
	apuo.mutation.ClearEnableSetCommission()
	return apuo
}

// Mutation returns the AppPledgeMutation object of the builder.
func (apuo *AppPledgeUpdateOne) Mutation() *AppPledgeMutation {
	return apuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPledgeUpdateOne) Select(field string, fields ...string) *AppPledgeUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPledge entity.
func (apuo *AppPledgeUpdateOne) Save(ctx context.Context) (*AppPledge, error) {
	var (
		err  error
		node *AppPledge
	)
	if err := apuo.defaults(); err != nil {
		return nil, err
	}
	if len(apuo.hooks) == 0 {
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppPledgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, apuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppPledge)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppPledgeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPledgeUpdateOne) SaveX(ctx context.Context) *AppPledge {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPledgeUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPledgeUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AppPledgeUpdateOne) defaults() error {
	if _, ok := apuo.mutation.UpdatedAt(); !ok {
		if apppledge.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apppledge.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apppledge.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apuo *AppPledgeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPledgeUpdateOne {
	apuo.modifiers = append(apuo.modifiers, modifiers...)
	return apuo
}

func (apuo *AppPledgeUpdateOne) sqlSave(ctx context.Context) (_node *AppPledge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apppledge.Table,
			Columns: apppledge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: apppledge.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPledge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppledge.FieldID)
		for _, f := range fields {
			if !apppledge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apppledge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldCreatedAt,
		})
	}
	if value, ok := apuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldCreatedAt,
		})
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldUpdatedAt,
		})
	}
	if value, ok := apuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldUpdatedAt,
		})
	}
	if value, ok := apuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldDeletedAt,
		})
	}
	if value, ok := apuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldDeletedAt,
		})
	}
	if value, ok := apuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppledge.FieldEntID,
		})
	}
	if value, ok := apuo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppledge.FieldAppGoodID,
		})
	}
	if apuo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: apppledge.FieldAppGoodID,
		})
	}
	if value, ok := apuo.mutation.ServiceStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if value, ok := apuo.mutation.AddedServiceStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if apuo.mutation.ServiceStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: apppledge.FieldServiceStartAt,
		})
	}
	if value, ok := apuo.mutation.StartMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppledge.FieldStartMode,
		})
	}
	if apuo.mutation.StartModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: apppledge.FieldStartMode,
		})
	}
	if value, ok := apuo.mutation.EnableSetCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: apppledge.FieldEnableSetCommission,
		})
	}
	if apuo.mutation.EnableSetCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: apppledge.FieldEnableSetCommission,
		})
	}
	_spec.Modifiers = apuo.modifiers
	_node = &AppPledge{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppledge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
