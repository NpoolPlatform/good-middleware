// Code generated by ent, DO NOT EDIT.

package subgood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// MainGoodID applies equality check predicate on the "main_good_id" field. It's identical to MainGoodIDEQ.
func MainGoodID(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainGoodID), v))
	})
}

// SubGoodID applies equality check predicate on the "sub_good_id" field. It's identical to SubGoodIDEQ.
func SubGoodID(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubGoodID), v))
	})
}

// Must applies equality check predicate on the "must" field. It's identical to MustEQ.
func Must(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMust), v))
	})
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// MainGoodIDEQ applies the EQ predicate on the "main_good_id" field.
func MainGoodIDEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainGoodID), v))
	})
}

// MainGoodIDNEQ applies the NEQ predicate on the "main_good_id" field.
func MainGoodIDNEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMainGoodID), v))
	})
}

// MainGoodIDIn applies the In predicate on the "main_good_id" field.
func MainGoodIDIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMainGoodID), v...))
	})
}

// MainGoodIDNotIn applies the NotIn predicate on the "main_good_id" field.
func MainGoodIDNotIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMainGoodID), v...))
	})
}

// MainGoodIDGT applies the GT predicate on the "main_good_id" field.
func MainGoodIDGT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMainGoodID), v))
	})
}

// MainGoodIDGTE applies the GTE predicate on the "main_good_id" field.
func MainGoodIDGTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMainGoodID), v))
	})
}

// MainGoodIDLT applies the LT predicate on the "main_good_id" field.
func MainGoodIDLT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMainGoodID), v))
	})
}

// MainGoodIDLTE applies the LTE predicate on the "main_good_id" field.
func MainGoodIDLTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMainGoodID), v))
	})
}

// SubGoodIDEQ applies the EQ predicate on the "sub_good_id" field.
func SubGoodIDEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubGoodID), v))
	})
}

// SubGoodIDNEQ applies the NEQ predicate on the "sub_good_id" field.
func SubGoodIDNEQ(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubGoodID), v))
	})
}

// SubGoodIDIn applies the In predicate on the "sub_good_id" field.
func SubGoodIDIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubGoodID), v...))
	})
}

// SubGoodIDNotIn applies the NotIn predicate on the "sub_good_id" field.
func SubGoodIDNotIn(vs ...uuid.UUID) predicate.SubGood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubGoodID), v...))
	})
}

// SubGoodIDGT applies the GT predicate on the "sub_good_id" field.
func SubGoodIDGT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubGoodID), v))
	})
}

// SubGoodIDGTE applies the GTE predicate on the "sub_good_id" field.
func SubGoodIDGTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubGoodID), v))
	})
}

// SubGoodIDLT applies the LT predicate on the "sub_good_id" field.
func SubGoodIDLT(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubGoodID), v))
	})
}

// SubGoodIDLTE applies the LTE predicate on the "sub_good_id" field.
func SubGoodIDLTE(v uuid.UUID) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubGoodID), v))
	})
}

// MustEQ applies the EQ predicate on the "must" field.
func MustEQ(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMust), v))
	})
}

// MustNEQ applies the NEQ predicate on the "must" field.
func MustNEQ(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMust), v))
	})
}

// MustIsNil applies the IsNil predicate on the "must" field.
func MustIsNil() predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMust)))
	})
}

// MustNotNil applies the NotNil predicate on the "must" field.
func MustNotNil() predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMust)))
	})
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v bool) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommission), v))
	})
}

// CommissionIsNil applies the IsNil predicate on the "commission" field.
func CommissionIsNil() predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommission)))
	})
}

// CommissionNotNil applies the NotNil predicate on the "commission" field.
func CommissionNotNil() predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommission)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubGood) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubGood) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubGood) predicate.SubGood {
	return predicate.SubGood(func(s *sql.Selector) {
		p(s.Not())
	})
}
