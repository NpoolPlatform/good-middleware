// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodmalfunction"
	"github.com/google/uuid"
)

// GoodMalfunctionCreate is the builder for creating a GoodMalfunction entity.
type GoodMalfunctionCreate struct {
	config
	mutation *GoodMalfunctionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gmc *GoodMalfunctionCreate) SetCreatedAt(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetCreatedAt(u)
	return gmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableCreatedAt(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetCreatedAt(*u)
	}
	return gmc
}

// SetUpdatedAt sets the "updated_at" field.
func (gmc *GoodMalfunctionCreate) SetUpdatedAt(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetUpdatedAt(u)
	return gmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableUpdatedAt(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetUpdatedAt(*u)
	}
	return gmc
}

// SetDeletedAt sets the "deleted_at" field.
func (gmc *GoodMalfunctionCreate) SetDeletedAt(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetDeletedAt(u)
	return gmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableDeletedAt(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetDeletedAt(*u)
	}
	return gmc
}

// SetEntID sets the "ent_id" field.
func (gmc *GoodMalfunctionCreate) SetEntID(u uuid.UUID) *GoodMalfunctionCreate {
	gmc.mutation.SetEntID(u)
	return gmc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableEntID(u *uuid.UUID) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetEntID(*u)
	}
	return gmc
}

// SetGoodID sets the "good_id" field.
func (gmc *GoodMalfunctionCreate) SetGoodID(u uuid.UUID) *GoodMalfunctionCreate {
	gmc.mutation.SetGoodID(u)
	return gmc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableGoodID(u *uuid.UUID) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetGoodID(*u)
	}
	return gmc
}

// SetTitle sets the "title" field.
func (gmc *GoodMalfunctionCreate) SetTitle(s string) *GoodMalfunctionCreate {
	gmc.mutation.SetTitle(s)
	return gmc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableTitle(s *string) *GoodMalfunctionCreate {
	if s != nil {
		gmc.SetTitle(*s)
	}
	return gmc
}

// SetMessage sets the "message" field.
func (gmc *GoodMalfunctionCreate) SetMessage(s string) *GoodMalfunctionCreate {
	gmc.mutation.SetMessage(s)
	return gmc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableMessage(s *string) *GoodMalfunctionCreate {
	if s != nil {
		gmc.SetMessage(*s)
	}
	return gmc
}

// SetStartAt sets the "start_at" field.
func (gmc *GoodMalfunctionCreate) SetStartAt(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetStartAt(u)
	return gmc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableStartAt(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetStartAt(*u)
	}
	return gmc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (gmc *GoodMalfunctionCreate) SetDurationSeconds(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetDurationSeconds(u)
	return gmc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableDurationSeconds(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetDurationSeconds(*u)
	}
	return gmc
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (gmc *GoodMalfunctionCreate) SetCompensateSeconds(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetCompensateSeconds(u)
	return gmc
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (gmc *GoodMalfunctionCreate) SetNillableCompensateSeconds(u *uint32) *GoodMalfunctionCreate {
	if u != nil {
		gmc.SetCompensateSeconds(*u)
	}
	return gmc
}

// SetID sets the "id" field.
func (gmc *GoodMalfunctionCreate) SetID(u uint32) *GoodMalfunctionCreate {
	gmc.mutation.SetID(u)
	return gmc
}

// Mutation returns the GoodMalfunctionMutation object of the builder.
func (gmc *GoodMalfunctionCreate) Mutation() *GoodMalfunctionMutation {
	return gmc.mutation
}

// Save creates the GoodMalfunction in the database.
func (gmc *GoodMalfunctionCreate) Save(ctx context.Context) (*GoodMalfunction, error) {
	var (
		err  error
		node *GoodMalfunction
	)
	if err := gmc.defaults(); err != nil {
		return nil, err
	}
	if len(gmc.hooks) == 0 {
		if err = gmc.check(); err != nil {
			return nil, err
		}
		node, err = gmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMalfunctionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gmc.check(); err != nil {
				return nil, err
			}
			gmc.mutation = mutation
			if node, err = gmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gmc.hooks) - 1; i >= 0; i-- {
			if gmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodMalfunction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodMalfunctionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gmc *GoodMalfunctionCreate) SaveX(ctx context.Context) *GoodMalfunction {
	v, err := gmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmc *GoodMalfunctionCreate) Exec(ctx context.Context) error {
	_, err := gmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmc *GoodMalfunctionCreate) ExecX(ctx context.Context) {
	if err := gmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmc *GoodMalfunctionCreate) defaults() error {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		if goodmalfunction.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.DefaultCreatedAt()
		gmc.mutation.SetCreatedAt(v)
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		if goodmalfunction.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.DefaultUpdatedAt()
		gmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gmc.mutation.DeletedAt(); !ok {
		if goodmalfunction.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.DefaultDeletedAt()
		gmc.mutation.SetDeletedAt(v)
	}
	if _, ok := gmc.mutation.EntID(); !ok {
		if goodmalfunction.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.DefaultEntID()
		gmc.mutation.SetEntID(v)
	}
	if _, ok := gmc.mutation.GoodID(); !ok {
		if goodmalfunction.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.DefaultGoodID()
		gmc.mutation.SetGoodID(v)
	}
	if _, ok := gmc.mutation.Title(); !ok {
		v := goodmalfunction.DefaultTitle
		gmc.mutation.SetTitle(v)
	}
	if _, ok := gmc.mutation.Message(); !ok {
		v := goodmalfunction.DefaultMessage
		gmc.mutation.SetMessage(v)
	}
	if _, ok := gmc.mutation.StartAt(); !ok {
		v := goodmalfunction.DefaultStartAt
		gmc.mutation.SetStartAt(v)
	}
	if _, ok := gmc.mutation.DurationSeconds(); !ok {
		v := goodmalfunction.DefaultDurationSeconds
		gmc.mutation.SetDurationSeconds(v)
	}
	if _, ok := gmc.mutation.CompensateSeconds(); !ok {
		v := goodmalfunction.DefaultCompensateSeconds
		gmc.mutation.SetCompensateSeconds(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gmc *GoodMalfunctionCreate) check() error {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodMalfunction.created_at"`)}
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodMalfunction.updated_at"`)}
	}
	if _, ok := gmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodMalfunction.deleted_at"`)}
	}
	if _, ok := gmc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "GoodMalfunction.ent_id"`)}
	}
	return nil
}

func (gmc *GoodMalfunctionCreate) sqlSave(ctx context.Context) (*GoodMalfunction, error) {
	_node, _spec := gmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (gmc *GoodMalfunctionCreate) createSpec() (*GoodMalfunction, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodMalfunction{config: gmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodmalfunction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodmalfunction.FieldID,
			},
		}
	)
	_spec.OnConflict = gmc.conflict
	if id, ok := gmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gmc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gmc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := gmc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gmc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := gmc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := gmc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := gmc.mutation.DurationSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDurationSeconds,
		})
		_node.DurationSeconds = value
	}
	if value, ok := gmc.mutation.CompensateSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
		_node.CompensateSeconds = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodMalfunction.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodMalfunctionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gmc *GoodMalfunctionCreate) OnConflict(opts ...sql.ConflictOption) *GoodMalfunctionUpsertOne {
	gmc.conflict = opts
	return &GoodMalfunctionUpsertOne{
		create: gmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gmc *GoodMalfunctionCreate) OnConflictColumns(columns ...string) *GoodMalfunctionUpsertOne {
	gmc.conflict = append(gmc.conflict, sql.ConflictColumns(columns...))
	return &GoodMalfunctionUpsertOne{
		create: gmc,
	}
}

type (
	// GoodMalfunctionUpsertOne is the builder for "upsert"-ing
	//  one GoodMalfunction node.
	GoodMalfunctionUpsertOne struct {
		create *GoodMalfunctionCreate
	}

	// GoodMalfunctionUpsert is the "OnConflict" setter.
	GoodMalfunctionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodMalfunctionUpsert) SetCreatedAt(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateCreatedAt() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodMalfunctionUpsert) AddCreatedAt(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodMalfunctionUpsert) SetUpdatedAt(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateUpdatedAt() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodMalfunctionUpsert) AddUpdatedAt(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodMalfunctionUpsert) SetDeletedAt(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateDeletedAt() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodMalfunctionUpsert) AddDeletedAt(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *GoodMalfunctionUpsert) SetEntID(v uuid.UUID) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateEntID() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodMalfunctionUpsert) SetGoodID(v uuid.UUID) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateGoodID() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodMalfunctionUpsert) ClearGoodID() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldGoodID)
	return u
}

// SetTitle sets the "title" field.
func (u *GoodMalfunctionUpsert) SetTitle(v string) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateTitle() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *GoodMalfunctionUpsert) ClearTitle() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldTitle)
	return u
}

// SetMessage sets the "message" field.
func (u *GoodMalfunctionUpsert) SetMessage(v string) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateMessage() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *GoodMalfunctionUpsert) ClearMessage() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldMessage)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *GoodMalfunctionUpsert) SetStartAt(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateStartAt() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodMalfunctionUpsert) AddStartAt(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodMalfunctionUpsert) ClearStartAt() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldStartAt)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *GoodMalfunctionUpsert) SetDurationSeconds(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateDurationSeconds() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldDurationSeconds)
	return u
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *GoodMalfunctionUpsert) AddDurationSeconds(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldDurationSeconds, v)
	return u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *GoodMalfunctionUpsert) ClearDurationSeconds() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldDurationSeconds)
	return u
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *GoodMalfunctionUpsert) SetCompensateSeconds(v uint32) *GoodMalfunctionUpsert {
	u.Set(goodmalfunction.FieldCompensateSeconds, v)
	return u
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsert) UpdateCompensateSeconds() *GoodMalfunctionUpsert {
	u.SetExcluded(goodmalfunction.FieldCompensateSeconds)
	return u
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *GoodMalfunctionUpsert) AddCompensateSeconds(v uint32) *GoodMalfunctionUpsert {
	u.Add(goodmalfunction.FieldCompensateSeconds, v)
	return u
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *GoodMalfunctionUpsert) ClearCompensateSeconds() *GoodMalfunctionUpsert {
	u.SetNull(goodmalfunction.FieldCompensateSeconds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodmalfunction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodMalfunctionUpsertOne) UpdateNewValues() *GoodMalfunctionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodmalfunction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodMalfunctionUpsertOne) Ignore() *GoodMalfunctionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodMalfunctionUpsertOne) DoNothing() *GoodMalfunctionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodMalfunctionCreate.OnConflict
// documentation for more info.
func (u *GoodMalfunctionUpsertOne) Update(set func(*GoodMalfunctionUpsert)) *GoodMalfunctionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodMalfunctionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodMalfunctionUpsertOne) SetCreatedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodMalfunctionUpsertOne) AddCreatedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateCreatedAt() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodMalfunctionUpsertOne) SetUpdatedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodMalfunctionUpsertOne) AddUpdatedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateUpdatedAt() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodMalfunctionUpsertOne) SetDeletedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodMalfunctionUpsertOne) AddDeletedAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateDeletedAt() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodMalfunctionUpsertOne) SetEntID(v uuid.UUID) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateEntID() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodMalfunctionUpsertOne) SetGoodID(v uuid.UUID) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateGoodID() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodMalfunctionUpsertOne) ClearGoodID() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearGoodID()
	})
}

// SetTitle sets the "title" field.
func (u *GoodMalfunctionUpsertOne) SetTitle(v string) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateTitle() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodMalfunctionUpsertOne) ClearTitle() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *GoodMalfunctionUpsertOne) SetMessage(v string) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateMessage() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *GoodMalfunctionUpsertOne) ClearMessage() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodMalfunctionUpsertOne) SetStartAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodMalfunctionUpsertOne) AddStartAt(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateStartAt() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodMalfunctionUpsertOne) ClearStartAt() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *GoodMalfunctionUpsertOne) SetDurationSeconds(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *GoodMalfunctionUpsertOne) AddDurationSeconds(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateDurationSeconds() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *GoodMalfunctionUpsertOne) ClearDurationSeconds() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertOne) SetCompensateSeconds(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetCompensateSeconds(v)
	})
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertOne) AddCompensateSeconds(v uint32) *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddCompensateSeconds(v)
	})
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertOne) UpdateCompensateSeconds() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateCompensateSeconds()
	})
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertOne) ClearCompensateSeconds() *GoodMalfunctionUpsertOne {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearCompensateSeconds()
	})
}

// Exec executes the query.
func (u *GoodMalfunctionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodMalfunctionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodMalfunctionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodMalfunctionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodMalfunctionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodMalfunctionCreateBulk is the builder for creating many GoodMalfunction entities in bulk.
type GoodMalfunctionCreateBulk struct {
	config
	builders []*GoodMalfunctionCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodMalfunction entities in the database.
func (gmcb *GoodMalfunctionCreateBulk) Save(ctx context.Context) ([]*GoodMalfunction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gmcb.builders))
	nodes := make([]*GoodMalfunction, len(gmcb.builders))
	mutators := make([]Mutator, len(gmcb.builders))
	for i := range gmcb.builders {
		func(i int, root context.Context) {
			builder := gmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodMalfunctionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmcb *GoodMalfunctionCreateBulk) SaveX(ctx context.Context) []*GoodMalfunction {
	v, err := gmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmcb *GoodMalfunctionCreateBulk) Exec(ctx context.Context) error {
	_, err := gmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmcb *GoodMalfunctionCreateBulk) ExecX(ctx context.Context) {
	if err := gmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodMalfunction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodMalfunctionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gmcb *GoodMalfunctionCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodMalfunctionUpsertBulk {
	gmcb.conflict = opts
	return &GoodMalfunctionUpsertBulk{
		create: gmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gmcb *GoodMalfunctionCreateBulk) OnConflictColumns(columns ...string) *GoodMalfunctionUpsertBulk {
	gmcb.conflict = append(gmcb.conflict, sql.ConflictColumns(columns...))
	return &GoodMalfunctionUpsertBulk{
		create: gmcb,
	}
}

// GoodMalfunctionUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodMalfunction nodes.
type GoodMalfunctionUpsertBulk struct {
	create *GoodMalfunctionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodmalfunction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GoodMalfunctionUpsertBulk) UpdateNewValues() *GoodMalfunctionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodmalfunction.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodMalfunction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodMalfunctionUpsertBulk) Ignore() *GoodMalfunctionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodMalfunctionUpsertBulk) DoNothing() *GoodMalfunctionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodMalfunctionCreateBulk.OnConflict
// documentation for more info.
func (u *GoodMalfunctionUpsertBulk) Update(set func(*GoodMalfunctionUpsert)) *GoodMalfunctionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodMalfunctionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodMalfunctionUpsertBulk) SetCreatedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodMalfunctionUpsertBulk) AddCreatedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateCreatedAt() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodMalfunctionUpsertBulk) SetUpdatedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodMalfunctionUpsertBulk) AddUpdatedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateUpdatedAt() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodMalfunctionUpsertBulk) SetDeletedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodMalfunctionUpsertBulk) AddDeletedAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateDeletedAt() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *GoodMalfunctionUpsertBulk) SetEntID(v uuid.UUID) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateEntID() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodMalfunctionUpsertBulk) SetGoodID(v uuid.UUID) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateGoodID() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodMalfunctionUpsertBulk) ClearGoodID() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearGoodID()
	})
}

// SetTitle sets the "title" field.
func (u *GoodMalfunctionUpsertBulk) SetTitle(v string) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateTitle() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodMalfunctionUpsertBulk) ClearTitle() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearTitle()
	})
}

// SetMessage sets the "message" field.
func (u *GoodMalfunctionUpsertBulk) SetMessage(v string) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateMessage() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *GoodMalfunctionUpsertBulk) ClearMessage() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodMalfunctionUpsertBulk) SetStartAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodMalfunctionUpsertBulk) AddStartAt(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateStartAt() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodMalfunctionUpsertBulk) ClearStartAt() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearStartAt()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *GoodMalfunctionUpsertBulk) SetDurationSeconds(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetDurationSeconds(v)
	})
}

// AddDurationSeconds adds v to the "duration_seconds" field.
func (u *GoodMalfunctionUpsertBulk) AddDurationSeconds(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateDurationSeconds() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateDurationSeconds()
	})
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (u *GoodMalfunctionUpsertBulk) ClearDurationSeconds() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearDurationSeconds()
	})
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertBulk) SetCompensateSeconds(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.SetCompensateSeconds(v)
	})
}

// AddCompensateSeconds adds v to the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertBulk) AddCompensateSeconds(v uint32) *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.AddCompensateSeconds(v)
	})
}

// UpdateCompensateSeconds sets the "compensate_seconds" field to the value that was provided on create.
func (u *GoodMalfunctionUpsertBulk) UpdateCompensateSeconds() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.UpdateCompensateSeconds()
	})
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (u *GoodMalfunctionUpsertBulk) ClearCompensateSeconds() *GoodMalfunctionUpsertBulk {
	return u.Update(func(s *GoodMalfunctionUpsert) {
		s.ClearCompensateSeconds()
	})
}

// Exec executes the query.
func (u *GoodMalfunctionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodMalfunctionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodMalfunctionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodMalfunctionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
