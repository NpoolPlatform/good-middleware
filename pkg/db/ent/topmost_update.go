// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmost"
	"github.com/google/uuid"
)

// TopMostUpdate is the builder for updating TopMost entities.
type TopMostUpdate struct {
	config
	hooks     []Hook
	mutation  *TopMostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TopMostUpdate builder.
func (tmu *TopMostUpdate) Where(ps ...predicate.TopMost) *TopMostUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetCreatedAt sets the "created_at" field.
func (tmu *TopMostUpdate) SetCreatedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetCreatedAt()
	tmu.mutation.SetCreatedAt(u)
	return tmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableCreatedAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetCreatedAt(*u)
	}
	return tmu
}

// AddCreatedAt adds u to the "created_at" field.
func (tmu *TopMostUpdate) AddCreatedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddCreatedAt(u)
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TopMostUpdate) SetUpdatedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetUpdatedAt()
	tmu.mutation.SetUpdatedAt(u)
	return tmu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmu *TopMostUpdate) AddUpdatedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddUpdatedAt(u)
	return tmu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmu *TopMostUpdate) SetDeletedAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetDeletedAt()
	tmu.mutation.SetDeletedAt(u)
	return tmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableDeletedAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetDeletedAt(*u)
	}
	return tmu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmu *TopMostUpdate) AddDeletedAt(u int32) *TopMostUpdate {
	tmu.mutation.AddDeletedAt(u)
	return tmu
}

// SetAppID sets the "app_id" field.
func (tmu *TopMostUpdate) SetAppID(u uuid.UUID) *TopMostUpdate {
	tmu.mutation.SetAppID(u)
	return tmu
}

// SetTopMostType sets the "top_most_type" field.
func (tmu *TopMostUpdate) SetTopMostType(s string) *TopMostUpdate {
	tmu.mutation.SetTopMostType(s)
	return tmu
}

// SetNillableTopMostType sets the "top_most_type" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableTopMostType(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetTopMostType(*s)
	}
	return tmu
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (tmu *TopMostUpdate) ClearTopMostType() *TopMostUpdate {
	tmu.mutation.ClearTopMostType()
	return tmu
}

// SetTitle sets the "title" field.
func (tmu *TopMostUpdate) SetTitle(s string) *TopMostUpdate {
	tmu.mutation.SetTitle(s)
	return tmu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableTitle(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetTitle(*s)
	}
	return tmu
}

// ClearTitle clears the value of the "title" field.
func (tmu *TopMostUpdate) ClearTitle() *TopMostUpdate {
	tmu.mutation.ClearTitle()
	return tmu
}

// SetMessage sets the "message" field.
func (tmu *TopMostUpdate) SetMessage(s string) *TopMostUpdate {
	tmu.mutation.SetMessage(s)
	return tmu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableMessage(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetMessage(*s)
	}
	return tmu
}

// ClearMessage clears the value of the "message" field.
func (tmu *TopMostUpdate) ClearMessage() *TopMostUpdate {
	tmu.mutation.ClearMessage()
	return tmu
}

// SetPosters sets the "posters" field.
func (tmu *TopMostUpdate) SetPosters(s []string) *TopMostUpdate {
	tmu.mutation.SetPosters(s)
	return tmu
}

// ClearPosters clears the value of the "posters" field.
func (tmu *TopMostUpdate) ClearPosters() *TopMostUpdate {
	tmu.mutation.ClearPosters()
	return tmu
}

// SetStartAt sets the "start_at" field.
func (tmu *TopMostUpdate) SetStartAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetStartAt()
	tmu.mutation.SetStartAt(u)
	return tmu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableStartAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetStartAt(*u)
	}
	return tmu
}

// AddStartAt adds u to the "start_at" field.
func (tmu *TopMostUpdate) AddStartAt(u int32) *TopMostUpdate {
	tmu.mutation.AddStartAt(u)
	return tmu
}

// ClearStartAt clears the value of the "start_at" field.
func (tmu *TopMostUpdate) ClearStartAt() *TopMostUpdate {
	tmu.mutation.ClearStartAt()
	return tmu
}

// SetEndAt sets the "end_at" field.
func (tmu *TopMostUpdate) SetEndAt(u uint32) *TopMostUpdate {
	tmu.mutation.ResetEndAt()
	tmu.mutation.SetEndAt(u)
	return tmu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableEndAt(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetEndAt(*u)
	}
	return tmu
}

// AddEndAt adds u to the "end_at" field.
func (tmu *TopMostUpdate) AddEndAt(u int32) *TopMostUpdate {
	tmu.mutation.AddEndAt(u)
	return tmu
}

// ClearEndAt clears the value of the "end_at" field.
func (tmu *TopMostUpdate) ClearEndAt() *TopMostUpdate {
	tmu.mutation.ClearEndAt()
	return tmu
}

// SetThresholdCredits sets the "threshold_credits" field.
func (tmu *TopMostUpdate) SetThresholdCredits(s string) *TopMostUpdate {
	tmu.mutation.SetThresholdCredits(s)
	return tmu
}

// SetNillableThresholdCredits sets the "threshold_credits" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableThresholdCredits(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetThresholdCredits(*s)
	}
	return tmu
}

// ClearThresholdCredits clears the value of the "threshold_credits" field.
func (tmu *TopMostUpdate) ClearThresholdCredits() *TopMostUpdate {
	tmu.mutation.ClearThresholdCredits()
	return tmu
}

// SetRegisterElapsedSeconds sets the "register_elapsed_seconds" field.
func (tmu *TopMostUpdate) SetRegisterElapsedSeconds(u uint32) *TopMostUpdate {
	tmu.mutation.ResetRegisterElapsedSeconds()
	tmu.mutation.SetRegisterElapsedSeconds(u)
	return tmu
}

// SetNillableRegisterElapsedSeconds sets the "register_elapsed_seconds" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableRegisterElapsedSeconds(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetRegisterElapsedSeconds(*u)
	}
	return tmu
}

// AddRegisterElapsedSeconds adds u to the "register_elapsed_seconds" field.
func (tmu *TopMostUpdate) AddRegisterElapsedSeconds(u int32) *TopMostUpdate {
	tmu.mutation.AddRegisterElapsedSeconds(u)
	return tmu
}

// ClearRegisterElapsedSeconds clears the value of the "register_elapsed_seconds" field.
func (tmu *TopMostUpdate) ClearRegisterElapsedSeconds() *TopMostUpdate {
	tmu.mutation.ClearRegisterElapsedSeconds()
	return tmu
}

// SetThresholdPurchases sets the "threshold_purchases" field.
func (tmu *TopMostUpdate) SetThresholdPurchases(u uint32) *TopMostUpdate {
	tmu.mutation.ResetThresholdPurchases()
	tmu.mutation.SetThresholdPurchases(u)
	return tmu
}

// SetNillableThresholdPurchases sets the "threshold_purchases" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableThresholdPurchases(u *uint32) *TopMostUpdate {
	if u != nil {
		tmu.SetThresholdPurchases(*u)
	}
	return tmu
}

// AddThresholdPurchases adds u to the "threshold_purchases" field.
func (tmu *TopMostUpdate) AddThresholdPurchases(u int32) *TopMostUpdate {
	tmu.mutation.AddThresholdPurchases(u)
	return tmu
}

// ClearThresholdPurchases clears the value of the "threshold_purchases" field.
func (tmu *TopMostUpdate) ClearThresholdPurchases() *TopMostUpdate {
	tmu.mutation.ClearThresholdPurchases()
	return tmu
}

// SetThresholdPaymentAmount sets the "threshold_payment_amount" field.
func (tmu *TopMostUpdate) SetThresholdPaymentAmount(s string) *TopMostUpdate {
	tmu.mutation.SetThresholdPaymentAmount(s)
	return tmu
}

// SetNillableThresholdPaymentAmount sets the "threshold_payment_amount" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableThresholdPaymentAmount(s *string) *TopMostUpdate {
	if s != nil {
		tmu.SetThresholdPaymentAmount(*s)
	}
	return tmu
}

// ClearThresholdPaymentAmount clears the value of the "threshold_payment_amount" field.
func (tmu *TopMostUpdate) ClearThresholdPaymentAmount() *TopMostUpdate {
	tmu.mutation.ClearThresholdPaymentAmount()
	return tmu
}

// SetKycMust sets the "kyc_must" field.
func (tmu *TopMostUpdate) SetKycMust(b bool) *TopMostUpdate {
	tmu.mutation.SetKycMust(b)
	return tmu
}

// SetNillableKycMust sets the "kyc_must" field if the given value is not nil.
func (tmu *TopMostUpdate) SetNillableKycMust(b *bool) *TopMostUpdate {
	if b != nil {
		tmu.SetKycMust(*b)
	}
	return tmu
}

// ClearKycMust clears the value of the "kyc_must" field.
func (tmu *TopMostUpdate) ClearKycMust() *TopMostUpdate {
	tmu.mutation.ClearKycMust()
	return tmu
}

// Mutation returns the TopMostMutation object of the builder.
func (tmu *TopMostUpdate) Mutation() *TopMostMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TopMostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tmu.defaults(); err != nil {
		return 0, err
	}
	if len(tmu.hooks) == 0 {
		affected, err = tmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmu.mutation = mutation
			affected, err = tmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmu.hooks) - 1; i >= 0; i-- {
			if tmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TopMostUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TopMostUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TopMostUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmu *TopMostUpdate) defaults() error {
	if _, ok := tmu.mutation.UpdatedAt(); !ok {
		if topmost.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmost.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmost.UpdateDefaultUpdatedAt()
		tmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmu *TopMostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostUpdate {
	tmu.modifiers = append(tmu.modifiers, modifiers...)
	return tmu
}

func (tmu *TopMostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmost.Table,
			Columns: topmost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: topmost.FieldID,
			},
		},
	}
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldCreatedAt,
		})
	}
	if value, ok := tmu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldCreatedAt,
		})
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldUpdatedAt,
		})
	}
	if value, ok := tmu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldUpdatedAt,
		})
	}
	if value, ok := tmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldDeletedAt,
		})
	}
	if value, ok := tmu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldDeletedAt,
		})
	}
	if value, ok := tmu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmost.FieldAppID,
		})
	}
	if value, ok := tmu.mutation.TopMostType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldTopMostType,
		})
	}
	if tmu.mutation.TopMostTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldTopMostType,
		})
	}
	if value, ok := tmu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldTitle,
		})
	}
	if tmu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldTitle,
		})
	}
	if value, ok := tmu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldMessage,
		})
	}
	if tmu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldMessage,
		})
	}
	if value, ok := tmu.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: topmost.FieldPosters,
		})
	}
	if tmu.mutation.PostersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: topmost.FieldPosters,
		})
	}
	if value, ok := tmu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldStartAt,
		})
	}
	if value, ok := tmu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldStartAt,
		})
	}
	if tmu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldStartAt,
		})
	}
	if value, ok := tmu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldEndAt,
		})
	}
	if value, ok := tmu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldEndAt,
		})
	}
	if tmu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldEndAt,
		})
	}
	if value, ok := tmu.mutation.ThresholdCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldThresholdCredits,
		})
	}
	if tmu.mutation.ThresholdCreditsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldThresholdCredits,
		})
	}
	if value, ok := tmu.mutation.RegisterElapsedSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if value, ok := tmu.mutation.AddedRegisterElapsedSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if tmu.mutation.RegisterElapsedSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if value, ok := tmu.mutation.ThresholdPurchases(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if value, ok := tmu.mutation.AddedThresholdPurchases(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if tmu.mutation.ThresholdPurchasesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if value, ok := tmu.mutation.ThresholdPaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldThresholdPaymentAmount,
		})
	}
	if tmu.mutation.ThresholdPaymentAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldThresholdPaymentAmount,
		})
	}
	if value, ok := tmu.mutation.KycMust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topmost.FieldKycMust,
		})
	}
	if tmu.mutation.KycMustCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: topmost.FieldKycMust,
		})
	}
	_spec.Modifiers = tmu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TopMostUpdateOne is the builder for updating a single TopMost entity.
type TopMostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TopMostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tmuo *TopMostUpdateOne) SetCreatedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetCreatedAt()
	tmuo.mutation.SetCreatedAt(u)
	return tmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableCreatedAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetCreatedAt(*u)
	}
	return tmuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tmuo *TopMostUpdateOne) AddCreatedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddCreatedAt(u)
	return tmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TopMostUpdateOne) SetUpdatedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetUpdatedAt()
	tmuo.mutation.SetUpdatedAt(u)
	return tmuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tmuo *TopMostUpdateOne) AddUpdatedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddUpdatedAt(u)
	return tmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmuo *TopMostUpdateOne) SetDeletedAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetDeletedAt()
	tmuo.mutation.SetDeletedAt(u)
	return tmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableDeletedAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetDeletedAt(*u)
	}
	return tmuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tmuo *TopMostUpdateOne) AddDeletedAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddDeletedAt(u)
	return tmuo
}

// SetAppID sets the "app_id" field.
func (tmuo *TopMostUpdateOne) SetAppID(u uuid.UUID) *TopMostUpdateOne {
	tmuo.mutation.SetAppID(u)
	return tmuo
}

// SetTopMostType sets the "top_most_type" field.
func (tmuo *TopMostUpdateOne) SetTopMostType(s string) *TopMostUpdateOne {
	tmuo.mutation.SetTopMostType(s)
	return tmuo
}

// SetNillableTopMostType sets the "top_most_type" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableTopMostType(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetTopMostType(*s)
	}
	return tmuo
}

// ClearTopMostType clears the value of the "top_most_type" field.
func (tmuo *TopMostUpdateOne) ClearTopMostType() *TopMostUpdateOne {
	tmuo.mutation.ClearTopMostType()
	return tmuo
}

// SetTitle sets the "title" field.
func (tmuo *TopMostUpdateOne) SetTitle(s string) *TopMostUpdateOne {
	tmuo.mutation.SetTitle(s)
	return tmuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableTitle(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetTitle(*s)
	}
	return tmuo
}

// ClearTitle clears the value of the "title" field.
func (tmuo *TopMostUpdateOne) ClearTitle() *TopMostUpdateOne {
	tmuo.mutation.ClearTitle()
	return tmuo
}

// SetMessage sets the "message" field.
func (tmuo *TopMostUpdateOne) SetMessage(s string) *TopMostUpdateOne {
	tmuo.mutation.SetMessage(s)
	return tmuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableMessage(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetMessage(*s)
	}
	return tmuo
}

// ClearMessage clears the value of the "message" field.
func (tmuo *TopMostUpdateOne) ClearMessage() *TopMostUpdateOne {
	tmuo.mutation.ClearMessage()
	return tmuo
}

// SetPosters sets the "posters" field.
func (tmuo *TopMostUpdateOne) SetPosters(s []string) *TopMostUpdateOne {
	tmuo.mutation.SetPosters(s)
	return tmuo
}

// ClearPosters clears the value of the "posters" field.
func (tmuo *TopMostUpdateOne) ClearPosters() *TopMostUpdateOne {
	tmuo.mutation.ClearPosters()
	return tmuo
}

// SetStartAt sets the "start_at" field.
func (tmuo *TopMostUpdateOne) SetStartAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetStartAt()
	tmuo.mutation.SetStartAt(u)
	return tmuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableStartAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetStartAt(*u)
	}
	return tmuo
}

// AddStartAt adds u to the "start_at" field.
func (tmuo *TopMostUpdateOne) AddStartAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddStartAt(u)
	return tmuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tmuo *TopMostUpdateOne) ClearStartAt() *TopMostUpdateOne {
	tmuo.mutation.ClearStartAt()
	return tmuo
}

// SetEndAt sets the "end_at" field.
func (tmuo *TopMostUpdateOne) SetEndAt(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetEndAt()
	tmuo.mutation.SetEndAt(u)
	return tmuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableEndAt(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetEndAt(*u)
	}
	return tmuo
}

// AddEndAt adds u to the "end_at" field.
func (tmuo *TopMostUpdateOne) AddEndAt(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddEndAt(u)
	return tmuo
}

// ClearEndAt clears the value of the "end_at" field.
func (tmuo *TopMostUpdateOne) ClearEndAt() *TopMostUpdateOne {
	tmuo.mutation.ClearEndAt()
	return tmuo
}

// SetThresholdCredits sets the "threshold_credits" field.
func (tmuo *TopMostUpdateOne) SetThresholdCredits(s string) *TopMostUpdateOne {
	tmuo.mutation.SetThresholdCredits(s)
	return tmuo
}

// SetNillableThresholdCredits sets the "threshold_credits" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableThresholdCredits(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetThresholdCredits(*s)
	}
	return tmuo
}

// ClearThresholdCredits clears the value of the "threshold_credits" field.
func (tmuo *TopMostUpdateOne) ClearThresholdCredits() *TopMostUpdateOne {
	tmuo.mutation.ClearThresholdCredits()
	return tmuo
}

// SetRegisterElapsedSeconds sets the "register_elapsed_seconds" field.
func (tmuo *TopMostUpdateOne) SetRegisterElapsedSeconds(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetRegisterElapsedSeconds()
	tmuo.mutation.SetRegisterElapsedSeconds(u)
	return tmuo
}

// SetNillableRegisterElapsedSeconds sets the "register_elapsed_seconds" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableRegisterElapsedSeconds(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetRegisterElapsedSeconds(*u)
	}
	return tmuo
}

// AddRegisterElapsedSeconds adds u to the "register_elapsed_seconds" field.
func (tmuo *TopMostUpdateOne) AddRegisterElapsedSeconds(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddRegisterElapsedSeconds(u)
	return tmuo
}

// ClearRegisterElapsedSeconds clears the value of the "register_elapsed_seconds" field.
func (tmuo *TopMostUpdateOne) ClearRegisterElapsedSeconds() *TopMostUpdateOne {
	tmuo.mutation.ClearRegisterElapsedSeconds()
	return tmuo
}

// SetThresholdPurchases sets the "threshold_purchases" field.
func (tmuo *TopMostUpdateOne) SetThresholdPurchases(u uint32) *TopMostUpdateOne {
	tmuo.mutation.ResetThresholdPurchases()
	tmuo.mutation.SetThresholdPurchases(u)
	return tmuo
}

// SetNillableThresholdPurchases sets the "threshold_purchases" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableThresholdPurchases(u *uint32) *TopMostUpdateOne {
	if u != nil {
		tmuo.SetThresholdPurchases(*u)
	}
	return tmuo
}

// AddThresholdPurchases adds u to the "threshold_purchases" field.
func (tmuo *TopMostUpdateOne) AddThresholdPurchases(u int32) *TopMostUpdateOne {
	tmuo.mutation.AddThresholdPurchases(u)
	return tmuo
}

// ClearThresholdPurchases clears the value of the "threshold_purchases" field.
func (tmuo *TopMostUpdateOne) ClearThresholdPurchases() *TopMostUpdateOne {
	tmuo.mutation.ClearThresholdPurchases()
	return tmuo
}

// SetThresholdPaymentAmount sets the "threshold_payment_amount" field.
func (tmuo *TopMostUpdateOne) SetThresholdPaymentAmount(s string) *TopMostUpdateOne {
	tmuo.mutation.SetThresholdPaymentAmount(s)
	return tmuo
}

// SetNillableThresholdPaymentAmount sets the "threshold_payment_amount" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableThresholdPaymentAmount(s *string) *TopMostUpdateOne {
	if s != nil {
		tmuo.SetThresholdPaymentAmount(*s)
	}
	return tmuo
}

// ClearThresholdPaymentAmount clears the value of the "threshold_payment_amount" field.
func (tmuo *TopMostUpdateOne) ClearThresholdPaymentAmount() *TopMostUpdateOne {
	tmuo.mutation.ClearThresholdPaymentAmount()
	return tmuo
}

// SetKycMust sets the "kyc_must" field.
func (tmuo *TopMostUpdateOne) SetKycMust(b bool) *TopMostUpdateOne {
	tmuo.mutation.SetKycMust(b)
	return tmuo
}

// SetNillableKycMust sets the "kyc_must" field if the given value is not nil.
func (tmuo *TopMostUpdateOne) SetNillableKycMust(b *bool) *TopMostUpdateOne {
	if b != nil {
		tmuo.SetKycMust(*b)
	}
	return tmuo
}

// ClearKycMust clears the value of the "kyc_must" field.
func (tmuo *TopMostUpdateOne) ClearKycMust() *TopMostUpdateOne {
	tmuo.mutation.ClearKycMust()
	return tmuo
}

// Mutation returns the TopMostMutation object of the builder.
func (tmuo *TopMostUpdateOne) Mutation() *TopMostMutation {
	return tmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TopMostUpdateOne) Select(field string, fields ...string) *TopMostUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TopMost entity.
func (tmuo *TopMostUpdateOne) Save(ctx context.Context) (*TopMost, error) {
	var (
		err  error
		node *TopMost
	)
	if err := tmuo.defaults(); err != nil {
		return nil, err
	}
	if len(tmuo.hooks) == 0 {
		node, err = tmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopMostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmuo.mutation = mutation
			node, err = tmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmuo.hooks) - 1; i >= 0; i-- {
			if tmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopMost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopMostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TopMostUpdateOne) SaveX(ctx context.Context) *TopMost {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TopMostUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TopMostUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmuo *TopMostUpdateOne) defaults() error {
	if _, ok := tmuo.mutation.UpdatedAt(); !ok {
		if topmost.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topmost.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topmost.UpdateDefaultUpdatedAt()
		tmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tmuo *TopMostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TopMostUpdateOne {
	tmuo.modifiers = append(tmuo.modifiers, modifiers...)
	return tmuo
}

func (tmuo *TopMostUpdateOne) sqlSave(ctx context.Context) (_node *TopMost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topmost.Table,
			Columns: topmost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: topmost.FieldID,
			},
		},
	}
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopMost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topmost.FieldID)
		for _, f := range fields {
			if !topmost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topmost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldCreatedAt,
		})
	}
	if value, ok := tmuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldCreatedAt,
		})
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldUpdatedAt,
		})
	}
	if value, ok := tmuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldUpdatedAt,
		})
	}
	if value, ok := tmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldDeletedAt,
		})
	}
	if value, ok := tmuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldDeletedAt,
		})
	}
	if value, ok := tmuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: topmost.FieldAppID,
		})
	}
	if value, ok := tmuo.mutation.TopMostType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldTopMostType,
		})
	}
	if tmuo.mutation.TopMostTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldTopMostType,
		})
	}
	if value, ok := tmuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldTitle,
		})
	}
	if tmuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldTitle,
		})
	}
	if value, ok := tmuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldMessage,
		})
	}
	if tmuo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldMessage,
		})
	}
	if value, ok := tmuo.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: topmost.FieldPosters,
		})
	}
	if tmuo.mutation.PostersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: topmost.FieldPosters,
		})
	}
	if value, ok := tmuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldStartAt,
		})
	}
	if value, ok := tmuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldStartAt,
		})
	}
	if tmuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldStartAt,
		})
	}
	if value, ok := tmuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldEndAt,
		})
	}
	if value, ok := tmuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldEndAt,
		})
	}
	if tmuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldEndAt,
		})
	}
	if value, ok := tmuo.mutation.ThresholdCredits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldThresholdCredits,
		})
	}
	if tmuo.mutation.ThresholdCreditsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldThresholdCredits,
		})
	}
	if value, ok := tmuo.mutation.RegisterElapsedSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if value, ok := tmuo.mutation.AddedRegisterElapsedSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if tmuo.mutation.RegisterElapsedSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldRegisterElapsedSeconds,
		})
	}
	if value, ok := tmuo.mutation.ThresholdPurchases(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if value, ok := tmuo.mutation.AddedThresholdPurchases(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if tmuo.mutation.ThresholdPurchasesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: topmost.FieldThresholdPurchases,
		})
	}
	if value, ok := tmuo.mutation.ThresholdPaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topmost.FieldThresholdPaymentAmount,
		})
	}
	if tmuo.mutation.ThresholdPaymentAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: topmost.FieldThresholdPaymentAmount,
		})
	}
	if value, ok := tmuo.mutation.KycMust(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topmost.FieldKycMust,
		})
	}
	if tmuo.mutation.KycMustCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: topmost.FieldKycMust,
		})
	}
	_spec.Modifiers = tmuo.modifiers
	_node = &TopMost{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topmost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
