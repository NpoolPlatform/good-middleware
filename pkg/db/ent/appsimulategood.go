// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appsimulategood"
	"github.com/google/uuid"
)

// AppSimulateGood is the model entity for the AppSimulateGood schema.
type AppSimulateGood struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppSimulateGood) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appsimulategood.FieldID, appsimulategood.FieldCreatedAt, appsimulategood.FieldUpdatedAt, appsimulategood.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case appsimulategood.FieldEntID, appsimulategood.FieldAppID, appsimulategood.FieldGoodID, appsimulategood.FieldAppGoodID, appsimulategood.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppSimulateGood", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppSimulateGood fields.
func (asg *AppSimulateGood) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appsimulategood.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			asg.ID = uint32(value.Int64)
		case appsimulategood.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				asg.CreatedAt = uint32(value.Int64)
			}
		case appsimulategood.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				asg.UpdatedAt = uint32(value.Int64)
			}
		case appsimulategood.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				asg.DeletedAt = uint32(value.Int64)
			}
		case appsimulategood.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				asg.EntID = *value
			}
		case appsimulategood.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				asg.AppID = *value
			}
		case appsimulategood.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				asg.GoodID = *value
			}
		case appsimulategood.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				asg.AppGoodID = *value
			}
		case appsimulategood.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				asg.CoinTypeID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppSimulateGood.
// Note that you need to call AppSimulateGood.Unwrap() before calling this method if this AppSimulateGood
// was returned from a transaction, and the transaction was committed or rolled back.
func (asg *AppSimulateGood) Update() *AppSimulateGoodUpdateOne {
	return (&AppSimulateGoodClient{config: asg.config}).UpdateOne(asg)
}

// Unwrap unwraps the AppSimulateGood entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asg *AppSimulateGood) Unwrap() *AppSimulateGood {
	_tx, ok := asg.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppSimulateGood is not a transactional entity")
	}
	asg.config.driver = _tx.drv
	return asg
}

// String implements the fmt.Stringer.
func (asg *AppSimulateGood) String() string {
	var builder strings.Builder
	builder.WriteString("AppSimulateGood(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", asg.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", asg.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", asg.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", asg.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", asg.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", asg.GoodID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", asg.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", asg.CoinTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// AppSimulateGoods is a parsable slice of AppSimulateGood.
type AppSimulateGoods []*AppSimulateGood

func (asg AppSimulateGoods) config(cfg config) {
	for _i := range asg {
		asg[_i].config = cfg
	}
}
