// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TopMostGood is the model entity for the TopMostGood schema.
type TopMostGood struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// TopMostID holds the value of the "top_most_id" field.
	TopMostID uuid.UUID `json:"top_most_id,omitempty"`
	// DisplayIndex holds the value of the "display_index" field.
	DisplayIndex uint32 `json:"display_index,omitempty"`
	// Posters holds the value of the "posters" field.
	Posters []string `json:"posters,omitempty"`
	// Price holds the value of the "price" field.
	Price decimal.Decimal `json:"price,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopMostGood) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case topmostgood.FieldPosters:
			values[i] = new([]byte)
		case topmostgood.FieldPrice:
			values[i] = new(decimal.Decimal)
		case topmostgood.FieldCreatedAt, topmostgood.FieldUpdatedAt, topmostgood.FieldDeletedAt, topmostgood.FieldDisplayIndex:
			values[i] = new(sql.NullInt64)
		case topmostgood.FieldID, topmostgood.FieldAppID, topmostgood.FieldGoodID, topmostgood.FieldAppGoodID, topmostgood.FieldTopMostID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TopMostGood", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopMostGood fields.
func (tmg *TopMostGood) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topmostgood.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tmg.ID = *value
			}
		case topmostgood.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tmg.CreatedAt = uint32(value.Int64)
			}
		case topmostgood.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tmg.UpdatedAt = uint32(value.Int64)
			}
		case topmostgood.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tmg.DeletedAt = uint32(value.Int64)
			}
		case topmostgood.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				tmg.AppID = *value
			}
		case topmostgood.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				tmg.GoodID = *value
			}
		case topmostgood.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				tmg.AppGoodID = *value
			}
		case topmostgood.FieldTopMostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field top_most_id", values[i])
			} else if value != nil {
				tmg.TopMostID = *value
			}
		case topmostgood.FieldDisplayIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_index", values[i])
			} else if value.Valid {
				tmg.DisplayIndex = uint32(value.Int64)
			}
		case topmostgood.FieldPosters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field posters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tmg.Posters); err != nil {
					return fmt.Errorf("unmarshal field posters: %w", err)
				}
			}
		case topmostgood.FieldPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil {
				tmg.Price = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TopMostGood.
// Note that you need to call TopMostGood.Unwrap() before calling this method if this TopMostGood
// was returned from a transaction, and the transaction was committed or rolled back.
func (tmg *TopMostGood) Update() *TopMostGoodUpdateOne {
	return (&TopMostGoodClient{config: tmg.config}).UpdateOne(tmg)
}

// Unwrap unwraps the TopMostGood entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tmg *TopMostGood) Unwrap() *TopMostGood {
	_tx, ok := tmg.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopMostGood is not a transactional entity")
	}
	tmg.config.driver = _tx.drv
	return tmg
}

// String implements the fmt.Stringer.
func (tmg *TopMostGood) String() string {
	var builder strings.Builder
	builder.WriteString("TopMostGood(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tmg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tmg.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tmg.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tmg.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", tmg.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", tmg.GoodID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", tmg.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("top_most_id=")
	builder.WriteString(fmt.Sprintf("%v", tmg.TopMostID))
	builder.WriteString(", ")
	builder.WriteString("display_index=")
	builder.WriteString(fmt.Sprintf("%v", tmg.DisplayIndex))
	builder.WriteString(", ")
	builder.WriteString("posters=")
	builder.WriteString(fmt.Sprintf("%v", tmg.Posters))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", tmg.Price))
	builder.WriteByte(')')
	return builder.String()
}

// TopMostGoods is a parsable slice of TopMostGood.
type TopMostGoods []*TopMostGood

func (tmg TopMostGoods) config(cfg config) {
	for _i := range tmg {
		tmg[_i].config = cfg
	}
}
