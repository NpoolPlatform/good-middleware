// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppStockUpdate is the builder for updating AppStock entities.
type AppStockUpdate struct {
	config
	hooks     []Hook
	mutation  *AppStockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppStockUpdate builder.
func (asu *AppStockUpdate) Where(ps ...predicate.AppStock) *AppStockUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AppStockUpdate) SetCreatedAt(u uint32) *AppStockUpdate {
	asu.mutation.ResetCreatedAt()
	asu.mutation.SetCreatedAt(u)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableCreatedAt(u *uint32) *AppStockUpdate {
	if u != nil {
		asu.SetCreatedAt(*u)
	}
	return asu
}

// AddCreatedAt adds u to the "created_at" field.
func (asu *AppStockUpdate) AddCreatedAt(u int32) *AppStockUpdate {
	asu.mutation.AddCreatedAt(u)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppStockUpdate) SetUpdatedAt(u uint32) *AppStockUpdate {
	asu.mutation.ResetUpdatedAt()
	asu.mutation.SetUpdatedAt(u)
	return asu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asu *AppStockUpdate) AddUpdatedAt(u int32) *AppStockUpdate {
	asu.mutation.AddUpdatedAt(u)
	return asu
}

// SetDeletedAt sets the "deleted_at" field.
func (asu *AppStockUpdate) SetDeletedAt(u uint32) *AppStockUpdate {
	asu.mutation.ResetDeletedAt()
	asu.mutation.SetDeletedAt(u)
	return asu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableDeletedAt(u *uint32) *AppStockUpdate {
	if u != nil {
		asu.SetDeletedAt(*u)
	}
	return asu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asu *AppStockUpdate) AddDeletedAt(u int32) *AppStockUpdate {
	asu.mutation.AddDeletedAt(u)
	return asu
}

// SetAppID sets the "app_id" field.
func (asu *AppStockUpdate) SetAppID(u uuid.UUID) *AppStockUpdate {
	asu.mutation.SetAppID(u)
	return asu
}

// SetGoodID sets the "good_id" field.
func (asu *AppStockUpdate) SetGoodID(u uuid.UUID) *AppStockUpdate {
	asu.mutation.SetGoodID(u)
	return asu
}

// SetTotal sets the "total" field.
func (asu *AppStockUpdate) SetTotal(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetTotal(d)
	return asu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableTotal(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetTotal(*d)
	}
	return asu
}

// ClearTotal clears the value of the "total" field.
func (asu *AppStockUpdate) ClearTotal() *AppStockUpdate {
	asu.mutation.ClearTotal()
	return asu
}

// SetSpotQuantity sets the "spot_quantity" field.
func (asu *AppStockUpdate) SetSpotQuantity(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetSpotQuantity(d)
	return asu
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableSpotQuantity(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetSpotQuantity(*d)
	}
	return asu
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (asu *AppStockUpdate) ClearSpotQuantity() *AppStockUpdate {
	asu.mutation.ClearSpotQuantity()
	return asu
}

// SetLocked sets the "locked" field.
func (asu *AppStockUpdate) SetLocked(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetLocked(d)
	return asu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableLocked(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetLocked(*d)
	}
	return asu
}

// ClearLocked clears the value of the "locked" field.
func (asu *AppStockUpdate) ClearLocked() *AppStockUpdate {
	asu.mutation.ClearLocked()
	return asu
}

// SetInService sets the "in_service" field.
func (asu *AppStockUpdate) SetInService(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetInService(d)
	return asu
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableInService(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetInService(*d)
	}
	return asu
}

// ClearInService clears the value of the "in_service" field.
func (asu *AppStockUpdate) ClearInService() *AppStockUpdate {
	asu.mutation.ClearInService()
	return asu
}

// SetWaitStart sets the "wait_start" field.
func (asu *AppStockUpdate) SetWaitStart(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetWaitStart(d)
	return asu
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableWaitStart(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetWaitStart(*d)
	}
	return asu
}

// ClearWaitStart clears the value of the "wait_start" field.
func (asu *AppStockUpdate) ClearWaitStart() *AppStockUpdate {
	asu.mutation.ClearWaitStart()
	return asu
}

// SetSold sets the "sold" field.
func (asu *AppStockUpdate) SetSold(d decimal.Decimal) *AppStockUpdate {
	asu.mutation.SetSold(d)
	return asu
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (asu *AppStockUpdate) SetNillableSold(d *decimal.Decimal) *AppStockUpdate {
	if d != nil {
		asu.SetSold(*d)
	}
	return asu
}

// ClearSold clears the value of the "sold" field.
func (asu *AppStockUpdate) ClearSold() *AppStockUpdate {
	asu.mutation.ClearSold()
	return asu
}

// Mutation returns the AppStockMutation object of the builder.
func (asu *AppStockUpdate) Mutation() *AppStockMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppStockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := asu.defaults(); err != nil {
		return 0, err
	}
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppStockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppStockUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppStockUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppStockUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AppStockUpdate) defaults() error {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		if appstock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appstock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appstock.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AppStockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppStockUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AppStockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appstock.Table,
			Columns: appstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appstock.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldCreatedAt,
		})
	}
	if value, ok := asu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldCreatedAt,
		})
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldUpdatedAt,
		})
	}
	if value, ok := asu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldUpdatedAt,
		})
	}
	if value, ok := asu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldDeletedAt,
		})
	}
	if value, ok := asu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldDeletedAt,
		})
	}
	if value, ok := asu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appstock.FieldAppID,
		})
	}
	if value, ok := asu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appstock.FieldGoodID,
		})
	}
	if value, ok := asu.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldTotal,
		})
	}
	if asu.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldTotal,
		})
	}
	if value, ok := asu.mutation.SpotQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldSpotQuantity,
		})
	}
	if asu.mutation.SpotQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldSpotQuantity,
		})
	}
	if value, ok := asu.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldLocked,
		})
	}
	if asu.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldLocked,
		})
	}
	if value, ok := asu.mutation.InService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldInService,
		})
	}
	if asu.mutation.InServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldInService,
		})
	}
	if value, ok := asu.mutation.WaitStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldWaitStart,
		})
	}
	if asu.mutation.WaitStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldWaitStart,
		})
	}
	if value, ok := asu.mutation.Sold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldSold,
		})
	}
	if asu.mutation.SoldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldSold,
		})
	}
	_spec.Modifiers = asu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppStockUpdateOne is the builder for updating a single AppStock entity.
type AppStockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppStockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AppStockUpdateOne) SetCreatedAt(u uint32) *AppStockUpdateOne {
	asuo.mutation.ResetCreatedAt()
	asuo.mutation.SetCreatedAt(u)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableCreatedAt(u *uint32) *AppStockUpdateOne {
	if u != nil {
		asuo.SetCreatedAt(*u)
	}
	return asuo
}

// AddCreatedAt adds u to the "created_at" field.
func (asuo *AppStockUpdateOne) AddCreatedAt(u int32) *AppStockUpdateOne {
	asuo.mutation.AddCreatedAt(u)
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppStockUpdateOne) SetUpdatedAt(u uint32) *AppStockUpdateOne {
	asuo.mutation.ResetUpdatedAt()
	asuo.mutation.SetUpdatedAt(u)
	return asuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asuo *AppStockUpdateOne) AddUpdatedAt(u int32) *AppStockUpdateOne {
	asuo.mutation.AddUpdatedAt(u)
	return asuo
}

// SetDeletedAt sets the "deleted_at" field.
func (asuo *AppStockUpdateOne) SetDeletedAt(u uint32) *AppStockUpdateOne {
	asuo.mutation.ResetDeletedAt()
	asuo.mutation.SetDeletedAt(u)
	return asuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableDeletedAt(u *uint32) *AppStockUpdateOne {
	if u != nil {
		asuo.SetDeletedAt(*u)
	}
	return asuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asuo *AppStockUpdateOne) AddDeletedAt(u int32) *AppStockUpdateOne {
	asuo.mutation.AddDeletedAt(u)
	return asuo
}

// SetAppID sets the "app_id" field.
func (asuo *AppStockUpdateOne) SetAppID(u uuid.UUID) *AppStockUpdateOne {
	asuo.mutation.SetAppID(u)
	return asuo
}

// SetGoodID sets the "good_id" field.
func (asuo *AppStockUpdateOne) SetGoodID(u uuid.UUID) *AppStockUpdateOne {
	asuo.mutation.SetGoodID(u)
	return asuo
}

// SetTotal sets the "total" field.
func (asuo *AppStockUpdateOne) SetTotal(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetTotal(d)
	return asuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableTotal(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetTotal(*d)
	}
	return asuo
}

// ClearTotal clears the value of the "total" field.
func (asuo *AppStockUpdateOne) ClearTotal() *AppStockUpdateOne {
	asuo.mutation.ClearTotal()
	return asuo
}

// SetSpotQuantity sets the "spot_quantity" field.
func (asuo *AppStockUpdateOne) SetSpotQuantity(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetSpotQuantity(d)
	return asuo
}

// SetNillableSpotQuantity sets the "spot_quantity" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableSpotQuantity(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetSpotQuantity(*d)
	}
	return asuo
}

// ClearSpotQuantity clears the value of the "spot_quantity" field.
func (asuo *AppStockUpdateOne) ClearSpotQuantity() *AppStockUpdateOne {
	asuo.mutation.ClearSpotQuantity()
	return asuo
}

// SetLocked sets the "locked" field.
func (asuo *AppStockUpdateOne) SetLocked(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetLocked(d)
	return asuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableLocked(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetLocked(*d)
	}
	return asuo
}

// ClearLocked clears the value of the "locked" field.
func (asuo *AppStockUpdateOne) ClearLocked() *AppStockUpdateOne {
	asuo.mutation.ClearLocked()
	return asuo
}

// SetInService sets the "in_service" field.
func (asuo *AppStockUpdateOne) SetInService(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetInService(d)
	return asuo
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableInService(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetInService(*d)
	}
	return asuo
}

// ClearInService clears the value of the "in_service" field.
func (asuo *AppStockUpdateOne) ClearInService() *AppStockUpdateOne {
	asuo.mutation.ClearInService()
	return asuo
}

// SetWaitStart sets the "wait_start" field.
func (asuo *AppStockUpdateOne) SetWaitStart(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetWaitStart(d)
	return asuo
}

// SetNillableWaitStart sets the "wait_start" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableWaitStart(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetWaitStart(*d)
	}
	return asuo
}

// ClearWaitStart clears the value of the "wait_start" field.
func (asuo *AppStockUpdateOne) ClearWaitStart() *AppStockUpdateOne {
	asuo.mutation.ClearWaitStart()
	return asuo
}

// SetSold sets the "sold" field.
func (asuo *AppStockUpdateOne) SetSold(d decimal.Decimal) *AppStockUpdateOne {
	asuo.mutation.SetSold(d)
	return asuo
}

// SetNillableSold sets the "sold" field if the given value is not nil.
func (asuo *AppStockUpdateOne) SetNillableSold(d *decimal.Decimal) *AppStockUpdateOne {
	if d != nil {
		asuo.SetSold(*d)
	}
	return asuo
}

// ClearSold clears the value of the "sold" field.
func (asuo *AppStockUpdateOne) ClearSold() *AppStockUpdateOne {
	asuo.mutation.ClearSold()
	return asuo
}

// Mutation returns the AppStockMutation object of the builder.
func (asuo *AppStockUpdateOne) Mutation() *AppStockMutation {
	return asuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppStockUpdateOne) Select(field string, fields ...string) *AppStockUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppStock entity.
func (asuo *AppStockUpdateOne) Save(ctx context.Context) (*AppStock, error) {
	var (
		err  error
		node *AppStock
	)
	if err := asuo.defaults(); err != nil {
		return nil, err
	}
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppStockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppStock)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppStockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppStockUpdateOne) SaveX(ctx context.Context) *AppStock {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppStockUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppStockUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AppStockUpdateOne) defaults() error {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		if appstock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appstock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appstock.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AppStockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppStockUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AppStockUpdateOne) sqlSave(ctx context.Context) (_node *AppStock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appstock.Table,
			Columns: appstock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appstock.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppStock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appstock.FieldID)
		for _, f := range fields {
			if !appstock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appstock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldCreatedAt,
		})
	}
	if value, ok := asuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldCreatedAt,
		})
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldUpdatedAt,
		})
	}
	if value, ok := asuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldUpdatedAt,
		})
	}
	if value, ok := asuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldDeletedAt,
		})
	}
	if value, ok := asuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appstock.FieldDeletedAt,
		})
	}
	if value, ok := asuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appstock.FieldAppID,
		})
	}
	if value, ok := asuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appstock.FieldGoodID,
		})
	}
	if value, ok := asuo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldTotal,
		})
	}
	if asuo.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldTotal,
		})
	}
	if value, ok := asuo.mutation.SpotQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldSpotQuantity,
		})
	}
	if asuo.mutation.SpotQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldSpotQuantity,
		})
	}
	if value, ok := asuo.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldLocked,
		})
	}
	if asuo.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldLocked,
		})
	}
	if value, ok := asuo.mutation.InService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldInService,
		})
	}
	if asuo.mutation.InServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldInService,
		})
	}
	if value, ok := asuo.mutation.WaitStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldWaitStart,
		})
	}
	if asuo.mutation.WaitStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldWaitStart,
		})
	}
	if value, ok := asuo.mutation.Sold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appstock.FieldSold,
		})
	}
	if asuo.mutation.SoldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appstock.FieldSold,
		})
	}
	_spec.Modifiers = asuo.modifiers
	_node = &AppStock{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
