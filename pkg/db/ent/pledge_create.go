// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/pledge"
	"github.com/google/uuid"
)

// PledgeCreate is the builder for creating a Pledge entity.
type PledgeCreate struct {
	config
	mutation *PledgeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PledgeCreate) SetCreatedAt(u uint32) *PledgeCreate {
	pc.mutation.SetCreatedAt(u)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableCreatedAt(u *uint32) *PledgeCreate {
	if u != nil {
		pc.SetCreatedAt(*u)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PledgeCreate) SetUpdatedAt(u uint32) *PledgeCreate {
	pc.mutation.SetUpdatedAt(u)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableUpdatedAt(u *uint32) *PledgeCreate {
	if u != nil {
		pc.SetUpdatedAt(*u)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PledgeCreate) SetDeletedAt(u uint32) *PledgeCreate {
	pc.mutation.SetDeletedAt(u)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableDeletedAt(u *uint32) *PledgeCreate {
	if u != nil {
		pc.SetDeletedAt(*u)
	}
	return pc
}

// SetEntID sets the "ent_id" field.
func (pc *PledgeCreate) SetEntID(u uuid.UUID) *PledgeCreate {
	pc.mutation.SetEntID(u)
	return pc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableEntID(u *uuid.UUID) *PledgeCreate {
	if u != nil {
		pc.SetEntID(*u)
	}
	return pc
}

// SetGoodID sets the "good_id" field.
func (pc *PledgeCreate) SetGoodID(u uuid.UUID) *PledgeCreate {
	pc.mutation.SetGoodID(u)
	return pc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableGoodID(u *uuid.UUID) *PledgeCreate {
	if u != nil {
		pc.SetGoodID(*u)
	}
	return pc
}

// SetContractCodeURL sets the "contract_code_url" field.
func (pc *PledgeCreate) SetContractCodeURL(s string) *PledgeCreate {
	pc.mutation.SetContractCodeURL(s)
	return pc
}

// SetNillableContractCodeURL sets the "contract_code_url" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableContractCodeURL(s *string) *PledgeCreate {
	if s != nil {
		pc.SetContractCodeURL(*s)
	}
	return pc
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (pc *PledgeCreate) SetContractCodeBranch(s string) *PledgeCreate {
	pc.mutation.SetContractCodeBranch(s)
	return pc
}

// SetNillableContractCodeBranch sets the "contract_code_branch" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableContractCodeBranch(s *string) *PledgeCreate {
	if s != nil {
		pc.SetContractCodeBranch(*s)
	}
	return pc
}

// SetContractState sets the "contract_state" field.
func (pc *PledgeCreate) SetContractState(s string) *PledgeCreate {
	pc.mutation.SetContractState(s)
	return pc
}

// SetNillableContractState sets the "contract_state" field if the given value is not nil.
func (pc *PledgeCreate) SetNillableContractState(s *string) *PledgeCreate {
	if s != nil {
		pc.SetContractState(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PledgeCreate) SetID(u uint32) *PledgeCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PledgeMutation object of the builder.
func (pc *PledgeCreate) Mutation() *PledgeMutation {
	return pc.mutation
}

// Save creates the Pledge in the database.
func (pc *PledgeCreate) Save(ctx context.Context) (*Pledge, error) {
	var (
		err  error
		node *Pledge
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PledgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Pledge)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PledgeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PledgeCreate) SaveX(ctx context.Context) *Pledge {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PledgeCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PledgeCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PledgeCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if pledge.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pledge.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pledge.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if pledge.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pledge.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pledge.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		if pledge.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized pledge.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := pledge.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.EntID(); !ok {
		if pledge.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized pledge.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := pledge.DefaultEntID()
		pc.mutation.SetEntID(v)
	}
	if _, ok := pc.mutation.GoodID(); !ok {
		if pledge.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized pledge.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := pledge.DefaultGoodID()
		pc.mutation.SetGoodID(v)
	}
	if _, ok := pc.mutation.ContractCodeURL(); !ok {
		v := pledge.DefaultContractCodeURL
		pc.mutation.SetContractCodeURL(v)
	}
	if _, ok := pc.mutation.ContractCodeBranch(); !ok {
		v := pledge.DefaultContractCodeBranch
		pc.mutation.SetContractCodeBranch(v)
	}
	if _, ok := pc.mutation.ContractState(); !ok {
		v := pledge.DefaultContractState
		pc.mutation.SetContractState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PledgeCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pledge.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pledge.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Pledge.deleted_at"`)}
	}
	if _, ok := pc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Pledge.ent_id"`)}
	}
	return nil
}

func (pc *PledgeCreate) sqlSave(ctx context.Context) (*Pledge, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (pc *PledgeCreate) createSpec() (*Pledge, *sqlgraph.CreateSpec) {
	var (
		_node = &Pledge{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pledge.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: pledge.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pledge.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pledge.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pledge.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pledge.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := pc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pledge.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := pc.mutation.ContractCodeURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pledge.FieldContractCodeURL,
		})
		_node.ContractCodeURL = value
	}
	if value, ok := pc.mutation.ContractCodeBranch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pledge.FieldContractCodeBranch,
		})
		_node.ContractCodeBranch = value
	}
	if value, ok := pc.mutation.ContractState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pledge.FieldContractState,
		})
		_node.ContractState = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pledge.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PledgeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PledgeCreate) OnConflict(opts ...sql.ConflictOption) *PledgeUpsertOne {
	pc.conflict = opts
	return &PledgeUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pledge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PledgeCreate) OnConflictColumns(columns ...string) *PledgeUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PledgeUpsertOne{
		create: pc,
	}
}

type (
	// PledgeUpsertOne is the builder for "upsert"-ing
	//  one Pledge node.
	PledgeUpsertOne struct {
		create *PledgeCreate
	}

	// PledgeUpsert is the "OnConflict" setter.
	PledgeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PledgeUpsert) SetCreatedAt(v uint32) *PledgeUpsert {
	u.Set(pledge.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateCreatedAt() *PledgeUpsert {
	u.SetExcluded(pledge.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PledgeUpsert) AddCreatedAt(v uint32) *PledgeUpsert {
	u.Add(pledge.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PledgeUpsert) SetUpdatedAt(v uint32) *PledgeUpsert {
	u.Set(pledge.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateUpdatedAt() *PledgeUpsert {
	u.SetExcluded(pledge.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PledgeUpsert) AddUpdatedAt(v uint32) *PledgeUpsert {
	u.Add(pledge.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PledgeUpsert) SetDeletedAt(v uint32) *PledgeUpsert {
	u.Set(pledge.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateDeletedAt() *PledgeUpsert {
	u.SetExcluded(pledge.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PledgeUpsert) AddDeletedAt(v uint32) *PledgeUpsert {
	u.Add(pledge.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *PledgeUpsert) SetEntID(v uuid.UUID) *PledgeUpsert {
	u.Set(pledge.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateEntID() *PledgeUpsert {
	u.SetExcluded(pledge.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *PledgeUpsert) SetGoodID(v uuid.UUID) *PledgeUpsert {
	u.Set(pledge.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateGoodID() *PledgeUpsert {
	u.SetExcluded(pledge.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PledgeUpsert) ClearGoodID() *PledgeUpsert {
	u.SetNull(pledge.FieldGoodID)
	return u
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *PledgeUpsert) SetContractCodeURL(v string) *PledgeUpsert {
	u.Set(pledge.FieldContractCodeURL, v)
	return u
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateContractCodeURL() *PledgeUpsert {
	u.SetExcluded(pledge.FieldContractCodeURL)
	return u
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *PledgeUpsert) ClearContractCodeURL() *PledgeUpsert {
	u.SetNull(pledge.FieldContractCodeURL)
	return u
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *PledgeUpsert) SetContractCodeBranch(v string) *PledgeUpsert {
	u.Set(pledge.FieldContractCodeBranch, v)
	return u
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateContractCodeBranch() *PledgeUpsert {
	u.SetExcluded(pledge.FieldContractCodeBranch)
	return u
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *PledgeUpsert) ClearContractCodeBranch() *PledgeUpsert {
	u.SetNull(pledge.FieldContractCodeBranch)
	return u
}

// SetContractState sets the "contract_state" field.
func (u *PledgeUpsert) SetContractState(v string) *PledgeUpsert {
	u.Set(pledge.FieldContractState, v)
	return u
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *PledgeUpsert) UpdateContractState() *PledgeUpsert {
	u.SetExcluded(pledge.FieldContractState)
	return u
}

// ClearContractState clears the value of the "contract_state" field.
func (u *PledgeUpsert) ClearContractState() *PledgeUpsert {
	u.SetNull(pledge.FieldContractState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Pledge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pledge.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PledgeUpsertOne) UpdateNewValues() *PledgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pledge.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Pledge.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PledgeUpsertOne) Ignore() *PledgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PledgeUpsertOne) DoNothing() *PledgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PledgeCreate.OnConflict
// documentation for more info.
func (u *PledgeUpsertOne) Update(set func(*PledgeUpsert)) *PledgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PledgeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PledgeUpsertOne) SetCreatedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PledgeUpsertOne) AddCreatedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateCreatedAt() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PledgeUpsertOne) SetUpdatedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PledgeUpsertOne) AddUpdatedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateUpdatedAt() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PledgeUpsertOne) SetDeletedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PledgeUpsertOne) AddDeletedAt(v uint32) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateDeletedAt() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PledgeUpsertOne) SetEntID(v uuid.UUID) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateEntID() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PledgeUpsertOne) SetGoodID(v uuid.UUID) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateGoodID() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PledgeUpsertOne) ClearGoodID() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearGoodID()
	})
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *PledgeUpsertOne) SetContractCodeURL(v string) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractCodeURL(v)
	})
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateContractCodeURL() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractCodeURL()
	})
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *PledgeUpsertOne) ClearContractCodeURL() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractCodeURL()
	})
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *PledgeUpsertOne) SetContractCodeBranch(v string) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractCodeBranch(v)
	})
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateContractCodeBranch() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractCodeBranch()
	})
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *PledgeUpsertOne) ClearContractCodeBranch() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractCodeBranch()
	})
}

// SetContractState sets the "contract_state" field.
func (u *PledgeUpsertOne) SetContractState(v string) *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractState(v)
	})
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *PledgeUpsertOne) UpdateContractState() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractState()
	})
}

// ClearContractState clears the value of the "contract_state" field.
func (u *PledgeUpsertOne) ClearContractState() *PledgeUpsertOne {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractState()
	})
}

// Exec executes the query.
func (u *PledgeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PledgeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PledgeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PledgeUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PledgeUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PledgeCreateBulk is the builder for creating many Pledge entities in bulk.
type PledgeCreateBulk struct {
	config
	builders []*PledgeCreate
	conflict []sql.ConflictOption
}

// Save creates the Pledge entities in the database.
func (pcb *PledgeCreateBulk) Save(ctx context.Context) ([]*Pledge, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pledge, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PledgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PledgeCreateBulk) SaveX(ctx context.Context) []*Pledge {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PledgeCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PledgeCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pledge.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PledgeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PledgeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PledgeUpsertBulk {
	pcb.conflict = opts
	return &PledgeUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pledge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PledgeCreateBulk) OnConflictColumns(columns ...string) *PledgeUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PledgeUpsertBulk{
		create: pcb,
	}
}

// PledgeUpsertBulk is the builder for "upsert"-ing
// a bulk of Pledge nodes.
type PledgeUpsertBulk struct {
	create *PledgeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pledge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pledge.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PledgeUpsertBulk) UpdateNewValues() *PledgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pledge.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pledge.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PledgeUpsertBulk) Ignore() *PledgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PledgeUpsertBulk) DoNothing() *PledgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PledgeCreateBulk.OnConflict
// documentation for more info.
func (u *PledgeUpsertBulk) Update(set func(*PledgeUpsert)) *PledgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PledgeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PledgeUpsertBulk) SetCreatedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PledgeUpsertBulk) AddCreatedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateCreatedAt() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PledgeUpsertBulk) SetUpdatedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PledgeUpsertBulk) AddUpdatedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateUpdatedAt() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PledgeUpsertBulk) SetDeletedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PledgeUpsertBulk) AddDeletedAt(v uint32) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateDeletedAt() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *PledgeUpsertBulk) SetEntID(v uuid.UUID) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateEntID() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *PledgeUpsertBulk) SetGoodID(v uuid.UUID) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateGoodID() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *PledgeUpsertBulk) ClearGoodID() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearGoodID()
	})
}

// SetContractCodeURL sets the "contract_code_url" field.
func (u *PledgeUpsertBulk) SetContractCodeURL(v string) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractCodeURL(v)
	})
}

// UpdateContractCodeURL sets the "contract_code_url" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateContractCodeURL() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractCodeURL()
	})
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (u *PledgeUpsertBulk) ClearContractCodeURL() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractCodeURL()
	})
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (u *PledgeUpsertBulk) SetContractCodeBranch(v string) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractCodeBranch(v)
	})
}

// UpdateContractCodeBranch sets the "contract_code_branch" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateContractCodeBranch() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractCodeBranch()
	})
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (u *PledgeUpsertBulk) ClearContractCodeBranch() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractCodeBranch()
	})
}

// SetContractState sets the "contract_state" field.
func (u *PledgeUpsertBulk) SetContractState(v string) *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.SetContractState(v)
	})
}

// UpdateContractState sets the "contract_state" field to the value that was provided on create.
func (u *PledgeUpsertBulk) UpdateContractState() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.UpdateContractState()
	})
}

// ClearContractState clears the value of the "contract_state" field.
func (u *PledgeUpsertBulk) ClearContractState() *PledgeUpsertBulk {
	return u.Update(func(s *PledgeUpsert) {
		s.ClearContractState()
	})
}

// Exec executes the query.
func (u *PledgeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PledgeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PledgeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PledgeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
