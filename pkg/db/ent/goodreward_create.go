// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodreward"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodRewardCreate is the builder for creating a GoodReward entity.
type GoodRewardCreate struct {
	config
	mutation *GoodRewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (grc *GoodRewardCreate) SetCreatedAt(u uint32) *GoodRewardCreate {
	grc.mutation.SetCreatedAt(u)
	return grc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableCreatedAt(u *uint32) *GoodRewardCreate {
	if u != nil {
		grc.SetCreatedAt(*u)
	}
	return grc
}

// SetUpdatedAt sets the "updated_at" field.
func (grc *GoodRewardCreate) SetUpdatedAt(u uint32) *GoodRewardCreate {
	grc.mutation.SetUpdatedAt(u)
	return grc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableUpdatedAt(u *uint32) *GoodRewardCreate {
	if u != nil {
		grc.SetUpdatedAt(*u)
	}
	return grc
}

// SetDeletedAt sets the "deleted_at" field.
func (grc *GoodRewardCreate) SetDeletedAt(u uint32) *GoodRewardCreate {
	grc.mutation.SetDeletedAt(u)
	return grc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableDeletedAt(u *uint32) *GoodRewardCreate {
	if u != nil {
		grc.SetDeletedAt(*u)
	}
	return grc
}

// SetGoodID sets the "good_id" field.
func (grc *GoodRewardCreate) SetGoodID(u uuid.UUID) *GoodRewardCreate {
	grc.mutation.SetGoodID(u)
	return grc
}

// SetBenefitState sets the "benefit_state" field.
func (grc *GoodRewardCreate) SetBenefitState(s string) *GoodRewardCreate {
	grc.mutation.SetBenefitState(s)
	return grc
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableBenefitState(s *string) *GoodRewardCreate {
	if s != nil {
		grc.SetBenefitState(*s)
	}
	return grc
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (grc *GoodRewardCreate) SetLastBenefitAt(u uint32) *GoodRewardCreate {
	grc.mutation.SetLastBenefitAt(u)
	return grc
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableLastBenefitAt(u *uint32) *GoodRewardCreate {
	if u != nil {
		grc.SetLastBenefitAt(*u)
	}
	return grc
}

// SetBenefitTids sets the "benefit_tids" field.
func (grc *GoodRewardCreate) SetBenefitTids(u []uuid.UUID) *GoodRewardCreate {
	grc.mutation.SetBenefitTids(u)
	return grc
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (grc *GoodRewardCreate) SetNextBenefitStartAmount(d decimal.Decimal) *GoodRewardCreate {
	grc.mutation.SetNextBenefitStartAmount(d)
	return grc
}

// SetNillableNextBenefitStartAmount sets the "next_benefit_start_amount" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableNextBenefitStartAmount(d *decimal.Decimal) *GoodRewardCreate {
	if d != nil {
		grc.SetNextBenefitStartAmount(*d)
	}
	return grc
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (grc *GoodRewardCreate) SetLastBenefitAmount(d decimal.Decimal) *GoodRewardCreate {
	grc.mutation.SetLastBenefitAmount(d)
	return grc
}

// SetNillableLastBenefitAmount sets the "last_benefit_amount" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableLastBenefitAmount(d *decimal.Decimal) *GoodRewardCreate {
	if d != nil {
		grc.SetLastBenefitAmount(*d)
	}
	return grc
}

// SetID sets the "id" field.
func (grc *GoodRewardCreate) SetID(u uuid.UUID) *GoodRewardCreate {
	grc.mutation.SetID(u)
	return grc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (grc *GoodRewardCreate) SetNillableID(u *uuid.UUID) *GoodRewardCreate {
	if u != nil {
		grc.SetID(*u)
	}
	return grc
}

// Mutation returns the GoodRewardMutation object of the builder.
func (grc *GoodRewardCreate) Mutation() *GoodRewardMutation {
	return grc.mutation
}

// Save creates the GoodReward in the database.
func (grc *GoodRewardCreate) Save(ctx context.Context) (*GoodReward, error) {
	var (
		err  error
		node *GoodReward
	)
	if err := grc.defaults(); err != nil {
		return nil, err
	}
	if len(grc.hooks) == 0 {
		if err = grc.check(); err != nil {
			return nil, err
		}
		node, err = grc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodRewardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = grc.check(); err != nil {
				return nil, err
			}
			grc.mutation = mutation
			if node, err = grc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(grc.hooks) - 1; i >= 0; i-- {
			if grc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = grc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, grc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodReward)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodRewardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GoodRewardCreate) SaveX(ctx context.Context) *GoodReward {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GoodRewardCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GoodRewardCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GoodRewardCreate) defaults() error {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		if goodreward.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodreward.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodreward.DefaultCreatedAt()
		grc.mutation.SetCreatedAt(v)
	}
	if _, ok := grc.mutation.UpdatedAt(); !ok {
		if goodreward.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodreward.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodreward.DefaultUpdatedAt()
		grc.mutation.SetUpdatedAt(v)
	}
	if _, ok := grc.mutation.DeletedAt(); !ok {
		if goodreward.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodreward.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodreward.DefaultDeletedAt()
		grc.mutation.SetDeletedAt(v)
	}
	if _, ok := grc.mutation.BenefitState(); !ok {
		v := goodreward.DefaultBenefitState
		grc.mutation.SetBenefitState(v)
	}
	if _, ok := grc.mutation.LastBenefitAt(); !ok {
		v := goodreward.DefaultLastBenefitAt
		grc.mutation.SetLastBenefitAt(v)
	}
	if _, ok := grc.mutation.BenefitTids(); !ok {
		v := goodreward.DefaultBenefitTids
		grc.mutation.SetBenefitTids(v)
	}
	if _, ok := grc.mutation.NextBenefitStartAmount(); !ok {
		v := goodreward.DefaultNextBenefitStartAmount
		grc.mutation.SetNextBenefitStartAmount(v)
	}
	if _, ok := grc.mutation.LastBenefitAmount(); !ok {
		v := goodreward.DefaultLastBenefitAmount
		grc.mutation.SetLastBenefitAmount(v)
	}
	if _, ok := grc.mutation.ID(); !ok {
		if goodreward.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized goodreward.DefaultID (forgotten import ent/runtime?)")
		}
		v := goodreward.DefaultID()
		grc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (grc *GoodRewardCreate) check() error {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodReward.created_at"`)}
	}
	if _, ok := grc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodReward.updated_at"`)}
	}
	if _, ok := grc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodReward.deleted_at"`)}
	}
	if _, ok := grc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "GoodReward.good_id"`)}
	}
	return nil
}

func (grc *GoodRewardCreate) sqlSave(ctx context.Context) (*GoodReward, error) {
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (grc *GoodRewardCreate) createSpec() (*GoodReward, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodReward{config: grc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodreward.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodreward.FieldID,
			},
		}
	)
	_spec.OnConflict = grc.conflict
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := grc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodreward.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := grc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodreward.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := grc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodreward.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := grc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreward.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := grc.mutation.BenefitState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodreward.FieldBenefitState,
		})
		_node.BenefitState = value
	}
	if value, ok := grc.mutation.LastBenefitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodreward.FieldLastBenefitAt,
		})
		_node.LastBenefitAt = value
	}
	if value, ok := grc.mutation.BenefitTids(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodreward.FieldBenefitTids,
		})
		_node.BenefitTids = value
	}
	if value, ok := grc.mutation.NextBenefitStartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodreward.FieldNextBenefitStartAmount,
		})
		_node.NextBenefitStartAmount = value
	}
	if value, ok := grc.mutation.LastBenefitAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodreward.FieldLastBenefitAmount,
		})
		_node.LastBenefitAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodReward.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodRewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (grc *GoodRewardCreate) OnConflict(opts ...sql.ConflictOption) *GoodRewardUpsertOne {
	grc.conflict = opts
	return &GoodRewardUpsertOne{
		create: grc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (grc *GoodRewardCreate) OnConflictColumns(columns ...string) *GoodRewardUpsertOne {
	grc.conflict = append(grc.conflict, sql.ConflictColumns(columns...))
	return &GoodRewardUpsertOne{
		create: grc,
	}
}

type (
	// GoodRewardUpsertOne is the builder for "upsert"-ing
	//  one GoodReward node.
	GoodRewardUpsertOne struct {
		create *GoodRewardCreate
	}

	// GoodRewardUpsert is the "OnConflict" setter.
	GoodRewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodRewardUpsert) SetCreatedAt(v uint32) *GoodRewardUpsert {
	u.Set(goodreward.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateCreatedAt() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodRewardUpsert) AddCreatedAt(v uint32) *GoodRewardUpsert {
	u.Add(goodreward.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodRewardUpsert) SetUpdatedAt(v uint32) *GoodRewardUpsert {
	u.Set(goodreward.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateUpdatedAt() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodRewardUpsert) AddUpdatedAt(v uint32) *GoodRewardUpsert {
	u.Add(goodreward.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodRewardUpsert) SetDeletedAt(v uint32) *GoodRewardUpsert {
	u.Set(goodreward.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateDeletedAt() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodRewardUpsert) AddDeletedAt(v uint32) *GoodRewardUpsert {
	u.Add(goodreward.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardUpsert) SetGoodID(v uuid.UUID) *GoodRewardUpsert {
	u.Set(goodreward.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateGoodID() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldGoodID)
	return u
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodRewardUpsert) SetBenefitState(v string) *GoodRewardUpsert {
	u.Set(goodreward.FieldBenefitState, v)
	return u
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateBenefitState() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldBenefitState)
	return u
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodRewardUpsert) ClearBenefitState() *GoodRewardUpsert {
	u.SetNull(goodreward.FieldBenefitState)
	return u
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodRewardUpsert) SetLastBenefitAt(v uint32) *GoodRewardUpsert {
	u.Set(goodreward.FieldLastBenefitAt, v)
	return u
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateLastBenefitAt() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldLastBenefitAt)
	return u
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodRewardUpsert) AddLastBenefitAt(v uint32) *GoodRewardUpsert {
	u.Add(goodreward.FieldLastBenefitAt, v)
	return u
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodRewardUpsert) ClearLastBenefitAt() *GoodRewardUpsert {
	u.SetNull(goodreward.FieldLastBenefitAt)
	return u
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodRewardUpsert) SetBenefitTids(v []uuid.UUID) *GoodRewardUpsert {
	u.Set(goodreward.FieldBenefitTids, v)
	return u
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateBenefitTids() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldBenefitTids)
	return u
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodRewardUpsert) ClearBenefitTids() *GoodRewardUpsert {
	u.SetNull(goodreward.FieldBenefitTids)
	return u
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodRewardUpsert) SetNextBenefitStartAmount(v decimal.Decimal) *GoodRewardUpsert {
	u.Set(goodreward.FieldNextBenefitStartAmount, v)
	return u
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateNextBenefitStartAmount() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldNextBenefitStartAmount)
	return u
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodRewardUpsert) ClearNextBenefitStartAmount() *GoodRewardUpsert {
	u.SetNull(goodreward.FieldNextBenefitStartAmount)
	return u
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodRewardUpsert) SetLastBenefitAmount(v decimal.Decimal) *GoodRewardUpsert {
	u.Set(goodreward.FieldLastBenefitAmount, v)
	return u
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodRewardUpsert) UpdateLastBenefitAmount() *GoodRewardUpsert {
	u.SetExcluded(goodreward.FieldLastBenefitAmount)
	return u
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodRewardUpsert) ClearLastBenefitAmount() *GoodRewardUpsert {
	u.SetNull(goodreward.FieldLastBenefitAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodreward.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodRewardUpsertOne) UpdateNewValues() *GoodRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodreward.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodReward.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodRewardUpsertOne) Ignore() *GoodRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodRewardUpsertOne) DoNothing() *GoodRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodRewardCreate.OnConflict
// documentation for more info.
func (u *GoodRewardUpsertOne) Update(set func(*GoodRewardUpsert)) *GoodRewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodRewardUpsertOne) SetCreatedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodRewardUpsertOne) AddCreatedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateCreatedAt() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodRewardUpsertOne) SetUpdatedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodRewardUpsertOne) AddUpdatedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateUpdatedAt() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodRewardUpsertOne) SetDeletedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodRewardUpsertOne) AddDeletedAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateDeletedAt() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardUpsertOne) SetGoodID(v uuid.UUID) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateGoodID() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateGoodID()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodRewardUpsertOne) SetBenefitState(v string) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateBenefitState() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodRewardUpsertOne) ClearBenefitState() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearBenefitState()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodRewardUpsertOne) SetLastBenefitAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodRewardUpsertOne) AddLastBenefitAt(v uint32) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateLastBenefitAt() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodRewardUpsertOne) ClearLastBenefitAt() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodRewardUpsertOne) SetBenefitTids(v []uuid.UUID) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetBenefitTids(v)
	})
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateBenefitTids() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateBenefitTids()
	})
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodRewardUpsertOne) ClearBenefitTids() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearBenefitTids()
	})
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodRewardUpsertOne) SetNextBenefitStartAmount(v decimal.Decimal) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetNextBenefitStartAmount(v)
	})
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateNextBenefitStartAmount() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateNextBenefitStartAmount()
	})
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodRewardUpsertOne) ClearNextBenefitStartAmount() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearNextBenefitStartAmount()
	})
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodRewardUpsertOne) SetLastBenefitAmount(v decimal.Decimal) *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetLastBenefitAmount(v)
	})
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodRewardUpsertOne) UpdateLastBenefitAmount() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateLastBenefitAmount()
	})
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodRewardUpsertOne) ClearLastBenefitAmount() *GoodRewardUpsertOne {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearLastBenefitAmount()
	})
}

// Exec executes the query.
func (u *GoodRewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodRewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodRewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodRewardUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodRewardUpsertOne.ID is not supported by MySQL driver. Use GoodRewardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodRewardUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodRewardCreateBulk is the builder for creating many GoodReward entities in bulk.
type GoodRewardCreateBulk struct {
	config
	builders []*GoodRewardCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodReward entities in the database.
func (grcb *GoodRewardCreateBulk) Save(ctx context.Context) ([]*GoodReward, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GoodReward, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodRewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = grcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GoodRewardCreateBulk) SaveX(ctx context.Context) []*GoodReward {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GoodRewardCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GoodRewardCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodReward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodRewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (grcb *GoodRewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodRewardUpsertBulk {
	grcb.conflict = opts
	return &GoodRewardUpsertBulk{
		create: grcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodReward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (grcb *GoodRewardCreateBulk) OnConflictColumns(columns ...string) *GoodRewardUpsertBulk {
	grcb.conflict = append(grcb.conflict, sql.ConflictColumns(columns...))
	return &GoodRewardUpsertBulk{
		create: grcb,
	}
}

// GoodRewardUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodReward nodes.
type GoodRewardUpsertBulk struct {
	create *GoodRewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodReward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodreward.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodRewardUpsertBulk) UpdateNewValues() *GoodRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodreward.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodReward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodRewardUpsertBulk) Ignore() *GoodRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodRewardUpsertBulk) DoNothing() *GoodRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodRewardCreateBulk.OnConflict
// documentation for more info.
func (u *GoodRewardUpsertBulk) Update(set func(*GoodRewardUpsert)) *GoodRewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodRewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodRewardUpsertBulk) SetCreatedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodRewardUpsertBulk) AddCreatedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateCreatedAt() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodRewardUpsertBulk) SetUpdatedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodRewardUpsertBulk) AddUpdatedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateUpdatedAt() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodRewardUpsertBulk) SetDeletedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodRewardUpsertBulk) AddDeletedAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateDeletedAt() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodRewardUpsertBulk) SetGoodID(v uuid.UUID) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateGoodID() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateGoodID()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodRewardUpsertBulk) SetBenefitState(v string) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateBenefitState() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodRewardUpsertBulk) ClearBenefitState() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearBenefitState()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodRewardUpsertBulk) SetLastBenefitAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodRewardUpsertBulk) AddLastBenefitAt(v uint32) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateLastBenefitAt() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodRewardUpsertBulk) ClearLastBenefitAt() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodRewardUpsertBulk) SetBenefitTids(v []uuid.UUID) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetBenefitTids(v)
	})
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateBenefitTids() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateBenefitTids()
	})
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodRewardUpsertBulk) ClearBenefitTids() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearBenefitTids()
	})
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodRewardUpsertBulk) SetNextBenefitStartAmount(v decimal.Decimal) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetNextBenefitStartAmount(v)
	})
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateNextBenefitStartAmount() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateNextBenefitStartAmount()
	})
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodRewardUpsertBulk) ClearNextBenefitStartAmount() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearNextBenefitStartAmount()
	})
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodRewardUpsertBulk) SetLastBenefitAmount(v decimal.Decimal) *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.SetLastBenefitAmount(v)
	})
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodRewardUpsertBulk) UpdateLastBenefitAmount() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.UpdateLastBenefitAmount()
	})
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodRewardUpsertBulk) ClearLastBenefitAmount() *GoodRewardUpsertBulk {
	return u.Update(func(s *GoodRewardUpsert) {
		s.ClearLastBenefitAmount()
	})
}

// Exec executes the query.
func (u *GoodRewardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodRewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodRewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodRewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
