// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/applegacypowerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppLegacyPowerRental is the model entity for the AppLegacyPowerRental schema.
type AppLegacyPowerRental struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// TechniqueFeeRatio holds the value of the "technique_fee_ratio" field.
	TechniqueFeeRatio decimal.Decimal `json:"technique_fee_ratio,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppLegacyPowerRental) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applegacypowerrental.FieldTechniqueFeeRatio:
			values[i] = new(decimal.Decimal)
		case applegacypowerrental.FieldID, applegacypowerrental.FieldCreatedAt, applegacypowerrental.FieldUpdatedAt, applegacypowerrental.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case applegacypowerrental.FieldEntID, applegacypowerrental.FieldAppID, applegacypowerrental.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppLegacyPowerRental", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppLegacyPowerRental fields.
func (alpr *AppLegacyPowerRental) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applegacypowerrental.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			alpr.ID = uint32(value.Int64)
		case applegacypowerrental.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				alpr.CreatedAt = uint32(value.Int64)
			}
		case applegacypowerrental.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				alpr.UpdatedAt = uint32(value.Int64)
			}
		case applegacypowerrental.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				alpr.DeletedAt = uint32(value.Int64)
			}
		case applegacypowerrental.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				alpr.EntID = *value
			}
		case applegacypowerrental.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				alpr.AppID = *value
			}
		case applegacypowerrental.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				alpr.GoodID = *value
			}
		case applegacypowerrental.FieldTechniqueFeeRatio:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field technique_fee_ratio", values[i])
			} else if value != nil {
				alpr.TechniqueFeeRatio = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppLegacyPowerRental.
// Note that you need to call AppLegacyPowerRental.Unwrap() before calling this method if this AppLegacyPowerRental
// was returned from a transaction, and the transaction was committed or rolled back.
func (alpr *AppLegacyPowerRental) Update() *AppLegacyPowerRentalUpdateOne {
	return (&AppLegacyPowerRentalClient{config: alpr.config}).UpdateOne(alpr)
}

// Unwrap unwraps the AppLegacyPowerRental entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (alpr *AppLegacyPowerRental) Unwrap() *AppLegacyPowerRental {
	_tx, ok := alpr.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppLegacyPowerRental is not a transactional entity")
	}
	alpr.config.driver = _tx.drv
	return alpr
}

// String implements the fmt.Stringer.
func (alpr *AppLegacyPowerRental) String() string {
	var builder strings.Builder
	builder.WriteString("AppLegacyPowerRental(")
	builder.WriteString(fmt.Sprintf("id=%v, ", alpr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", alpr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", alpr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", alpr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", alpr.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", alpr.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", alpr.GoodID))
	builder.WriteString(", ")
	builder.WriteString("technique_fee_ratio=")
	builder.WriteString(fmt.Sprintf("%v", alpr.TechniqueFeeRatio))
	builder.WriteByte(')')
	return builder.String()
}

// AppLegacyPowerRentals is a parsable slice of AppLegacyPowerRental.
type AppLegacyPowerRentals []*AppLegacyPowerRental

func (alpr AppLegacyPowerRentals) config(cfg config) {
	for _i := range alpr {
		alpr[_i].config = cfg
	}
}
