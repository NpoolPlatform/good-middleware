// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredgood"
	"github.com/google/uuid"
)

// RequiredGoodUpdate is the builder for updating RequiredGood entities.
type RequiredGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *RequiredGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RequiredGoodUpdate builder.
func (rgu *RequiredGoodUpdate) Where(ps ...predicate.RequiredGood) *RequiredGoodUpdate {
	rgu.mutation.Where(ps...)
	return rgu
}

// SetCreatedAt sets the "created_at" field.
func (rgu *RequiredGoodUpdate) SetCreatedAt(u uint32) *RequiredGoodUpdate {
	rgu.mutation.ResetCreatedAt()
	rgu.mutation.SetCreatedAt(u)
	return rgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableCreatedAt(u *uint32) *RequiredGoodUpdate {
	if u != nil {
		rgu.SetCreatedAt(*u)
	}
	return rgu
}

// AddCreatedAt adds u to the "created_at" field.
func (rgu *RequiredGoodUpdate) AddCreatedAt(u int32) *RequiredGoodUpdate {
	rgu.mutation.AddCreatedAt(u)
	return rgu
}

// SetUpdatedAt sets the "updated_at" field.
func (rgu *RequiredGoodUpdate) SetUpdatedAt(u uint32) *RequiredGoodUpdate {
	rgu.mutation.ResetUpdatedAt()
	rgu.mutation.SetUpdatedAt(u)
	return rgu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rgu *RequiredGoodUpdate) AddUpdatedAt(u int32) *RequiredGoodUpdate {
	rgu.mutation.AddUpdatedAt(u)
	return rgu
}

// SetDeletedAt sets the "deleted_at" field.
func (rgu *RequiredGoodUpdate) SetDeletedAt(u uint32) *RequiredGoodUpdate {
	rgu.mutation.ResetDeletedAt()
	rgu.mutation.SetDeletedAt(u)
	return rgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableDeletedAt(u *uint32) *RequiredGoodUpdate {
	if u != nil {
		rgu.SetDeletedAt(*u)
	}
	return rgu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rgu *RequiredGoodUpdate) AddDeletedAt(u int32) *RequiredGoodUpdate {
	rgu.mutation.AddDeletedAt(u)
	return rgu
}

// SetMainGoodID sets the "main_good_id" field.
func (rgu *RequiredGoodUpdate) SetMainGoodID(u uuid.UUID) *RequiredGoodUpdate {
	rgu.mutation.SetMainGoodID(u)
	return rgu
}

// SetRequiredGoodID sets the "required_good_id" field.
func (rgu *RequiredGoodUpdate) SetRequiredGoodID(u uuid.UUID) *RequiredGoodUpdate {
	rgu.mutation.SetRequiredGoodID(u)
	return rgu
}

// SetMust sets the "must" field.
func (rgu *RequiredGoodUpdate) SetMust(b bool) *RequiredGoodUpdate {
	rgu.mutation.SetMust(b)
	return rgu
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableMust(b *bool) *RequiredGoodUpdate {
	if b != nil {
		rgu.SetMust(*b)
	}
	return rgu
}

// ClearMust clears the value of the "must" field.
func (rgu *RequiredGoodUpdate) ClearMust() *RequiredGoodUpdate {
	rgu.mutation.ClearMust()
	return rgu
}

// SetCommission sets the "commission" field.
func (rgu *RequiredGoodUpdate) SetCommission(b bool) *RequiredGoodUpdate {
	rgu.mutation.SetCommission(b)
	return rgu
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (rgu *RequiredGoodUpdate) SetNillableCommission(b *bool) *RequiredGoodUpdate {
	if b != nil {
		rgu.SetCommission(*b)
	}
	return rgu
}

// ClearCommission clears the value of the "commission" field.
func (rgu *RequiredGoodUpdate) ClearCommission() *RequiredGoodUpdate {
	rgu.mutation.ClearCommission()
	return rgu
}

// Mutation returns the RequiredGoodMutation object of the builder.
func (rgu *RequiredGoodUpdate) Mutation() *RequiredGoodMutation {
	return rgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgu *RequiredGoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := rgu.defaults(); err != nil {
		return 0, err
	}
	if len(rgu.hooks) == 0 {
		affected, err = rgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequiredGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rgu.mutation = mutation
			affected, err = rgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rgu.hooks) - 1; i >= 0; i-- {
			if rgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rgu *RequiredGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := rgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgu *RequiredGoodUpdate) Exec(ctx context.Context) error {
	_, err := rgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgu *RequiredGoodUpdate) ExecX(ctx context.Context) {
	if err := rgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rgu *RequiredGoodUpdate) defaults() error {
	if _, ok := rgu.mutation.UpdatedAt(); !ok {
		if requiredgood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := requiredgood.UpdateDefaultUpdatedAt()
		rgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rgu *RequiredGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredGoodUpdate {
	rgu.modifiers = append(rgu.modifiers, modifiers...)
	return rgu
}

func (rgu *RequiredGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requiredgood.Table,
			Columns: requiredgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: requiredgood.FieldID,
			},
		},
	}
	if ps := rgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldCreatedAt,
		})
	}
	if value, ok := rgu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldCreatedAt,
		})
	}
	if value, ok := rgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldUpdatedAt,
		})
	}
	if value, ok := rgu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldUpdatedAt,
		})
	}
	if value, ok := rgu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldDeletedAt,
		})
	}
	if value, ok := rgu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldDeletedAt,
		})
	}
	if value, ok := rgu.mutation.MainGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldMainGoodID,
		})
	}
	if value, ok := rgu.mutation.RequiredGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldRequiredGoodID,
		})
	}
	if value, ok := rgu.mutation.Must(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldMust,
		})
	}
	if rgu.mutation.MustCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: requiredgood.FieldMust,
		})
	}
	if value, ok := rgu.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldCommission,
		})
	}
	if rgu.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: requiredgood.FieldCommission,
		})
	}
	_spec.Modifiers = rgu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, rgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RequiredGoodUpdateOne is the builder for updating a single RequiredGood entity.
type RequiredGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RequiredGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (rguo *RequiredGoodUpdateOne) SetCreatedAt(u uint32) *RequiredGoodUpdateOne {
	rguo.mutation.ResetCreatedAt()
	rguo.mutation.SetCreatedAt(u)
	return rguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableCreatedAt(u *uint32) *RequiredGoodUpdateOne {
	if u != nil {
		rguo.SetCreatedAt(*u)
	}
	return rguo
}

// AddCreatedAt adds u to the "created_at" field.
func (rguo *RequiredGoodUpdateOne) AddCreatedAt(u int32) *RequiredGoodUpdateOne {
	rguo.mutation.AddCreatedAt(u)
	return rguo
}

// SetUpdatedAt sets the "updated_at" field.
func (rguo *RequiredGoodUpdateOne) SetUpdatedAt(u uint32) *RequiredGoodUpdateOne {
	rguo.mutation.ResetUpdatedAt()
	rguo.mutation.SetUpdatedAt(u)
	return rguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rguo *RequiredGoodUpdateOne) AddUpdatedAt(u int32) *RequiredGoodUpdateOne {
	rguo.mutation.AddUpdatedAt(u)
	return rguo
}

// SetDeletedAt sets the "deleted_at" field.
func (rguo *RequiredGoodUpdateOne) SetDeletedAt(u uint32) *RequiredGoodUpdateOne {
	rguo.mutation.ResetDeletedAt()
	rguo.mutation.SetDeletedAt(u)
	return rguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableDeletedAt(u *uint32) *RequiredGoodUpdateOne {
	if u != nil {
		rguo.SetDeletedAt(*u)
	}
	return rguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rguo *RequiredGoodUpdateOne) AddDeletedAt(u int32) *RequiredGoodUpdateOne {
	rguo.mutation.AddDeletedAt(u)
	return rguo
}

// SetMainGoodID sets the "main_good_id" field.
func (rguo *RequiredGoodUpdateOne) SetMainGoodID(u uuid.UUID) *RequiredGoodUpdateOne {
	rguo.mutation.SetMainGoodID(u)
	return rguo
}

// SetRequiredGoodID sets the "required_good_id" field.
func (rguo *RequiredGoodUpdateOne) SetRequiredGoodID(u uuid.UUID) *RequiredGoodUpdateOne {
	rguo.mutation.SetRequiredGoodID(u)
	return rguo
}

// SetMust sets the "must" field.
func (rguo *RequiredGoodUpdateOne) SetMust(b bool) *RequiredGoodUpdateOne {
	rguo.mutation.SetMust(b)
	return rguo
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableMust(b *bool) *RequiredGoodUpdateOne {
	if b != nil {
		rguo.SetMust(*b)
	}
	return rguo
}

// ClearMust clears the value of the "must" field.
func (rguo *RequiredGoodUpdateOne) ClearMust() *RequiredGoodUpdateOne {
	rguo.mutation.ClearMust()
	return rguo
}

// SetCommission sets the "commission" field.
func (rguo *RequiredGoodUpdateOne) SetCommission(b bool) *RequiredGoodUpdateOne {
	rguo.mutation.SetCommission(b)
	return rguo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (rguo *RequiredGoodUpdateOne) SetNillableCommission(b *bool) *RequiredGoodUpdateOne {
	if b != nil {
		rguo.SetCommission(*b)
	}
	return rguo
}

// ClearCommission clears the value of the "commission" field.
func (rguo *RequiredGoodUpdateOne) ClearCommission() *RequiredGoodUpdateOne {
	rguo.mutation.ClearCommission()
	return rguo
}

// Mutation returns the RequiredGoodMutation object of the builder.
func (rguo *RequiredGoodUpdateOne) Mutation() *RequiredGoodMutation {
	return rguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rguo *RequiredGoodUpdateOne) Select(field string, fields ...string) *RequiredGoodUpdateOne {
	rguo.fields = append([]string{field}, fields...)
	return rguo
}

// Save executes the query and returns the updated RequiredGood entity.
func (rguo *RequiredGoodUpdateOne) Save(ctx context.Context) (*RequiredGood, error) {
	var (
		err  error
		node *RequiredGood
	)
	if err := rguo.defaults(); err != nil {
		return nil, err
	}
	if len(rguo.hooks) == 0 {
		node, err = rguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequiredGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rguo.mutation = mutation
			node, err = rguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rguo.hooks) - 1; i >= 0; i-- {
			if rguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RequiredGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RequiredGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rguo *RequiredGoodUpdateOne) SaveX(ctx context.Context) *RequiredGood {
	node, err := rguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rguo *RequiredGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := rguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rguo *RequiredGoodUpdateOne) ExecX(ctx context.Context) {
	if err := rguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rguo *RequiredGoodUpdateOne) defaults() error {
	if _, ok := rguo.mutation.UpdatedAt(); !ok {
		if requiredgood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized requiredgood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := requiredgood.UpdateDefaultUpdatedAt()
		rguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rguo *RequiredGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RequiredGoodUpdateOne {
	rguo.modifiers = append(rguo.modifiers, modifiers...)
	return rguo
}

func (rguo *RequiredGoodUpdateOne) sqlSave(ctx context.Context) (_node *RequiredGood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requiredgood.Table,
			Columns: requiredgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: requiredgood.FieldID,
			},
		},
	}
	id, ok := rguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RequiredGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requiredgood.FieldID)
		for _, f := range fields {
			if !requiredgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requiredgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldCreatedAt,
		})
	}
	if value, ok := rguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldCreatedAt,
		})
	}
	if value, ok := rguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldUpdatedAt,
		})
	}
	if value, ok := rguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldUpdatedAt,
		})
	}
	if value, ok := rguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldDeletedAt,
		})
	}
	if value, ok := rguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: requiredgood.FieldDeletedAt,
		})
	}
	if value, ok := rguo.mutation.MainGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldMainGoodID,
		})
	}
	if value, ok := rguo.mutation.RequiredGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: requiredgood.FieldRequiredGoodID,
		})
	}
	if value, ok := rguo.mutation.Must(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldMust,
		})
	}
	if rguo.mutation.MustCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: requiredgood.FieldMust,
		})
	}
	if value, ok := rguo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: requiredgood.FieldCommission,
		})
	}
	if rguo.mutation.CommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: requiredgood.FieldCommission,
		})
	}
	_spec.Modifiers = rguo.modifiers
	_node = &RequiredGood{config: rguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requiredgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
