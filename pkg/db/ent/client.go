// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appdefaultgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/comment"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/extrainfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/promotion"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/recommend"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/subgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorlocation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppDefaultGood is the client for interacting with the AppDefaultGood builders.
	AppDefaultGood *AppDefaultGoodClient
	// AppGood is the client for interacting with the AppGood builders.
	AppGood *AppGoodClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// DeviceInfo is the client for interacting with the DeviceInfo builders.
	DeviceInfo *DeviceInfoClient
	// ExtraInfo is the client for interacting with the ExtraInfo builders.
	ExtraInfo *ExtraInfoClient
	// Good is the client for interacting with the Good builders.
	Good *GoodClient
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// Recommend is the client for interacting with the Recommend builders.
	Recommend *RecommendClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// SubGood is the client for interacting with the SubGood builders.
	SubGood *SubGoodClient
	// VendorLocation is the client for interacting with the VendorLocation builders.
	VendorLocation *VendorLocationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppDefaultGood = NewAppDefaultGoodClient(c.config)
	c.AppGood = NewAppGoodClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.DeviceInfo = NewDeviceInfoClient(c.config)
	c.ExtraInfo = NewExtraInfoClient(c.config)
	c.Good = NewGoodClient(c.config)
	c.Promotion = NewPromotionClient(c.config)
	c.Recommend = NewRecommendClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.SubGood = NewSubGoodClient(c.config)
	c.VendorLocation = NewVendorLocationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AppDefaultGood: NewAppDefaultGoodClient(cfg),
		AppGood:        NewAppGoodClient(cfg),
		Comment:        NewCommentClient(cfg),
		DeviceInfo:     NewDeviceInfoClient(cfg),
		ExtraInfo:      NewExtraInfoClient(cfg),
		Good:           NewGoodClient(cfg),
		Promotion:      NewPromotionClient(cfg),
		Recommend:      NewRecommendClient(cfg),
		Stock:          NewStockClient(cfg),
		SubGood:        NewSubGoodClient(cfg),
		VendorLocation: NewVendorLocationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AppDefaultGood: NewAppDefaultGoodClient(cfg),
		AppGood:        NewAppGoodClient(cfg),
		Comment:        NewCommentClient(cfg),
		DeviceInfo:     NewDeviceInfoClient(cfg),
		ExtraInfo:      NewExtraInfoClient(cfg),
		Good:           NewGoodClient(cfg),
		Promotion:      NewPromotionClient(cfg),
		Recommend:      NewRecommendClient(cfg),
		Stock:          NewStockClient(cfg),
		SubGood:        NewSubGoodClient(cfg),
		VendorLocation: NewVendorLocationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppDefaultGood.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppDefaultGood.Use(hooks...)
	c.AppGood.Use(hooks...)
	c.Comment.Use(hooks...)
	c.DeviceInfo.Use(hooks...)
	c.ExtraInfo.Use(hooks...)
	c.Good.Use(hooks...)
	c.Promotion.Use(hooks...)
	c.Recommend.Use(hooks...)
	c.Stock.Use(hooks...)
	c.SubGood.Use(hooks...)
	c.VendorLocation.Use(hooks...)
}

// AppDefaultGoodClient is a client for the AppDefaultGood schema.
type AppDefaultGoodClient struct {
	config
}

// NewAppDefaultGoodClient returns a client for the AppDefaultGood from the given config.
func NewAppDefaultGoodClient(c config) *AppDefaultGoodClient {
	return &AppDefaultGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appdefaultgood.Hooks(f(g(h())))`.
func (c *AppDefaultGoodClient) Use(hooks ...Hook) {
	c.hooks.AppDefaultGood = append(c.hooks.AppDefaultGood, hooks...)
}

// Create returns a builder for creating a AppDefaultGood entity.
func (c *AppDefaultGoodClient) Create() *AppDefaultGoodCreate {
	mutation := newAppDefaultGoodMutation(c.config, OpCreate)
	return &AppDefaultGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppDefaultGood entities.
func (c *AppDefaultGoodClient) CreateBulk(builders ...*AppDefaultGoodCreate) *AppDefaultGoodCreateBulk {
	return &AppDefaultGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Update() *AppDefaultGoodUpdate {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdate)
	return &AppDefaultGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppDefaultGoodClient) UpdateOne(adg *AppDefaultGood) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGood(adg))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppDefaultGoodClient) UpdateOneID(id uuid.UUID) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGoodID(id))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Delete() *AppDefaultGoodDelete {
	mutation := newAppDefaultGoodMutation(c.config, OpDelete)
	return &AppDefaultGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppDefaultGoodClient) DeleteOne(adg *AppDefaultGood) *AppDefaultGoodDeleteOne {
	return c.DeleteOneID(adg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppDefaultGoodClient) DeleteOneID(id uuid.UUID) *AppDefaultGoodDeleteOne {
	builder := c.Delete().Where(appdefaultgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDefaultGoodDeleteOne{builder}
}

// Query returns a query builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Query() *AppDefaultGoodQuery {
	return &AppDefaultGoodQuery{
		config: c.config,
	}
}

// Get returns a AppDefaultGood entity by its id.
func (c *AppDefaultGoodClient) Get(ctx context.Context, id uuid.UUID) (*AppDefaultGood, error) {
	return c.Query().Where(appdefaultgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppDefaultGoodClient) GetX(ctx context.Context, id uuid.UUID) *AppDefaultGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppDefaultGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppDefaultGood
	return append(hooks[:len(hooks):len(hooks)], appdefaultgood.Hooks[:]...)
}

// AppGoodClient is a client for the AppGood schema.
type AppGoodClient struct {
	config
}

// NewAppGoodClient returns a client for the AppGood from the given config.
func NewAppGoodClient(c config) *AppGoodClient {
	return &AppGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgood.Hooks(f(g(h())))`.
func (c *AppGoodClient) Use(hooks ...Hook) {
	c.hooks.AppGood = append(c.hooks.AppGood, hooks...)
}

// Create returns a builder for creating a AppGood entity.
func (c *AppGoodClient) Create() *AppGoodCreate {
	mutation := newAppGoodMutation(c.config, OpCreate)
	return &AppGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGood entities.
func (c *AppGoodClient) CreateBulk(builders ...*AppGoodCreate) *AppGoodCreateBulk {
	return &AppGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGood.
func (c *AppGoodClient) Update() *AppGoodUpdate {
	mutation := newAppGoodMutation(c.config, OpUpdate)
	return &AppGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodClient) UpdateOne(ag *AppGood) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGood(ag))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodClient) UpdateOneID(id uuid.UUID) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGoodID(id))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGood.
func (c *AppGoodClient) Delete() *AppGoodDelete {
	mutation := newAppGoodMutation(c.config, OpDelete)
	return &AppGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodClient) DeleteOne(ag *AppGood) *AppGoodDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodClient) DeleteOneID(id uuid.UUID) *AppGoodDeleteOne {
	builder := c.Delete().Where(appgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDeleteOne{builder}
}

// Query returns a query builder for AppGood.
func (c *AppGoodClient) Query() *AppGoodQuery {
	return &AppGoodQuery{
		config: c.config,
	}
}

// Get returns a AppGood entity by its id.
func (c *AppGoodClient) Get(ctx context.Context, id uuid.UUID) (*AppGood, error) {
	return c.Query().Where(appgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodClient) GetX(ctx context.Context, id uuid.UUID) *AppGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppGood
	return append(hooks[:len(hooks):len(hooks)], appgood.Hooks[:]...)
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Create returns a builder for creating a Comment entity.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id uuid.UUID) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CommentClient) DeleteOneID(id uuid.UUID) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id uuid.UUID) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id uuid.UUID) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	hooks := c.hooks.Comment
	return append(hooks[:len(hooks):len(hooks)], comment.Hooks[:]...)
}

// DeviceInfoClient is a client for the DeviceInfo schema.
type DeviceInfoClient struct {
	config
}

// NewDeviceInfoClient returns a client for the DeviceInfo from the given config.
func NewDeviceInfoClient(c config) *DeviceInfoClient {
	return &DeviceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinfo.Hooks(f(g(h())))`.
func (c *DeviceInfoClient) Use(hooks ...Hook) {
	c.hooks.DeviceInfo = append(c.hooks.DeviceInfo, hooks...)
}

// Create returns a builder for creating a DeviceInfo entity.
func (c *DeviceInfoClient) Create() *DeviceInfoCreate {
	mutation := newDeviceInfoMutation(c.config, OpCreate)
	return &DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInfo entities.
func (c *DeviceInfoClient) CreateBulk(builders ...*DeviceInfoCreate) *DeviceInfoCreateBulk {
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInfo.
func (c *DeviceInfoClient) Update() *DeviceInfoUpdate {
	mutation := newDeviceInfoMutation(c.config, OpUpdate)
	return &DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInfoClient) UpdateOne(di *DeviceInfo) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfo(di))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInfoClient) UpdateOneID(id uuid.UUID) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfoID(id))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInfo.
func (c *DeviceInfoClient) Delete() *DeviceInfoDelete {
	mutation := newDeviceInfoMutation(c.config, OpDelete)
	return &DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInfoClient) DeleteOne(di *DeviceInfo) *DeviceInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DeviceInfoClient) DeleteOneID(id uuid.UUID) *DeviceInfoDeleteOne {
	builder := c.Delete().Where(deviceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInfoDeleteOne{builder}
}

// Query returns a query builder for DeviceInfo.
func (c *DeviceInfoClient) Query() *DeviceInfoQuery {
	return &DeviceInfoQuery{
		config: c.config,
	}
}

// Get returns a DeviceInfo entity by its id.
func (c *DeviceInfoClient) Get(ctx context.Context, id uuid.UUID) (*DeviceInfo, error) {
	return c.Query().Where(deviceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInfoClient) GetX(ctx context.Context, id uuid.UUID) *DeviceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeviceInfoClient) Hooks() []Hook {
	hooks := c.hooks.DeviceInfo
	return append(hooks[:len(hooks):len(hooks)], deviceinfo.Hooks[:]...)
}

// ExtraInfoClient is a client for the ExtraInfo schema.
type ExtraInfoClient struct {
	config
}

// NewExtraInfoClient returns a client for the ExtraInfo from the given config.
func NewExtraInfoClient(c config) *ExtraInfoClient {
	return &ExtraInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `extrainfo.Hooks(f(g(h())))`.
func (c *ExtraInfoClient) Use(hooks ...Hook) {
	c.hooks.ExtraInfo = append(c.hooks.ExtraInfo, hooks...)
}

// Create returns a builder for creating a ExtraInfo entity.
func (c *ExtraInfoClient) Create() *ExtraInfoCreate {
	mutation := newExtraInfoMutation(c.config, OpCreate)
	return &ExtraInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExtraInfo entities.
func (c *ExtraInfoClient) CreateBulk(builders ...*ExtraInfoCreate) *ExtraInfoCreateBulk {
	return &ExtraInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExtraInfo.
func (c *ExtraInfoClient) Update() *ExtraInfoUpdate {
	mutation := newExtraInfoMutation(c.config, OpUpdate)
	return &ExtraInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExtraInfoClient) UpdateOne(ei *ExtraInfo) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfo(ei))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExtraInfoClient) UpdateOneID(id uuid.UUID) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfoID(id))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExtraInfo.
func (c *ExtraInfoClient) Delete() *ExtraInfoDelete {
	mutation := newExtraInfoMutation(c.config, OpDelete)
	return &ExtraInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExtraInfoClient) DeleteOne(ei *ExtraInfo) *ExtraInfoDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ExtraInfoClient) DeleteOneID(id uuid.UUID) *ExtraInfoDeleteOne {
	builder := c.Delete().Where(extrainfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExtraInfoDeleteOne{builder}
}

// Query returns a query builder for ExtraInfo.
func (c *ExtraInfoClient) Query() *ExtraInfoQuery {
	return &ExtraInfoQuery{
		config: c.config,
	}
}

// Get returns a ExtraInfo entity by its id.
func (c *ExtraInfoClient) Get(ctx context.Context, id uuid.UUID) (*ExtraInfo, error) {
	return c.Query().Where(extrainfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExtraInfoClient) GetX(ctx context.Context, id uuid.UUID) *ExtraInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExtraInfoClient) Hooks() []Hook {
	hooks := c.hooks.ExtraInfo
	return append(hooks[:len(hooks):len(hooks)], extrainfo.Hooks[:]...)
}

// GoodClient is a client for the Good schema.
type GoodClient struct {
	config
}

// NewGoodClient returns a client for the Good from the given config.
func NewGoodClient(c config) *GoodClient {
	return &GoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `good.Hooks(f(g(h())))`.
func (c *GoodClient) Use(hooks ...Hook) {
	c.hooks.Good = append(c.hooks.Good, hooks...)
}

// Create returns a builder for creating a Good entity.
func (c *GoodClient) Create() *GoodCreate {
	mutation := newGoodMutation(c.config, OpCreate)
	return &GoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Good entities.
func (c *GoodClient) CreateBulk(builders ...*GoodCreate) *GoodCreateBulk {
	return &GoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Good.
func (c *GoodClient) Update() *GoodUpdate {
	mutation := newGoodMutation(c.config, OpUpdate)
	return &GoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodClient) UpdateOne(_go *Good) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGood(_go))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodClient) UpdateOneID(id uuid.UUID) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGoodID(id))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Good.
func (c *GoodClient) Delete() *GoodDelete {
	mutation := newGoodMutation(c.config, OpDelete)
	return &GoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodClient) DeleteOne(_go *Good) *GoodDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodClient) DeleteOneID(id uuid.UUID) *GoodDeleteOne {
	builder := c.Delete().Where(good.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodDeleteOne{builder}
}

// Query returns a query builder for Good.
func (c *GoodClient) Query() *GoodQuery {
	return &GoodQuery{
		config: c.config,
	}
}

// Get returns a Good entity by its id.
func (c *GoodClient) Get(ctx context.Context, id uuid.UUID) (*Good, error) {
	return c.Query().Where(good.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodClient) GetX(ctx context.Context, id uuid.UUID) *Good {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodClient) Hooks() []Hook {
	hooks := c.hooks.Good
	return append(hooks[:len(hooks):len(hooks)], good.Hooks[:]...)
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a builder for creating a Promotion entity.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Promotion entities.
func (c *PromotionClient) CreateBulk(builders ...*PromotionCreate) *PromotionCreateBulk {
	return &PromotionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id uuid.UUID) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PromotionClient) DeleteOneID(id uuid.UUID) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Query returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{
		config: c.config,
	}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id uuid.UUID) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id uuid.UUID) *Promotion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	hooks := c.hooks.Promotion
	return append(hooks[:len(hooks):len(hooks)], promotion.Hooks[:]...)
}

// RecommendClient is a client for the Recommend schema.
type RecommendClient struct {
	config
}

// NewRecommendClient returns a client for the Recommend from the given config.
func NewRecommendClient(c config) *RecommendClient {
	return &RecommendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommend.Hooks(f(g(h())))`.
func (c *RecommendClient) Use(hooks ...Hook) {
	c.hooks.Recommend = append(c.hooks.Recommend, hooks...)
}

// Create returns a builder for creating a Recommend entity.
func (c *RecommendClient) Create() *RecommendCreate {
	mutation := newRecommendMutation(c.config, OpCreate)
	return &RecommendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recommend entities.
func (c *RecommendClient) CreateBulk(builders ...*RecommendCreate) *RecommendCreateBulk {
	return &RecommendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recommend.
func (c *RecommendClient) Update() *RecommendUpdate {
	mutation := newRecommendMutation(c.config, OpUpdate)
	return &RecommendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendClient) UpdateOne(r *Recommend) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommend(r))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendClient) UpdateOneID(id uuid.UUID) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommendID(id))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recommend.
func (c *RecommendClient) Delete() *RecommendDelete {
	mutation := newRecommendMutation(c.config, OpDelete)
	return &RecommendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendClient) DeleteOne(r *Recommend) *RecommendDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RecommendClient) DeleteOneID(id uuid.UUID) *RecommendDeleteOne {
	builder := c.Delete().Where(recommend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendDeleteOne{builder}
}

// Query returns a query builder for Recommend.
func (c *RecommendClient) Query() *RecommendQuery {
	return &RecommendQuery{
		config: c.config,
	}
}

// Get returns a Recommend entity by its id.
func (c *RecommendClient) Get(ctx context.Context, id uuid.UUID) (*Recommend, error) {
	return c.Query().Where(recommend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendClient) GetX(ctx context.Context, id uuid.UUID) *Recommend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RecommendClient) Hooks() []Hook {
	hooks := c.hooks.Recommend
	return append(hooks[:len(hooks):len(hooks)], recommend.Hooks[:]...)
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uuid.UUID) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uuid.UUID) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uuid.UUID) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uuid.UUID) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	hooks := c.hooks.Stock
	return append(hooks[:len(hooks):len(hooks)], stock.Hooks[:]...)
}

// SubGoodClient is a client for the SubGood schema.
type SubGoodClient struct {
	config
}

// NewSubGoodClient returns a client for the SubGood from the given config.
func NewSubGoodClient(c config) *SubGoodClient {
	return &SubGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subgood.Hooks(f(g(h())))`.
func (c *SubGoodClient) Use(hooks ...Hook) {
	c.hooks.SubGood = append(c.hooks.SubGood, hooks...)
}

// Create returns a builder for creating a SubGood entity.
func (c *SubGoodClient) Create() *SubGoodCreate {
	mutation := newSubGoodMutation(c.config, OpCreate)
	return &SubGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubGood entities.
func (c *SubGoodClient) CreateBulk(builders ...*SubGoodCreate) *SubGoodCreateBulk {
	return &SubGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubGood.
func (c *SubGoodClient) Update() *SubGoodUpdate {
	mutation := newSubGoodMutation(c.config, OpUpdate)
	return &SubGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubGoodClient) UpdateOne(sg *SubGood) *SubGoodUpdateOne {
	mutation := newSubGoodMutation(c.config, OpUpdateOne, withSubGood(sg))
	return &SubGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubGoodClient) UpdateOneID(id uuid.UUID) *SubGoodUpdateOne {
	mutation := newSubGoodMutation(c.config, OpUpdateOne, withSubGoodID(id))
	return &SubGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubGood.
func (c *SubGoodClient) Delete() *SubGoodDelete {
	mutation := newSubGoodMutation(c.config, OpDelete)
	return &SubGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubGoodClient) DeleteOne(sg *SubGood) *SubGoodDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SubGoodClient) DeleteOneID(id uuid.UUID) *SubGoodDeleteOne {
	builder := c.Delete().Where(subgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubGoodDeleteOne{builder}
}

// Query returns a query builder for SubGood.
func (c *SubGoodClient) Query() *SubGoodQuery {
	return &SubGoodQuery{
		config: c.config,
	}
}

// Get returns a SubGood entity by its id.
func (c *SubGoodClient) Get(ctx context.Context, id uuid.UUID) (*SubGood, error) {
	return c.Query().Where(subgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubGoodClient) GetX(ctx context.Context, id uuid.UUID) *SubGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubGoodClient) Hooks() []Hook {
	hooks := c.hooks.SubGood
	return append(hooks[:len(hooks):len(hooks)], subgood.Hooks[:]...)
}

// VendorLocationClient is a client for the VendorLocation schema.
type VendorLocationClient struct {
	config
}

// NewVendorLocationClient returns a client for the VendorLocation from the given config.
func NewVendorLocationClient(c config) *VendorLocationClient {
	return &VendorLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendorlocation.Hooks(f(g(h())))`.
func (c *VendorLocationClient) Use(hooks ...Hook) {
	c.hooks.VendorLocation = append(c.hooks.VendorLocation, hooks...)
}

// Create returns a builder for creating a VendorLocation entity.
func (c *VendorLocationClient) Create() *VendorLocationCreate {
	mutation := newVendorLocationMutation(c.config, OpCreate)
	return &VendorLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VendorLocation entities.
func (c *VendorLocationClient) CreateBulk(builders ...*VendorLocationCreate) *VendorLocationCreateBulk {
	return &VendorLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VendorLocation.
func (c *VendorLocationClient) Update() *VendorLocationUpdate {
	mutation := newVendorLocationMutation(c.config, OpUpdate)
	return &VendorLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorLocationClient) UpdateOne(vl *VendorLocation) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocation(vl))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorLocationClient) UpdateOneID(id uuid.UUID) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocationID(id))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VendorLocation.
func (c *VendorLocationClient) Delete() *VendorLocationDelete {
	mutation := newVendorLocationMutation(c.config, OpDelete)
	return &VendorLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VendorLocationClient) DeleteOne(vl *VendorLocation) *VendorLocationDeleteOne {
	return c.DeleteOneID(vl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VendorLocationClient) DeleteOneID(id uuid.UUID) *VendorLocationDeleteOne {
	builder := c.Delete().Where(vendorlocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorLocationDeleteOne{builder}
}

// Query returns a query builder for VendorLocation.
func (c *VendorLocationClient) Query() *VendorLocationQuery {
	return &VendorLocationQuery{
		config: c.config,
	}
}

// Get returns a VendorLocation entity by its id.
func (c *VendorLocationClient) Get(ctx context.Context, id uuid.UUID) (*VendorLocation, error) {
	return c.Query().Where(vendorlocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorLocationClient) GetX(ctx context.Context, id uuid.UUID) *VendorLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VendorLocationClient) Hooks() []Hook {
	hooks := c.hooks.VendorLocation
	return append(hooks[:len(hooks):len(hooks)], vendorlocation.Hooks[:]...)
}
