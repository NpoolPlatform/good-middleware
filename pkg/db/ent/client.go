// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appdefaultgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstocklock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/comment"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/extrainfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodreward"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodrewardhistory"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/like"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/promotion"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/recommend"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/score"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmost"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorbrand"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorlocation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppDefaultGood is the client for interacting with the AppDefaultGood builders.
	AppDefaultGood *AppDefaultGoodClient
	// AppGood is the client for interacting with the AppGood builders.
	AppGood *AppGoodClient
	// AppStock is the client for interacting with the AppStock builders.
	AppStock *AppStockClient
	// AppStockLock is the client for interacting with the AppStockLock builders.
	AppStockLock *AppStockLockClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// DeviceInfo is the client for interacting with the DeviceInfo builders.
	DeviceInfo *DeviceInfoClient
	// ExtraInfo is the client for interacting with the ExtraInfo builders.
	ExtraInfo *ExtraInfoClient
	// Good is the client for interacting with the Good builders.
	Good *GoodClient
	// GoodReward is the client for interacting with the GoodReward builders.
	GoodReward *GoodRewardClient
	// GoodRewardHistory is the client for interacting with the GoodRewardHistory builders.
	GoodRewardHistory *GoodRewardHistoryClient
	// Like is the client for interacting with the Like builders.
	Like *LikeClient
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// Recommend is the client for interacting with the Recommend builders.
	Recommend *RecommendClient
	// RequiredGood is the client for interacting with the RequiredGood builders.
	RequiredGood *RequiredGoodClient
	// Score is the client for interacting with the Score builders.
	Score *ScoreClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// TopMost is the client for interacting with the TopMost builders.
	TopMost *TopMostClient
	// TopMostGood is the client for interacting with the TopMostGood builders.
	TopMostGood *TopMostGoodClient
	// VendorBrand is the client for interacting with the VendorBrand builders.
	VendorBrand *VendorBrandClient
	// VendorLocation is the client for interacting with the VendorLocation builders.
	VendorLocation *VendorLocationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppDefaultGood = NewAppDefaultGoodClient(c.config)
	c.AppGood = NewAppGoodClient(c.config)
	c.AppStock = NewAppStockClient(c.config)
	c.AppStockLock = NewAppStockLockClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.DeviceInfo = NewDeviceInfoClient(c.config)
	c.ExtraInfo = NewExtraInfoClient(c.config)
	c.Good = NewGoodClient(c.config)
	c.GoodReward = NewGoodRewardClient(c.config)
	c.GoodRewardHistory = NewGoodRewardHistoryClient(c.config)
	c.Like = NewLikeClient(c.config)
	c.Promotion = NewPromotionClient(c.config)
	c.Recommend = NewRecommendClient(c.config)
	c.RequiredGood = NewRequiredGoodClient(c.config)
	c.Score = NewScoreClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.TopMost = NewTopMostClient(c.config)
	c.TopMostGood = NewTopMostGoodClient(c.config)
	c.VendorBrand = NewVendorBrandClient(c.config)
	c.VendorLocation = NewVendorLocationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AppDefaultGood:    NewAppDefaultGoodClient(cfg),
		AppGood:           NewAppGoodClient(cfg),
		AppStock:          NewAppStockClient(cfg),
		AppStockLock:      NewAppStockLockClient(cfg),
		Comment:           NewCommentClient(cfg),
		DeviceInfo:        NewDeviceInfoClient(cfg),
		ExtraInfo:         NewExtraInfoClient(cfg),
		Good:              NewGoodClient(cfg),
		GoodReward:        NewGoodRewardClient(cfg),
		GoodRewardHistory: NewGoodRewardHistoryClient(cfg),
		Like:              NewLikeClient(cfg),
		Promotion:         NewPromotionClient(cfg),
		Recommend:         NewRecommendClient(cfg),
		RequiredGood:      NewRequiredGoodClient(cfg),
		Score:             NewScoreClient(cfg),
		Stock:             NewStockClient(cfg),
		TopMost:           NewTopMostClient(cfg),
		TopMostGood:       NewTopMostGoodClient(cfg),
		VendorBrand:       NewVendorBrandClient(cfg),
		VendorLocation:    NewVendorLocationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AppDefaultGood:    NewAppDefaultGoodClient(cfg),
		AppGood:           NewAppGoodClient(cfg),
		AppStock:          NewAppStockClient(cfg),
		AppStockLock:      NewAppStockLockClient(cfg),
		Comment:           NewCommentClient(cfg),
		DeviceInfo:        NewDeviceInfoClient(cfg),
		ExtraInfo:         NewExtraInfoClient(cfg),
		Good:              NewGoodClient(cfg),
		GoodReward:        NewGoodRewardClient(cfg),
		GoodRewardHistory: NewGoodRewardHistoryClient(cfg),
		Like:              NewLikeClient(cfg),
		Promotion:         NewPromotionClient(cfg),
		Recommend:         NewRecommendClient(cfg),
		RequiredGood:      NewRequiredGoodClient(cfg),
		Score:             NewScoreClient(cfg),
		Stock:             NewStockClient(cfg),
		TopMost:           NewTopMostClient(cfg),
		TopMostGood:       NewTopMostGoodClient(cfg),
		VendorBrand:       NewVendorBrandClient(cfg),
		VendorLocation:    NewVendorLocationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppDefaultGood.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppDefaultGood.Use(hooks...)
	c.AppGood.Use(hooks...)
	c.AppStock.Use(hooks...)
	c.AppStockLock.Use(hooks...)
	c.Comment.Use(hooks...)
	c.DeviceInfo.Use(hooks...)
	c.ExtraInfo.Use(hooks...)
	c.Good.Use(hooks...)
	c.GoodReward.Use(hooks...)
	c.GoodRewardHistory.Use(hooks...)
	c.Like.Use(hooks...)
	c.Promotion.Use(hooks...)
	c.Recommend.Use(hooks...)
	c.RequiredGood.Use(hooks...)
	c.Score.Use(hooks...)
	c.Stock.Use(hooks...)
	c.TopMost.Use(hooks...)
	c.TopMostGood.Use(hooks...)
	c.VendorBrand.Use(hooks...)
	c.VendorLocation.Use(hooks...)
}

// AppDefaultGoodClient is a client for the AppDefaultGood schema.
type AppDefaultGoodClient struct {
	config
}

// NewAppDefaultGoodClient returns a client for the AppDefaultGood from the given config.
func NewAppDefaultGoodClient(c config) *AppDefaultGoodClient {
	return &AppDefaultGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appdefaultgood.Hooks(f(g(h())))`.
func (c *AppDefaultGoodClient) Use(hooks ...Hook) {
	c.hooks.AppDefaultGood = append(c.hooks.AppDefaultGood, hooks...)
}

// Create returns a builder for creating a AppDefaultGood entity.
func (c *AppDefaultGoodClient) Create() *AppDefaultGoodCreate {
	mutation := newAppDefaultGoodMutation(c.config, OpCreate)
	return &AppDefaultGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppDefaultGood entities.
func (c *AppDefaultGoodClient) CreateBulk(builders ...*AppDefaultGoodCreate) *AppDefaultGoodCreateBulk {
	return &AppDefaultGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Update() *AppDefaultGoodUpdate {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdate)
	return &AppDefaultGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppDefaultGoodClient) UpdateOne(adg *AppDefaultGood) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGood(adg))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppDefaultGoodClient) UpdateOneID(id uuid.UUID) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGoodID(id))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Delete() *AppDefaultGoodDelete {
	mutation := newAppDefaultGoodMutation(c.config, OpDelete)
	return &AppDefaultGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppDefaultGoodClient) DeleteOne(adg *AppDefaultGood) *AppDefaultGoodDeleteOne {
	return c.DeleteOneID(adg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppDefaultGoodClient) DeleteOneID(id uuid.UUID) *AppDefaultGoodDeleteOne {
	builder := c.Delete().Where(appdefaultgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDefaultGoodDeleteOne{builder}
}

// Query returns a query builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Query() *AppDefaultGoodQuery {
	return &AppDefaultGoodQuery{
		config: c.config,
	}
}

// Get returns a AppDefaultGood entity by its id.
func (c *AppDefaultGoodClient) Get(ctx context.Context, id uuid.UUID) (*AppDefaultGood, error) {
	return c.Query().Where(appdefaultgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppDefaultGoodClient) GetX(ctx context.Context, id uuid.UUID) *AppDefaultGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppDefaultGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppDefaultGood
	return append(hooks[:len(hooks):len(hooks)], appdefaultgood.Hooks[:]...)
}

// AppGoodClient is a client for the AppGood schema.
type AppGoodClient struct {
	config
}

// NewAppGoodClient returns a client for the AppGood from the given config.
func NewAppGoodClient(c config) *AppGoodClient {
	return &AppGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgood.Hooks(f(g(h())))`.
func (c *AppGoodClient) Use(hooks ...Hook) {
	c.hooks.AppGood = append(c.hooks.AppGood, hooks...)
}

// Create returns a builder for creating a AppGood entity.
func (c *AppGoodClient) Create() *AppGoodCreate {
	mutation := newAppGoodMutation(c.config, OpCreate)
	return &AppGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGood entities.
func (c *AppGoodClient) CreateBulk(builders ...*AppGoodCreate) *AppGoodCreateBulk {
	return &AppGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGood.
func (c *AppGoodClient) Update() *AppGoodUpdate {
	mutation := newAppGoodMutation(c.config, OpUpdate)
	return &AppGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodClient) UpdateOne(ag *AppGood) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGood(ag))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodClient) UpdateOneID(id uuid.UUID) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGoodID(id))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGood.
func (c *AppGoodClient) Delete() *AppGoodDelete {
	mutation := newAppGoodMutation(c.config, OpDelete)
	return &AppGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodClient) DeleteOne(ag *AppGood) *AppGoodDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodClient) DeleteOneID(id uuid.UUID) *AppGoodDeleteOne {
	builder := c.Delete().Where(appgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDeleteOne{builder}
}

// Query returns a query builder for AppGood.
func (c *AppGoodClient) Query() *AppGoodQuery {
	return &AppGoodQuery{
		config: c.config,
	}
}

// Get returns a AppGood entity by its id.
func (c *AppGoodClient) Get(ctx context.Context, id uuid.UUID) (*AppGood, error) {
	return c.Query().Where(appgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodClient) GetX(ctx context.Context, id uuid.UUID) *AppGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppGood
	return append(hooks[:len(hooks):len(hooks)], appgood.Hooks[:]...)
}

// AppStockClient is a client for the AppStock schema.
type AppStockClient struct {
	config
}

// NewAppStockClient returns a client for the AppStock from the given config.
func NewAppStockClient(c config) *AppStockClient {
	return &AppStockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstock.Hooks(f(g(h())))`.
func (c *AppStockClient) Use(hooks ...Hook) {
	c.hooks.AppStock = append(c.hooks.AppStock, hooks...)
}

// Create returns a builder for creating a AppStock entity.
func (c *AppStockClient) Create() *AppStockCreate {
	mutation := newAppStockMutation(c.config, OpCreate)
	return &AppStockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStock entities.
func (c *AppStockClient) CreateBulk(builders ...*AppStockCreate) *AppStockCreateBulk {
	return &AppStockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStock.
func (c *AppStockClient) Update() *AppStockUpdate {
	mutation := newAppStockMutation(c.config, OpUpdate)
	return &AppStockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStockClient) UpdateOne(as *AppStock) *AppStockUpdateOne {
	mutation := newAppStockMutation(c.config, OpUpdateOne, withAppStock(as))
	return &AppStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStockClient) UpdateOneID(id uuid.UUID) *AppStockUpdateOne {
	mutation := newAppStockMutation(c.config, OpUpdateOne, withAppStockID(id))
	return &AppStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStock.
func (c *AppStockClient) Delete() *AppStockDelete {
	mutation := newAppStockMutation(c.config, OpDelete)
	return &AppStockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStockClient) DeleteOne(as *AppStock) *AppStockDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppStockClient) DeleteOneID(id uuid.UUID) *AppStockDeleteOne {
	builder := c.Delete().Where(appstock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStockDeleteOne{builder}
}

// Query returns a query builder for AppStock.
func (c *AppStockClient) Query() *AppStockQuery {
	return &AppStockQuery{
		config: c.config,
	}
}

// Get returns a AppStock entity by its id.
func (c *AppStockClient) Get(ctx context.Context, id uuid.UUID) (*AppStock, error) {
	return c.Query().Where(appstock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStockClient) GetX(ctx context.Context, id uuid.UUID) *AppStock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppStockClient) Hooks() []Hook {
	hooks := c.hooks.AppStock
	return append(hooks[:len(hooks):len(hooks)], appstock.Hooks[:]...)
}

// AppStockLockClient is a client for the AppStockLock schema.
type AppStockLockClient struct {
	config
}

// NewAppStockLockClient returns a client for the AppStockLock from the given config.
func NewAppStockLockClient(c config) *AppStockLockClient {
	return &AppStockLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstocklock.Hooks(f(g(h())))`.
func (c *AppStockLockClient) Use(hooks ...Hook) {
	c.hooks.AppStockLock = append(c.hooks.AppStockLock, hooks...)
}

// Create returns a builder for creating a AppStockLock entity.
func (c *AppStockLockClient) Create() *AppStockLockCreate {
	mutation := newAppStockLockMutation(c.config, OpCreate)
	return &AppStockLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStockLock entities.
func (c *AppStockLockClient) CreateBulk(builders ...*AppStockLockCreate) *AppStockLockCreateBulk {
	return &AppStockLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStockLock.
func (c *AppStockLockClient) Update() *AppStockLockUpdate {
	mutation := newAppStockLockMutation(c.config, OpUpdate)
	return &AppStockLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStockLockClient) UpdateOne(asl *AppStockLock) *AppStockLockUpdateOne {
	mutation := newAppStockLockMutation(c.config, OpUpdateOne, withAppStockLock(asl))
	return &AppStockLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStockLockClient) UpdateOneID(id uuid.UUID) *AppStockLockUpdateOne {
	mutation := newAppStockLockMutation(c.config, OpUpdateOne, withAppStockLockID(id))
	return &AppStockLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStockLock.
func (c *AppStockLockClient) Delete() *AppStockLockDelete {
	mutation := newAppStockLockMutation(c.config, OpDelete)
	return &AppStockLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStockLockClient) DeleteOne(asl *AppStockLock) *AppStockLockDeleteOne {
	return c.DeleteOneID(asl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppStockLockClient) DeleteOneID(id uuid.UUID) *AppStockLockDeleteOne {
	builder := c.Delete().Where(appstocklock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStockLockDeleteOne{builder}
}

// Query returns a query builder for AppStockLock.
func (c *AppStockLockClient) Query() *AppStockLockQuery {
	return &AppStockLockQuery{
		config: c.config,
	}
}

// Get returns a AppStockLock entity by its id.
func (c *AppStockLockClient) Get(ctx context.Context, id uuid.UUID) (*AppStockLock, error) {
	return c.Query().Where(appstocklock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStockLockClient) GetX(ctx context.Context, id uuid.UUID) *AppStockLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppStockLockClient) Hooks() []Hook {
	hooks := c.hooks.AppStockLock
	return append(hooks[:len(hooks):len(hooks)], appstocklock.Hooks[:]...)
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Create returns a builder for creating a Comment entity.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id uuid.UUID) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CommentClient) DeleteOneID(id uuid.UUID) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id uuid.UUID) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id uuid.UUID) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	hooks := c.hooks.Comment
	return append(hooks[:len(hooks):len(hooks)], comment.Hooks[:]...)
}

// DeviceInfoClient is a client for the DeviceInfo schema.
type DeviceInfoClient struct {
	config
}

// NewDeviceInfoClient returns a client for the DeviceInfo from the given config.
func NewDeviceInfoClient(c config) *DeviceInfoClient {
	return &DeviceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinfo.Hooks(f(g(h())))`.
func (c *DeviceInfoClient) Use(hooks ...Hook) {
	c.hooks.DeviceInfo = append(c.hooks.DeviceInfo, hooks...)
}

// Create returns a builder for creating a DeviceInfo entity.
func (c *DeviceInfoClient) Create() *DeviceInfoCreate {
	mutation := newDeviceInfoMutation(c.config, OpCreate)
	return &DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInfo entities.
func (c *DeviceInfoClient) CreateBulk(builders ...*DeviceInfoCreate) *DeviceInfoCreateBulk {
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInfo.
func (c *DeviceInfoClient) Update() *DeviceInfoUpdate {
	mutation := newDeviceInfoMutation(c.config, OpUpdate)
	return &DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInfoClient) UpdateOne(di *DeviceInfo) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfo(di))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInfoClient) UpdateOneID(id uuid.UUID) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfoID(id))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInfo.
func (c *DeviceInfoClient) Delete() *DeviceInfoDelete {
	mutation := newDeviceInfoMutation(c.config, OpDelete)
	return &DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInfoClient) DeleteOne(di *DeviceInfo) *DeviceInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DeviceInfoClient) DeleteOneID(id uuid.UUID) *DeviceInfoDeleteOne {
	builder := c.Delete().Where(deviceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInfoDeleteOne{builder}
}

// Query returns a query builder for DeviceInfo.
func (c *DeviceInfoClient) Query() *DeviceInfoQuery {
	return &DeviceInfoQuery{
		config: c.config,
	}
}

// Get returns a DeviceInfo entity by its id.
func (c *DeviceInfoClient) Get(ctx context.Context, id uuid.UUID) (*DeviceInfo, error) {
	return c.Query().Where(deviceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInfoClient) GetX(ctx context.Context, id uuid.UUID) *DeviceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeviceInfoClient) Hooks() []Hook {
	hooks := c.hooks.DeviceInfo
	return append(hooks[:len(hooks):len(hooks)], deviceinfo.Hooks[:]...)
}

// ExtraInfoClient is a client for the ExtraInfo schema.
type ExtraInfoClient struct {
	config
}

// NewExtraInfoClient returns a client for the ExtraInfo from the given config.
func NewExtraInfoClient(c config) *ExtraInfoClient {
	return &ExtraInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `extrainfo.Hooks(f(g(h())))`.
func (c *ExtraInfoClient) Use(hooks ...Hook) {
	c.hooks.ExtraInfo = append(c.hooks.ExtraInfo, hooks...)
}

// Create returns a builder for creating a ExtraInfo entity.
func (c *ExtraInfoClient) Create() *ExtraInfoCreate {
	mutation := newExtraInfoMutation(c.config, OpCreate)
	return &ExtraInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExtraInfo entities.
func (c *ExtraInfoClient) CreateBulk(builders ...*ExtraInfoCreate) *ExtraInfoCreateBulk {
	return &ExtraInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExtraInfo.
func (c *ExtraInfoClient) Update() *ExtraInfoUpdate {
	mutation := newExtraInfoMutation(c.config, OpUpdate)
	return &ExtraInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExtraInfoClient) UpdateOne(ei *ExtraInfo) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfo(ei))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExtraInfoClient) UpdateOneID(id uuid.UUID) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfoID(id))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExtraInfo.
func (c *ExtraInfoClient) Delete() *ExtraInfoDelete {
	mutation := newExtraInfoMutation(c.config, OpDelete)
	return &ExtraInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExtraInfoClient) DeleteOne(ei *ExtraInfo) *ExtraInfoDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ExtraInfoClient) DeleteOneID(id uuid.UUID) *ExtraInfoDeleteOne {
	builder := c.Delete().Where(extrainfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExtraInfoDeleteOne{builder}
}

// Query returns a query builder for ExtraInfo.
func (c *ExtraInfoClient) Query() *ExtraInfoQuery {
	return &ExtraInfoQuery{
		config: c.config,
	}
}

// Get returns a ExtraInfo entity by its id.
func (c *ExtraInfoClient) Get(ctx context.Context, id uuid.UUID) (*ExtraInfo, error) {
	return c.Query().Where(extrainfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExtraInfoClient) GetX(ctx context.Context, id uuid.UUID) *ExtraInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExtraInfoClient) Hooks() []Hook {
	hooks := c.hooks.ExtraInfo
	return append(hooks[:len(hooks):len(hooks)], extrainfo.Hooks[:]...)
}

// GoodClient is a client for the Good schema.
type GoodClient struct {
	config
}

// NewGoodClient returns a client for the Good from the given config.
func NewGoodClient(c config) *GoodClient {
	return &GoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `good.Hooks(f(g(h())))`.
func (c *GoodClient) Use(hooks ...Hook) {
	c.hooks.Good = append(c.hooks.Good, hooks...)
}

// Create returns a builder for creating a Good entity.
func (c *GoodClient) Create() *GoodCreate {
	mutation := newGoodMutation(c.config, OpCreate)
	return &GoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Good entities.
func (c *GoodClient) CreateBulk(builders ...*GoodCreate) *GoodCreateBulk {
	return &GoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Good.
func (c *GoodClient) Update() *GoodUpdate {
	mutation := newGoodMutation(c.config, OpUpdate)
	return &GoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodClient) UpdateOne(_go *Good) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGood(_go))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodClient) UpdateOneID(id uuid.UUID) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGoodID(id))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Good.
func (c *GoodClient) Delete() *GoodDelete {
	mutation := newGoodMutation(c.config, OpDelete)
	return &GoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodClient) DeleteOne(_go *Good) *GoodDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodClient) DeleteOneID(id uuid.UUID) *GoodDeleteOne {
	builder := c.Delete().Where(good.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodDeleteOne{builder}
}

// Query returns a query builder for Good.
func (c *GoodClient) Query() *GoodQuery {
	return &GoodQuery{
		config: c.config,
	}
}

// Get returns a Good entity by its id.
func (c *GoodClient) Get(ctx context.Context, id uuid.UUID) (*Good, error) {
	return c.Query().Where(good.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodClient) GetX(ctx context.Context, id uuid.UUID) *Good {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodClient) Hooks() []Hook {
	hooks := c.hooks.Good
	return append(hooks[:len(hooks):len(hooks)], good.Hooks[:]...)
}

// GoodRewardClient is a client for the GoodReward schema.
type GoodRewardClient struct {
	config
}

// NewGoodRewardClient returns a client for the GoodReward from the given config.
func NewGoodRewardClient(c config) *GoodRewardClient {
	return &GoodRewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodreward.Hooks(f(g(h())))`.
func (c *GoodRewardClient) Use(hooks ...Hook) {
	c.hooks.GoodReward = append(c.hooks.GoodReward, hooks...)
}

// Create returns a builder for creating a GoodReward entity.
func (c *GoodRewardClient) Create() *GoodRewardCreate {
	mutation := newGoodRewardMutation(c.config, OpCreate)
	return &GoodRewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodReward entities.
func (c *GoodRewardClient) CreateBulk(builders ...*GoodRewardCreate) *GoodRewardCreateBulk {
	return &GoodRewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodReward.
func (c *GoodRewardClient) Update() *GoodRewardUpdate {
	mutation := newGoodRewardMutation(c.config, OpUpdate)
	return &GoodRewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodRewardClient) UpdateOne(gr *GoodReward) *GoodRewardUpdateOne {
	mutation := newGoodRewardMutation(c.config, OpUpdateOne, withGoodReward(gr))
	return &GoodRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodRewardClient) UpdateOneID(id uuid.UUID) *GoodRewardUpdateOne {
	mutation := newGoodRewardMutation(c.config, OpUpdateOne, withGoodRewardID(id))
	return &GoodRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodReward.
func (c *GoodRewardClient) Delete() *GoodRewardDelete {
	mutation := newGoodRewardMutation(c.config, OpDelete)
	return &GoodRewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodRewardClient) DeleteOne(gr *GoodReward) *GoodRewardDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodRewardClient) DeleteOneID(id uuid.UUID) *GoodRewardDeleteOne {
	builder := c.Delete().Where(goodreward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodRewardDeleteOne{builder}
}

// Query returns a query builder for GoodReward.
func (c *GoodRewardClient) Query() *GoodRewardQuery {
	return &GoodRewardQuery{
		config: c.config,
	}
}

// Get returns a GoodReward entity by its id.
func (c *GoodRewardClient) Get(ctx context.Context, id uuid.UUID) (*GoodReward, error) {
	return c.Query().Where(goodreward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodRewardClient) GetX(ctx context.Context, id uuid.UUID) *GoodReward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodRewardClient) Hooks() []Hook {
	hooks := c.hooks.GoodReward
	return append(hooks[:len(hooks):len(hooks)], goodreward.Hooks[:]...)
}

// GoodRewardHistoryClient is a client for the GoodRewardHistory schema.
type GoodRewardHistoryClient struct {
	config
}

// NewGoodRewardHistoryClient returns a client for the GoodRewardHistory from the given config.
func NewGoodRewardHistoryClient(c config) *GoodRewardHistoryClient {
	return &GoodRewardHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodrewardhistory.Hooks(f(g(h())))`.
func (c *GoodRewardHistoryClient) Use(hooks ...Hook) {
	c.hooks.GoodRewardHistory = append(c.hooks.GoodRewardHistory, hooks...)
}

// Create returns a builder for creating a GoodRewardHistory entity.
func (c *GoodRewardHistoryClient) Create() *GoodRewardHistoryCreate {
	mutation := newGoodRewardHistoryMutation(c.config, OpCreate)
	return &GoodRewardHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodRewardHistory entities.
func (c *GoodRewardHistoryClient) CreateBulk(builders ...*GoodRewardHistoryCreate) *GoodRewardHistoryCreateBulk {
	return &GoodRewardHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Update() *GoodRewardHistoryUpdate {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdate)
	return &GoodRewardHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodRewardHistoryClient) UpdateOne(grh *GoodRewardHistory) *GoodRewardHistoryUpdateOne {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdateOne, withGoodRewardHistory(grh))
	return &GoodRewardHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodRewardHistoryClient) UpdateOneID(id uuid.UUID) *GoodRewardHistoryUpdateOne {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdateOne, withGoodRewardHistoryID(id))
	return &GoodRewardHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Delete() *GoodRewardHistoryDelete {
	mutation := newGoodRewardHistoryMutation(c.config, OpDelete)
	return &GoodRewardHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodRewardHistoryClient) DeleteOne(grh *GoodRewardHistory) *GoodRewardHistoryDeleteOne {
	return c.DeleteOneID(grh.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodRewardHistoryClient) DeleteOneID(id uuid.UUID) *GoodRewardHistoryDeleteOne {
	builder := c.Delete().Where(goodrewardhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodRewardHistoryDeleteOne{builder}
}

// Query returns a query builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Query() *GoodRewardHistoryQuery {
	return &GoodRewardHistoryQuery{
		config: c.config,
	}
}

// Get returns a GoodRewardHistory entity by its id.
func (c *GoodRewardHistoryClient) Get(ctx context.Context, id uuid.UUID) (*GoodRewardHistory, error) {
	return c.Query().Where(goodrewardhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodRewardHistoryClient) GetX(ctx context.Context, id uuid.UUID) *GoodRewardHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodRewardHistoryClient) Hooks() []Hook {
	hooks := c.hooks.GoodRewardHistory
	return append(hooks[:len(hooks):len(hooks)], goodrewardhistory.Hooks[:]...)
}

// LikeClient is a client for the Like schema.
type LikeClient struct {
	config
}

// NewLikeClient returns a client for the Like from the given config.
func NewLikeClient(c config) *LikeClient {
	return &LikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `like.Hooks(f(g(h())))`.
func (c *LikeClient) Use(hooks ...Hook) {
	c.hooks.Like = append(c.hooks.Like, hooks...)
}

// Create returns a builder for creating a Like entity.
func (c *LikeClient) Create() *LikeCreate {
	mutation := newLikeMutation(c.config, OpCreate)
	return &LikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Like entities.
func (c *LikeClient) CreateBulk(builders ...*LikeCreate) *LikeCreateBulk {
	return &LikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Like.
func (c *LikeClient) Update() *LikeUpdate {
	mutation := newLikeMutation(c.config, OpUpdate)
	return &LikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LikeClient) UpdateOne(l *Like) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLike(l))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LikeClient) UpdateOneID(id uuid.UUID) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLikeID(id))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Like.
func (c *LikeClient) Delete() *LikeDelete {
	mutation := newLikeMutation(c.config, OpDelete)
	return &LikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LikeClient) DeleteOne(l *Like) *LikeDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LikeClient) DeleteOneID(id uuid.UUID) *LikeDeleteOne {
	builder := c.Delete().Where(like.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LikeDeleteOne{builder}
}

// Query returns a query builder for Like.
func (c *LikeClient) Query() *LikeQuery {
	return &LikeQuery{
		config: c.config,
	}
}

// Get returns a Like entity by its id.
func (c *LikeClient) Get(ctx context.Context, id uuid.UUID) (*Like, error) {
	return c.Query().Where(like.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LikeClient) GetX(ctx context.Context, id uuid.UUID) *Like {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LikeClient) Hooks() []Hook {
	hooks := c.hooks.Like
	return append(hooks[:len(hooks):len(hooks)], like.Hooks[:]...)
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a builder for creating a Promotion entity.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Promotion entities.
func (c *PromotionClient) CreateBulk(builders ...*PromotionCreate) *PromotionCreateBulk {
	return &PromotionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id uuid.UUID) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PromotionClient) DeleteOneID(id uuid.UUID) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Query returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{
		config: c.config,
	}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id uuid.UUID) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id uuid.UUID) *Promotion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	hooks := c.hooks.Promotion
	return append(hooks[:len(hooks):len(hooks)], promotion.Hooks[:]...)
}

// RecommendClient is a client for the Recommend schema.
type RecommendClient struct {
	config
}

// NewRecommendClient returns a client for the Recommend from the given config.
func NewRecommendClient(c config) *RecommendClient {
	return &RecommendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommend.Hooks(f(g(h())))`.
func (c *RecommendClient) Use(hooks ...Hook) {
	c.hooks.Recommend = append(c.hooks.Recommend, hooks...)
}

// Create returns a builder for creating a Recommend entity.
func (c *RecommendClient) Create() *RecommendCreate {
	mutation := newRecommendMutation(c.config, OpCreate)
	return &RecommendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recommend entities.
func (c *RecommendClient) CreateBulk(builders ...*RecommendCreate) *RecommendCreateBulk {
	return &RecommendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recommend.
func (c *RecommendClient) Update() *RecommendUpdate {
	mutation := newRecommendMutation(c.config, OpUpdate)
	return &RecommendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendClient) UpdateOne(r *Recommend) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommend(r))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendClient) UpdateOneID(id uuid.UUID) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommendID(id))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recommend.
func (c *RecommendClient) Delete() *RecommendDelete {
	mutation := newRecommendMutation(c.config, OpDelete)
	return &RecommendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendClient) DeleteOne(r *Recommend) *RecommendDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RecommendClient) DeleteOneID(id uuid.UUID) *RecommendDeleteOne {
	builder := c.Delete().Where(recommend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendDeleteOne{builder}
}

// Query returns a query builder for Recommend.
func (c *RecommendClient) Query() *RecommendQuery {
	return &RecommendQuery{
		config: c.config,
	}
}

// Get returns a Recommend entity by its id.
func (c *RecommendClient) Get(ctx context.Context, id uuid.UUID) (*Recommend, error) {
	return c.Query().Where(recommend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendClient) GetX(ctx context.Context, id uuid.UUID) *Recommend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RecommendClient) Hooks() []Hook {
	hooks := c.hooks.Recommend
	return append(hooks[:len(hooks):len(hooks)], recommend.Hooks[:]...)
}

// RequiredGoodClient is a client for the RequiredGood schema.
type RequiredGoodClient struct {
	config
}

// NewRequiredGoodClient returns a client for the RequiredGood from the given config.
func NewRequiredGoodClient(c config) *RequiredGoodClient {
	return &RequiredGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requiredgood.Hooks(f(g(h())))`.
func (c *RequiredGoodClient) Use(hooks ...Hook) {
	c.hooks.RequiredGood = append(c.hooks.RequiredGood, hooks...)
}

// Create returns a builder for creating a RequiredGood entity.
func (c *RequiredGoodClient) Create() *RequiredGoodCreate {
	mutation := newRequiredGoodMutation(c.config, OpCreate)
	return &RequiredGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequiredGood entities.
func (c *RequiredGoodClient) CreateBulk(builders ...*RequiredGoodCreate) *RequiredGoodCreateBulk {
	return &RequiredGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequiredGood.
func (c *RequiredGoodClient) Update() *RequiredGoodUpdate {
	mutation := newRequiredGoodMutation(c.config, OpUpdate)
	return &RequiredGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequiredGoodClient) UpdateOne(rg *RequiredGood) *RequiredGoodUpdateOne {
	mutation := newRequiredGoodMutation(c.config, OpUpdateOne, withRequiredGood(rg))
	return &RequiredGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequiredGoodClient) UpdateOneID(id uuid.UUID) *RequiredGoodUpdateOne {
	mutation := newRequiredGoodMutation(c.config, OpUpdateOne, withRequiredGoodID(id))
	return &RequiredGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequiredGood.
func (c *RequiredGoodClient) Delete() *RequiredGoodDelete {
	mutation := newRequiredGoodMutation(c.config, OpDelete)
	return &RequiredGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequiredGoodClient) DeleteOne(rg *RequiredGood) *RequiredGoodDeleteOne {
	return c.DeleteOneID(rg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RequiredGoodClient) DeleteOneID(id uuid.UUID) *RequiredGoodDeleteOne {
	builder := c.Delete().Where(requiredgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequiredGoodDeleteOne{builder}
}

// Query returns a query builder for RequiredGood.
func (c *RequiredGoodClient) Query() *RequiredGoodQuery {
	return &RequiredGoodQuery{
		config: c.config,
	}
}

// Get returns a RequiredGood entity by its id.
func (c *RequiredGoodClient) Get(ctx context.Context, id uuid.UUID) (*RequiredGood, error) {
	return c.Query().Where(requiredgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequiredGoodClient) GetX(ctx context.Context, id uuid.UUID) *RequiredGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RequiredGoodClient) Hooks() []Hook {
	hooks := c.hooks.RequiredGood
	return append(hooks[:len(hooks):len(hooks)], requiredgood.Hooks[:]...)
}

// ScoreClient is a client for the Score schema.
type ScoreClient struct {
	config
}

// NewScoreClient returns a client for the Score from the given config.
func NewScoreClient(c config) *ScoreClient {
	return &ScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `score.Hooks(f(g(h())))`.
func (c *ScoreClient) Use(hooks ...Hook) {
	c.hooks.Score = append(c.hooks.Score, hooks...)
}

// Create returns a builder for creating a Score entity.
func (c *ScoreClient) Create() *ScoreCreate {
	mutation := newScoreMutation(c.config, OpCreate)
	return &ScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Score entities.
func (c *ScoreClient) CreateBulk(builders ...*ScoreCreate) *ScoreCreateBulk {
	return &ScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Score.
func (c *ScoreClient) Update() *ScoreUpdate {
	mutation := newScoreMutation(c.config, OpUpdate)
	return &ScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoreClient) UpdateOne(s *Score) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScore(s))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoreClient) UpdateOneID(id uuid.UUID) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScoreID(id))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Score.
func (c *ScoreClient) Delete() *ScoreDelete {
	mutation := newScoreMutation(c.config, OpDelete)
	return &ScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoreClient) DeleteOne(s *Score) *ScoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ScoreClient) DeleteOneID(id uuid.UUID) *ScoreDeleteOne {
	builder := c.Delete().Where(score.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoreDeleteOne{builder}
}

// Query returns a query builder for Score.
func (c *ScoreClient) Query() *ScoreQuery {
	return &ScoreQuery{
		config: c.config,
	}
}

// Get returns a Score entity by its id.
func (c *ScoreClient) Get(ctx context.Context, id uuid.UUID) (*Score, error) {
	return c.Query().Where(score.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoreClient) GetX(ctx context.Context, id uuid.UUID) *Score {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScoreClient) Hooks() []Hook {
	hooks := c.hooks.Score
	return append(hooks[:len(hooks):len(hooks)], score.Hooks[:]...)
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uuid.UUID) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uuid.UUID) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uuid.UUID) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uuid.UUID) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	hooks := c.hooks.Stock
	return append(hooks[:len(hooks):len(hooks)], stock.Hooks[:]...)
}

// TopMostClient is a client for the TopMost schema.
type TopMostClient struct {
	config
}

// NewTopMostClient returns a client for the TopMost from the given config.
func NewTopMostClient(c config) *TopMostClient {
	return &TopMostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmost.Hooks(f(g(h())))`.
func (c *TopMostClient) Use(hooks ...Hook) {
	c.hooks.TopMost = append(c.hooks.TopMost, hooks...)
}

// Create returns a builder for creating a TopMost entity.
func (c *TopMostClient) Create() *TopMostCreate {
	mutation := newTopMostMutation(c.config, OpCreate)
	return &TopMostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMost entities.
func (c *TopMostClient) CreateBulk(builders ...*TopMostCreate) *TopMostCreateBulk {
	return &TopMostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMost.
func (c *TopMostClient) Update() *TopMostUpdate {
	mutation := newTopMostMutation(c.config, OpUpdate)
	return &TopMostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostClient) UpdateOne(tm *TopMost) *TopMostUpdateOne {
	mutation := newTopMostMutation(c.config, OpUpdateOne, withTopMost(tm))
	return &TopMostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostClient) UpdateOneID(id uuid.UUID) *TopMostUpdateOne {
	mutation := newTopMostMutation(c.config, OpUpdateOne, withTopMostID(id))
	return &TopMostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMost.
func (c *TopMostClient) Delete() *TopMostDelete {
	mutation := newTopMostMutation(c.config, OpDelete)
	return &TopMostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostClient) DeleteOne(tm *TopMost) *TopMostDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostClient) DeleteOneID(id uuid.UUID) *TopMostDeleteOne {
	builder := c.Delete().Where(topmost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostDeleteOne{builder}
}

// Query returns a query builder for TopMost.
func (c *TopMostClient) Query() *TopMostQuery {
	return &TopMostQuery{
		config: c.config,
	}
}

// Get returns a TopMost entity by its id.
func (c *TopMostClient) Get(ctx context.Context, id uuid.UUID) (*TopMost, error) {
	return c.Query().Where(topmost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostClient) GetX(ctx context.Context, id uuid.UUID) *TopMost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostClient) Hooks() []Hook {
	hooks := c.hooks.TopMost
	return append(hooks[:len(hooks):len(hooks)], topmost.Hooks[:]...)
}

// TopMostGoodClient is a client for the TopMostGood schema.
type TopMostGoodClient struct {
	config
}

// NewTopMostGoodClient returns a client for the TopMostGood from the given config.
func NewTopMostGoodClient(c config) *TopMostGoodClient {
	return &TopMostGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostgood.Hooks(f(g(h())))`.
func (c *TopMostGoodClient) Use(hooks ...Hook) {
	c.hooks.TopMostGood = append(c.hooks.TopMostGood, hooks...)
}

// Create returns a builder for creating a TopMostGood entity.
func (c *TopMostGoodClient) Create() *TopMostGoodCreate {
	mutation := newTopMostGoodMutation(c.config, OpCreate)
	return &TopMostGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostGood entities.
func (c *TopMostGoodClient) CreateBulk(builders ...*TopMostGoodCreate) *TopMostGoodCreateBulk {
	return &TopMostGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostGood.
func (c *TopMostGoodClient) Update() *TopMostGoodUpdate {
	mutation := newTopMostGoodMutation(c.config, OpUpdate)
	return &TopMostGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostGoodClient) UpdateOne(tmg *TopMostGood) *TopMostGoodUpdateOne {
	mutation := newTopMostGoodMutation(c.config, OpUpdateOne, withTopMostGood(tmg))
	return &TopMostGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostGoodClient) UpdateOneID(id uuid.UUID) *TopMostGoodUpdateOne {
	mutation := newTopMostGoodMutation(c.config, OpUpdateOne, withTopMostGoodID(id))
	return &TopMostGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostGood.
func (c *TopMostGoodClient) Delete() *TopMostGoodDelete {
	mutation := newTopMostGoodMutation(c.config, OpDelete)
	return &TopMostGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostGoodClient) DeleteOne(tmg *TopMostGood) *TopMostGoodDeleteOne {
	return c.DeleteOneID(tmg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostGoodClient) DeleteOneID(id uuid.UUID) *TopMostGoodDeleteOne {
	builder := c.Delete().Where(topmostgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostGoodDeleteOne{builder}
}

// Query returns a query builder for TopMostGood.
func (c *TopMostGoodClient) Query() *TopMostGoodQuery {
	return &TopMostGoodQuery{
		config: c.config,
	}
}

// Get returns a TopMostGood entity by its id.
func (c *TopMostGoodClient) Get(ctx context.Context, id uuid.UUID) (*TopMostGood, error) {
	return c.Query().Where(topmostgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostGoodClient) GetX(ctx context.Context, id uuid.UUID) *TopMostGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostGoodClient) Hooks() []Hook {
	hooks := c.hooks.TopMostGood
	return append(hooks[:len(hooks):len(hooks)], topmostgood.Hooks[:]...)
}

// VendorBrandClient is a client for the VendorBrand schema.
type VendorBrandClient struct {
	config
}

// NewVendorBrandClient returns a client for the VendorBrand from the given config.
func NewVendorBrandClient(c config) *VendorBrandClient {
	return &VendorBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendorbrand.Hooks(f(g(h())))`.
func (c *VendorBrandClient) Use(hooks ...Hook) {
	c.hooks.VendorBrand = append(c.hooks.VendorBrand, hooks...)
}

// Create returns a builder for creating a VendorBrand entity.
func (c *VendorBrandClient) Create() *VendorBrandCreate {
	mutation := newVendorBrandMutation(c.config, OpCreate)
	return &VendorBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VendorBrand entities.
func (c *VendorBrandClient) CreateBulk(builders ...*VendorBrandCreate) *VendorBrandCreateBulk {
	return &VendorBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VendorBrand.
func (c *VendorBrandClient) Update() *VendorBrandUpdate {
	mutation := newVendorBrandMutation(c.config, OpUpdate)
	return &VendorBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorBrandClient) UpdateOne(vb *VendorBrand) *VendorBrandUpdateOne {
	mutation := newVendorBrandMutation(c.config, OpUpdateOne, withVendorBrand(vb))
	return &VendorBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorBrandClient) UpdateOneID(id uuid.UUID) *VendorBrandUpdateOne {
	mutation := newVendorBrandMutation(c.config, OpUpdateOne, withVendorBrandID(id))
	return &VendorBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VendorBrand.
func (c *VendorBrandClient) Delete() *VendorBrandDelete {
	mutation := newVendorBrandMutation(c.config, OpDelete)
	return &VendorBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VendorBrandClient) DeleteOne(vb *VendorBrand) *VendorBrandDeleteOne {
	return c.DeleteOneID(vb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VendorBrandClient) DeleteOneID(id uuid.UUID) *VendorBrandDeleteOne {
	builder := c.Delete().Where(vendorbrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorBrandDeleteOne{builder}
}

// Query returns a query builder for VendorBrand.
func (c *VendorBrandClient) Query() *VendorBrandQuery {
	return &VendorBrandQuery{
		config: c.config,
	}
}

// Get returns a VendorBrand entity by its id.
func (c *VendorBrandClient) Get(ctx context.Context, id uuid.UUID) (*VendorBrand, error) {
	return c.Query().Where(vendorbrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorBrandClient) GetX(ctx context.Context, id uuid.UUID) *VendorBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VendorBrandClient) Hooks() []Hook {
	hooks := c.hooks.VendorBrand
	return append(hooks[:len(hooks):len(hooks)], vendorbrand.Hooks[:]...)
}

// VendorLocationClient is a client for the VendorLocation schema.
type VendorLocationClient struct {
	config
}

// NewVendorLocationClient returns a client for the VendorLocation from the given config.
func NewVendorLocationClient(c config) *VendorLocationClient {
	return &VendorLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendorlocation.Hooks(f(g(h())))`.
func (c *VendorLocationClient) Use(hooks ...Hook) {
	c.hooks.VendorLocation = append(c.hooks.VendorLocation, hooks...)
}

// Create returns a builder for creating a VendorLocation entity.
func (c *VendorLocationClient) Create() *VendorLocationCreate {
	mutation := newVendorLocationMutation(c.config, OpCreate)
	return &VendorLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VendorLocation entities.
func (c *VendorLocationClient) CreateBulk(builders ...*VendorLocationCreate) *VendorLocationCreateBulk {
	return &VendorLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VendorLocation.
func (c *VendorLocationClient) Update() *VendorLocationUpdate {
	mutation := newVendorLocationMutation(c.config, OpUpdate)
	return &VendorLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorLocationClient) UpdateOne(vl *VendorLocation) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocation(vl))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorLocationClient) UpdateOneID(id uuid.UUID) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocationID(id))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VendorLocation.
func (c *VendorLocationClient) Delete() *VendorLocationDelete {
	mutation := newVendorLocationMutation(c.config, OpDelete)
	return &VendorLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VendorLocationClient) DeleteOne(vl *VendorLocation) *VendorLocationDeleteOne {
	return c.DeleteOneID(vl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VendorLocationClient) DeleteOneID(id uuid.UUID) *VendorLocationDeleteOne {
	builder := c.Delete().Where(vendorlocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorLocationDeleteOne{builder}
}

// Query returns a query builder for VendorLocation.
func (c *VendorLocationClient) Query() *VendorLocationQuery {
	return &VendorLocationQuery{
		config: c.config,
	}
}

// Get returns a VendorLocation entity by its id.
func (c *VendorLocationClient) Get(ctx context.Context, id uuid.UUID) (*VendorLocation, error) {
	return c.Query().Where(vendorlocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorLocationClient) GetX(ctx context.Context, id uuid.UUID) *VendorLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VendorLocationClient) Hooks() []Hook {
	hooks := c.hooks.VendorLocation
	return append(hooks[:len(hooks):len(hooks)], vendorlocation.Hooks[:]...)
}
