// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appdefaultgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appfee"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgoodbase"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgooddescription"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgooddisplaycolor"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgooddisplayname"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgoodlabel"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgoodposter"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/applegacypowerrental"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appmininggoodstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/apppowerrental"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appsimulatepowerrental"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstocklock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/comment"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/delegatedstaking"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/devicemanufacturer"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceposter"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/extrainfo"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/fbmcrowdfunding"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/fee"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodbase"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodcoin"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodreward"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodrewardhistory"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/like"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/mininggoodstock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/powerrental"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/recommend"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredappgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/requiredgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/score"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stock"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmost"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostconstraint"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgoodconstraint"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostgoodposter"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/topmostposter"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorbrand"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/vendorlocation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppDefaultGood is the client for interacting with the AppDefaultGood builders.
	AppDefaultGood *AppDefaultGoodClient
	// AppFee is the client for interacting with the AppFee builders.
	AppFee *AppFeeClient
	// AppGood is the client for interacting with the AppGood builders.
	AppGood *AppGoodClient
	// AppGoodBase is the client for interacting with the AppGoodBase builders.
	AppGoodBase *AppGoodBaseClient
	// AppGoodDescription is the client for interacting with the AppGoodDescription builders.
	AppGoodDescription *AppGoodDescriptionClient
	// AppGoodDisplayColor is the client for interacting with the AppGoodDisplayColor builders.
	AppGoodDisplayColor *AppGoodDisplayColorClient
	// AppGoodDisplayName is the client for interacting with the AppGoodDisplayName builders.
	AppGoodDisplayName *AppGoodDisplayNameClient
	// AppGoodLabel is the client for interacting with the AppGoodLabel builders.
	AppGoodLabel *AppGoodLabelClient
	// AppGoodPoster is the client for interacting with the AppGoodPoster builders.
	AppGoodPoster *AppGoodPosterClient
	// AppLegacyPowerRental is the client for interacting with the AppLegacyPowerRental builders.
	AppLegacyPowerRental *AppLegacyPowerRentalClient
	// AppMiningGoodStock is the client for interacting with the AppMiningGoodStock builders.
	AppMiningGoodStock *AppMiningGoodStockClient
	// AppPowerRental is the client for interacting with the AppPowerRental builders.
	AppPowerRental *AppPowerRentalClient
	// AppSimulatePowerRental is the client for interacting with the AppSimulatePowerRental builders.
	AppSimulatePowerRental *AppSimulatePowerRentalClient
	// AppStock is the client for interacting with the AppStock builders.
	AppStock *AppStockClient
	// AppStockLock is the client for interacting with the AppStockLock builders.
	AppStockLock *AppStockLockClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// DelegatedStaking is the client for interacting with the DelegatedStaking builders.
	DelegatedStaking *DelegatedStakingClient
	// DeviceInfo is the client for interacting with the DeviceInfo builders.
	DeviceInfo *DeviceInfoClient
	// DeviceManufacturer is the client for interacting with the DeviceManufacturer builders.
	DeviceManufacturer *DeviceManufacturerClient
	// DevicePoster is the client for interacting with the DevicePoster builders.
	DevicePoster *DevicePosterClient
	// ExtraInfo is the client for interacting with the ExtraInfo builders.
	ExtraInfo *ExtraInfoClient
	// FbmCrowdFunding is the client for interacting with the FbmCrowdFunding builders.
	FbmCrowdFunding *FbmCrowdFundingClient
	// Fee is the client for interacting with the Fee builders.
	Fee *FeeClient
	// Good is the client for interacting with the Good builders.
	Good *GoodClient
	// GoodBase is the client for interacting with the GoodBase builders.
	GoodBase *GoodBaseClient
	// GoodCoin is the client for interacting with the GoodCoin builders.
	GoodCoin *GoodCoinClient
	// GoodReward is the client for interacting with the GoodReward builders.
	GoodReward *GoodRewardClient
	// GoodRewardHistory is the client for interacting with the GoodRewardHistory builders.
	GoodRewardHistory *GoodRewardHistoryClient
	// Like is the client for interacting with the Like builders.
	Like *LikeClient
	// MiningGoodStock is the client for interacting with the MiningGoodStock builders.
	MiningGoodStock *MiningGoodStockClient
	// PowerRental is the client for interacting with the PowerRental builders.
	PowerRental *PowerRentalClient
	// Recommend is the client for interacting with the Recommend builders.
	Recommend *RecommendClient
	// RequiredAppGood is the client for interacting with the RequiredAppGood builders.
	RequiredAppGood *RequiredAppGoodClient
	// RequiredGood is the client for interacting with the RequiredGood builders.
	RequiredGood *RequiredGoodClient
	// Score is the client for interacting with the Score builders.
	Score *ScoreClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// TopMost is the client for interacting with the TopMost builders.
	TopMost *TopMostClient
	// TopMostConstraint is the client for interacting with the TopMostConstraint builders.
	TopMostConstraint *TopMostConstraintClient
	// TopMostGood is the client for interacting with the TopMostGood builders.
	TopMostGood *TopMostGoodClient
	// TopMostGoodConstraint is the client for interacting with the TopMostGoodConstraint builders.
	TopMostGoodConstraint *TopMostGoodConstraintClient
	// TopMostGoodPoster is the client for interacting with the TopMostGoodPoster builders.
	TopMostGoodPoster *TopMostGoodPosterClient
	// TopMostPoster is the client for interacting with the TopMostPoster builders.
	TopMostPoster *TopMostPosterClient
	// VendorBrand is the client for interacting with the VendorBrand builders.
	VendorBrand *VendorBrandClient
	// VendorLocation is the client for interacting with the VendorLocation builders.
	VendorLocation *VendorLocationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppDefaultGood = NewAppDefaultGoodClient(c.config)
	c.AppFee = NewAppFeeClient(c.config)
	c.AppGood = NewAppGoodClient(c.config)
	c.AppGoodBase = NewAppGoodBaseClient(c.config)
	c.AppGoodDescription = NewAppGoodDescriptionClient(c.config)
	c.AppGoodDisplayColor = NewAppGoodDisplayColorClient(c.config)
	c.AppGoodDisplayName = NewAppGoodDisplayNameClient(c.config)
	c.AppGoodLabel = NewAppGoodLabelClient(c.config)
	c.AppGoodPoster = NewAppGoodPosterClient(c.config)
	c.AppLegacyPowerRental = NewAppLegacyPowerRentalClient(c.config)
	c.AppMiningGoodStock = NewAppMiningGoodStockClient(c.config)
	c.AppPowerRental = NewAppPowerRentalClient(c.config)
	c.AppSimulatePowerRental = NewAppSimulatePowerRentalClient(c.config)
	c.AppStock = NewAppStockClient(c.config)
	c.AppStockLock = NewAppStockLockClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.DelegatedStaking = NewDelegatedStakingClient(c.config)
	c.DeviceInfo = NewDeviceInfoClient(c.config)
	c.DeviceManufacturer = NewDeviceManufacturerClient(c.config)
	c.DevicePoster = NewDevicePosterClient(c.config)
	c.ExtraInfo = NewExtraInfoClient(c.config)
	c.FbmCrowdFunding = NewFbmCrowdFundingClient(c.config)
	c.Fee = NewFeeClient(c.config)
	c.Good = NewGoodClient(c.config)
	c.GoodBase = NewGoodBaseClient(c.config)
	c.GoodCoin = NewGoodCoinClient(c.config)
	c.GoodReward = NewGoodRewardClient(c.config)
	c.GoodRewardHistory = NewGoodRewardHistoryClient(c.config)
	c.Like = NewLikeClient(c.config)
	c.MiningGoodStock = NewMiningGoodStockClient(c.config)
	c.PowerRental = NewPowerRentalClient(c.config)
	c.Recommend = NewRecommendClient(c.config)
	c.RequiredAppGood = NewRequiredAppGoodClient(c.config)
	c.RequiredGood = NewRequiredGoodClient(c.config)
	c.Score = NewScoreClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.TopMost = NewTopMostClient(c.config)
	c.TopMostConstraint = NewTopMostConstraintClient(c.config)
	c.TopMostGood = NewTopMostGoodClient(c.config)
	c.TopMostGoodConstraint = NewTopMostGoodConstraintClient(c.config)
	c.TopMostGoodPoster = NewTopMostGoodPosterClient(c.config)
	c.TopMostPoster = NewTopMostPosterClient(c.config)
	c.VendorBrand = NewVendorBrandClient(c.config)
	c.VendorLocation = NewVendorLocationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AppDefaultGood:         NewAppDefaultGoodClient(cfg),
		AppFee:                 NewAppFeeClient(cfg),
		AppGood:                NewAppGoodClient(cfg),
		AppGoodBase:            NewAppGoodBaseClient(cfg),
		AppGoodDescription:     NewAppGoodDescriptionClient(cfg),
		AppGoodDisplayColor:    NewAppGoodDisplayColorClient(cfg),
		AppGoodDisplayName:     NewAppGoodDisplayNameClient(cfg),
		AppGoodLabel:           NewAppGoodLabelClient(cfg),
		AppGoodPoster:          NewAppGoodPosterClient(cfg),
		AppLegacyPowerRental:   NewAppLegacyPowerRentalClient(cfg),
		AppMiningGoodStock:     NewAppMiningGoodStockClient(cfg),
		AppPowerRental:         NewAppPowerRentalClient(cfg),
		AppSimulatePowerRental: NewAppSimulatePowerRentalClient(cfg),
		AppStock:               NewAppStockClient(cfg),
		AppStockLock:           NewAppStockLockClient(cfg),
		Comment:                NewCommentClient(cfg),
		DelegatedStaking:       NewDelegatedStakingClient(cfg),
		DeviceInfo:             NewDeviceInfoClient(cfg),
		DeviceManufacturer:     NewDeviceManufacturerClient(cfg),
		DevicePoster:           NewDevicePosterClient(cfg),
		ExtraInfo:              NewExtraInfoClient(cfg),
		FbmCrowdFunding:        NewFbmCrowdFundingClient(cfg),
		Fee:                    NewFeeClient(cfg),
		Good:                   NewGoodClient(cfg),
		GoodBase:               NewGoodBaseClient(cfg),
		GoodCoin:               NewGoodCoinClient(cfg),
		GoodReward:             NewGoodRewardClient(cfg),
		GoodRewardHistory:      NewGoodRewardHistoryClient(cfg),
		Like:                   NewLikeClient(cfg),
		MiningGoodStock:        NewMiningGoodStockClient(cfg),
		PowerRental:            NewPowerRentalClient(cfg),
		Recommend:              NewRecommendClient(cfg),
		RequiredAppGood:        NewRequiredAppGoodClient(cfg),
		RequiredGood:           NewRequiredGoodClient(cfg),
		Score:                  NewScoreClient(cfg),
		Stock:                  NewStockClient(cfg),
		TopMost:                NewTopMostClient(cfg),
		TopMostConstraint:      NewTopMostConstraintClient(cfg),
		TopMostGood:            NewTopMostGoodClient(cfg),
		TopMostGoodConstraint:  NewTopMostGoodConstraintClient(cfg),
		TopMostGoodPoster:      NewTopMostGoodPosterClient(cfg),
		TopMostPoster:          NewTopMostPosterClient(cfg),
		VendorBrand:            NewVendorBrandClient(cfg),
		VendorLocation:         NewVendorLocationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		AppDefaultGood:         NewAppDefaultGoodClient(cfg),
		AppFee:                 NewAppFeeClient(cfg),
		AppGood:                NewAppGoodClient(cfg),
		AppGoodBase:            NewAppGoodBaseClient(cfg),
		AppGoodDescription:     NewAppGoodDescriptionClient(cfg),
		AppGoodDisplayColor:    NewAppGoodDisplayColorClient(cfg),
		AppGoodDisplayName:     NewAppGoodDisplayNameClient(cfg),
		AppGoodLabel:           NewAppGoodLabelClient(cfg),
		AppGoodPoster:          NewAppGoodPosterClient(cfg),
		AppLegacyPowerRental:   NewAppLegacyPowerRentalClient(cfg),
		AppMiningGoodStock:     NewAppMiningGoodStockClient(cfg),
		AppPowerRental:         NewAppPowerRentalClient(cfg),
		AppSimulatePowerRental: NewAppSimulatePowerRentalClient(cfg),
		AppStock:               NewAppStockClient(cfg),
		AppStockLock:           NewAppStockLockClient(cfg),
		Comment:                NewCommentClient(cfg),
		DelegatedStaking:       NewDelegatedStakingClient(cfg),
		DeviceInfo:             NewDeviceInfoClient(cfg),
		DeviceManufacturer:     NewDeviceManufacturerClient(cfg),
		DevicePoster:           NewDevicePosterClient(cfg),
		ExtraInfo:              NewExtraInfoClient(cfg),
		FbmCrowdFunding:        NewFbmCrowdFundingClient(cfg),
		Fee:                    NewFeeClient(cfg),
		Good:                   NewGoodClient(cfg),
		GoodBase:               NewGoodBaseClient(cfg),
		GoodCoin:               NewGoodCoinClient(cfg),
		GoodReward:             NewGoodRewardClient(cfg),
		GoodRewardHistory:      NewGoodRewardHistoryClient(cfg),
		Like:                   NewLikeClient(cfg),
		MiningGoodStock:        NewMiningGoodStockClient(cfg),
		PowerRental:            NewPowerRentalClient(cfg),
		Recommend:              NewRecommendClient(cfg),
		RequiredAppGood:        NewRequiredAppGoodClient(cfg),
		RequiredGood:           NewRequiredGoodClient(cfg),
		Score:                  NewScoreClient(cfg),
		Stock:                  NewStockClient(cfg),
		TopMost:                NewTopMostClient(cfg),
		TopMostConstraint:      NewTopMostConstraintClient(cfg),
		TopMostGood:            NewTopMostGoodClient(cfg),
		TopMostGoodConstraint:  NewTopMostGoodConstraintClient(cfg),
		TopMostGoodPoster:      NewTopMostGoodPosterClient(cfg),
		TopMostPoster:          NewTopMostPosterClient(cfg),
		VendorBrand:            NewVendorBrandClient(cfg),
		VendorLocation:         NewVendorLocationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppDefaultGood.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppDefaultGood.Use(hooks...)
	c.AppFee.Use(hooks...)
	c.AppGood.Use(hooks...)
	c.AppGoodBase.Use(hooks...)
	c.AppGoodDescription.Use(hooks...)
	c.AppGoodDisplayColor.Use(hooks...)
	c.AppGoodDisplayName.Use(hooks...)
	c.AppGoodLabel.Use(hooks...)
	c.AppGoodPoster.Use(hooks...)
	c.AppLegacyPowerRental.Use(hooks...)
	c.AppMiningGoodStock.Use(hooks...)
	c.AppPowerRental.Use(hooks...)
	c.AppSimulatePowerRental.Use(hooks...)
	c.AppStock.Use(hooks...)
	c.AppStockLock.Use(hooks...)
	c.Comment.Use(hooks...)
	c.DelegatedStaking.Use(hooks...)
	c.DeviceInfo.Use(hooks...)
	c.DeviceManufacturer.Use(hooks...)
	c.DevicePoster.Use(hooks...)
	c.ExtraInfo.Use(hooks...)
	c.FbmCrowdFunding.Use(hooks...)
	c.Fee.Use(hooks...)
	c.Good.Use(hooks...)
	c.GoodBase.Use(hooks...)
	c.GoodCoin.Use(hooks...)
	c.GoodReward.Use(hooks...)
	c.GoodRewardHistory.Use(hooks...)
	c.Like.Use(hooks...)
	c.MiningGoodStock.Use(hooks...)
	c.PowerRental.Use(hooks...)
	c.Recommend.Use(hooks...)
	c.RequiredAppGood.Use(hooks...)
	c.RequiredGood.Use(hooks...)
	c.Score.Use(hooks...)
	c.Stock.Use(hooks...)
	c.TopMost.Use(hooks...)
	c.TopMostConstraint.Use(hooks...)
	c.TopMostGood.Use(hooks...)
	c.TopMostGoodConstraint.Use(hooks...)
	c.TopMostGoodPoster.Use(hooks...)
	c.TopMostPoster.Use(hooks...)
	c.VendorBrand.Use(hooks...)
	c.VendorLocation.Use(hooks...)
}

// AppDefaultGoodClient is a client for the AppDefaultGood schema.
type AppDefaultGoodClient struct {
	config
}

// NewAppDefaultGoodClient returns a client for the AppDefaultGood from the given config.
func NewAppDefaultGoodClient(c config) *AppDefaultGoodClient {
	return &AppDefaultGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appdefaultgood.Hooks(f(g(h())))`.
func (c *AppDefaultGoodClient) Use(hooks ...Hook) {
	c.hooks.AppDefaultGood = append(c.hooks.AppDefaultGood, hooks...)
}

// Create returns a builder for creating a AppDefaultGood entity.
func (c *AppDefaultGoodClient) Create() *AppDefaultGoodCreate {
	mutation := newAppDefaultGoodMutation(c.config, OpCreate)
	return &AppDefaultGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppDefaultGood entities.
func (c *AppDefaultGoodClient) CreateBulk(builders ...*AppDefaultGoodCreate) *AppDefaultGoodCreateBulk {
	return &AppDefaultGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Update() *AppDefaultGoodUpdate {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdate)
	return &AppDefaultGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppDefaultGoodClient) UpdateOne(adg *AppDefaultGood) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGood(adg))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppDefaultGoodClient) UpdateOneID(id uint32) *AppDefaultGoodUpdateOne {
	mutation := newAppDefaultGoodMutation(c.config, OpUpdateOne, withAppDefaultGoodID(id))
	return &AppDefaultGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Delete() *AppDefaultGoodDelete {
	mutation := newAppDefaultGoodMutation(c.config, OpDelete)
	return &AppDefaultGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppDefaultGoodClient) DeleteOne(adg *AppDefaultGood) *AppDefaultGoodDeleteOne {
	return c.DeleteOneID(adg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppDefaultGoodClient) DeleteOneID(id uint32) *AppDefaultGoodDeleteOne {
	builder := c.Delete().Where(appdefaultgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDefaultGoodDeleteOne{builder}
}

// Query returns a query builder for AppDefaultGood.
func (c *AppDefaultGoodClient) Query() *AppDefaultGoodQuery {
	return &AppDefaultGoodQuery{
		config: c.config,
	}
}

// Get returns a AppDefaultGood entity by its id.
func (c *AppDefaultGoodClient) Get(ctx context.Context, id uint32) (*AppDefaultGood, error) {
	return c.Query().Where(appdefaultgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppDefaultGoodClient) GetX(ctx context.Context, id uint32) *AppDefaultGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppDefaultGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppDefaultGood
	return append(hooks[:len(hooks):len(hooks)], appdefaultgood.Hooks[:]...)
}

// AppFeeClient is a client for the AppFee schema.
type AppFeeClient struct {
	config
}

// NewAppFeeClient returns a client for the AppFee from the given config.
func NewAppFeeClient(c config) *AppFeeClient {
	return &AppFeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appfee.Hooks(f(g(h())))`.
func (c *AppFeeClient) Use(hooks ...Hook) {
	c.hooks.AppFee = append(c.hooks.AppFee, hooks...)
}

// Create returns a builder for creating a AppFee entity.
func (c *AppFeeClient) Create() *AppFeeCreate {
	mutation := newAppFeeMutation(c.config, OpCreate)
	return &AppFeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppFee entities.
func (c *AppFeeClient) CreateBulk(builders ...*AppFeeCreate) *AppFeeCreateBulk {
	return &AppFeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppFee.
func (c *AppFeeClient) Update() *AppFeeUpdate {
	mutation := newAppFeeMutation(c.config, OpUpdate)
	return &AppFeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppFeeClient) UpdateOne(af *AppFee) *AppFeeUpdateOne {
	mutation := newAppFeeMutation(c.config, OpUpdateOne, withAppFee(af))
	return &AppFeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppFeeClient) UpdateOneID(id uint32) *AppFeeUpdateOne {
	mutation := newAppFeeMutation(c.config, OpUpdateOne, withAppFeeID(id))
	return &AppFeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppFee.
func (c *AppFeeClient) Delete() *AppFeeDelete {
	mutation := newAppFeeMutation(c.config, OpDelete)
	return &AppFeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppFeeClient) DeleteOne(af *AppFee) *AppFeeDeleteOne {
	return c.DeleteOneID(af.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppFeeClient) DeleteOneID(id uint32) *AppFeeDeleteOne {
	builder := c.Delete().Where(appfee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppFeeDeleteOne{builder}
}

// Query returns a query builder for AppFee.
func (c *AppFeeClient) Query() *AppFeeQuery {
	return &AppFeeQuery{
		config: c.config,
	}
}

// Get returns a AppFee entity by its id.
func (c *AppFeeClient) Get(ctx context.Context, id uint32) (*AppFee, error) {
	return c.Query().Where(appfee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppFeeClient) GetX(ctx context.Context, id uint32) *AppFee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppFeeClient) Hooks() []Hook {
	hooks := c.hooks.AppFee
	return append(hooks[:len(hooks):len(hooks)], appfee.Hooks[:]...)
}

// AppGoodClient is a client for the AppGood schema.
type AppGoodClient struct {
	config
}

// NewAppGoodClient returns a client for the AppGood from the given config.
func NewAppGoodClient(c config) *AppGoodClient {
	return &AppGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgood.Hooks(f(g(h())))`.
func (c *AppGoodClient) Use(hooks ...Hook) {
	c.hooks.AppGood = append(c.hooks.AppGood, hooks...)
}

// Create returns a builder for creating a AppGood entity.
func (c *AppGoodClient) Create() *AppGoodCreate {
	mutation := newAppGoodMutation(c.config, OpCreate)
	return &AppGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGood entities.
func (c *AppGoodClient) CreateBulk(builders ...*AppGoodCreate) *AppGoodCreateBulk {
	return &AppGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGood.
func (c *AppGoodClient) Update() *AppGoodUpdate {
	mutation := newAppGoodMutation(c.config, OpUpdate)
	return &AppGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodClient) UpdateOne(ag *AppGood) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGood(ag))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodClient) UpdateOneID(id uint32) *AppGoodUpdateOne {
	mutation := newAppGoodMutation(c.config, OpUpdateOne, withAppGoodID(id))
	return &AppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGood.
func (c *AppGoodClient) Delete() *AppGoodDelete {
	mutation := newAppGoodMutation(c.config, OpDelete)
	return &AppGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodClient) DeleteOne(ag *AppGood) *AppGoodDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodClient) DeleteOneID(id uint32) *AppGoodDeleteOne {
	builder := c.Delete().Where(appgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDeleteOne{builder}
}

// Query returns a query builder for AppGood.
func (c *AppGoodClient) Query() *AppGoodQuery {
	return &AppGoodQuery{
		config: c.config,
	}
}

// Get returns a AppGood entity by its id.
func (c *AppGoodClient) Get(ctx context.Context, id uint32) (*AppGood, error) {
	return c.Query().Where(appgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodClient) GetX(ctx context.Context, id uint32) *AppGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodClient) Hooks() []Hook {
	hooks := c.hooks.AppGood
	return append(hooks[:len(hooks):len(hooks)], appgood.Hooks[:]...)
}

// AppGoodBaseClient is a client for the AppGoodBase schema.
type AppGoodBaseClient struct {
	config
}

// NewAppGoodBaseClient returns a client for the AppGoodBase from the given config.
func NewAppGoodBaseClient(c config) *AppGoodBaseClient {
	return &AppGoodBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodbase.Hooks(f(g(h())))`.
func (c *AppGoodBaseClient) Use(hooks ...Hook) {
	c.hooks.AppGoodBase = append(c.hooks.AppGoodBase, hooks...)
}

// Create returns a builder for creating a AppGoodBase entity.
func (c *AppGoodBaseClient) Create() *AppGoodBaseCreate {
	mutation := newAppGoodBaseMutation(c.config, OpCreate)
	return &AppGoodBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodBase entities.
func (c *AppGoodBaseClient) CreateBulk(builders ...*AppGoodBaseCreate) *AppGoodBaseCreateBulk {
	return &AppGoodBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodBase.
func (c *AppGoodBaseClient) Update() *AppGoodBaseUpdate {
	mutation := newAppGoodBaseMutation(c.config, OpUpdate)
	return &AppGoodBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodBaseClient) UpdateOne(agb *AppGoodBase) *AppGoodBaseUpdateOne {
	mutation := newAppGoodBaseMutation(c.config, OpUpdateOne, withAppGoodBase(agb))
	return &AppGoodBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodBaseClient) UpdateOneID(id uint32) *AppGoodBaseUpdateOne {
	mutation := newAppGoodBaseMutation(c.config, OpUpdateOne, withAppGoodBaseID(id))
	return &AppGoodBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodBase.
func (c *AppGoodBaseClient) Delete() *AppGoodBaseDelete {
	mutation := newAppGoodBaseMutation(c.config, OpDelete)
	return &AppGoodBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodBaseClient) DeleteOne(agb *AppGoodBase) *AppGoodBaseDeleteOne {
	return c.DeleteOneID(agb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodBaseClient) DeleteOneID(id uint32) *AppGoodBaseDeleteOne {
	builder := c.Delete().Where(appgoodbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodBaseDeleteOne{builder}
}

// Query returns a query builder for AppGoodBase.
func (c *AppGoodBaseClient) Query() *AppGoodBaseQuery {
	return &AppGoodBaseQuery{
		config: c.config,
	}
}

// Get returns a AppGoodBase entity by its id.
func (c *AppGoodBaseClient) Get(ctx context.Context, id uint32) (*AppGoodBase, error) {
	return c.Query().Where(appgoodbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodBaseClient) GetX(ctx context.Context, id uint32) *AppGoodBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodBaseClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodBase
	return append(hooks[:len(hooks):len(hooks)], appgoodbase.Hooks[:]...)
}

// AppGoodDescriptionClient is a client for the AppGoodDescription schema.
type AppGoodDescriptionClient struct {
	config
}

// NewAppGoodDescriptionClient returns a client for the AppGoodDescription from the given config.
func NewAppGoodDescriptionClient(c config) *AppGoodDescriptionClient {
	return &AppGoodDescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgooddescription.Hooks(f(g(h())))`.
func (c *AppGoodDescriptionClient) Use(hooks ...Hook) {
	c.hooks.AppGoodDescription = append(c.hooks.AppGoodDescription, hooks...)
}

// Create returns a builder for creating a AppGoodDescription entity.
func (c *AppGoodDescriptionClient) Create() *AppGoodDescriptionCreate {
	mutation := newAppGoodDescriptionMutation(c.config, OpCreate)
	return &AppGoodDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodDescription entities.
func (c *AppGoodDescriptionClient) CreateBulk(builders ...*AppGoodDescriptionCreate) *AppGoodDescriptionCreateBulk {
	return &AppGoodDescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodDescription.
func (c *AppGoodDescriptionClient) Update() *AppGoodDescriptionUpdate {
	mutation := newAppGoodDescriptionMutation(c.config, OpUpdate)
	return &AppGoodDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodDescriptionClient) UpdateOne(agd *AppGoodDescription) *AppGoodDescriptionUpdateOne {
	mutation := newAppGoodDescriptionMutation(c.config, OpUpdateOne, withAppGoodDescription(agd))
	return &AppGoodDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodDescriptionClient) UpdateOneID(id uint32) *AppGoodDescriptionUpdateOne {
	mutation := newAppGoodDescriptionMutation(c.config, OpUpdateOne, withAppGoodDescriptionID(id))
	return &AppGoodDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodDescription.
func (c *AppGoodDescriptionClient) Delete() *AppGoodDescriptionDelete {
	mutation := newAppGoodDescriptionMutation(c.config, OpDelete)
	return &AppGoodDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodDescriptionClient) DeleteOne(agd *AppGoodDescription) *AppGoodDescriptionDeleteOne {
	return c.DeleteOneID(agd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodDescriptionClient) DeleteOneID(id uint32) *AppGoodDescriptionDeleteOne {
	builder := c.Delete().Where(appgooddescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDescriptionDeleteOne{builder}
}

// Query returns a query builder for AppGoodDescription.
func (c *AppGoodDescriptionClient) Query() *AppGoodDescriptionQuery {
	return &AppGoodDescriptionQuery{
		config: c.config,
	}
}

// Get returns a AppGoodDescription entity by its id.
func (c *AppGoodDescriptionClient) Get(ctx context.Context, id uint32) (*AppGoodDescription, error) {
	return c.Query().Where(appgooddescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodDescriptionClient) GetX(ctx context.Context, id uint32) *AppGoodDescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodDescriptionClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodDescription
	return append(hooks[:len(hooks):len(hooks)], appgooddescription.Hooks[:]...)
}

// AppGoodDisplayColorClient is a client for the AppGoodDisplayColor schema.
type AppGoodDisplayColorClient struct {
	config
}

// NewAppGoodDisplayColorClient returns a client for the AppGoodDisplayColor from the given config.
func NewAppGoodDisplayColorClient(c config) *AppGoodDisplayColorClient {
	return &AppGoodDisplayColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgooddisplaycolor.Hooks(f(g(h())))`.
func (c *AppGoodDisplayColorClient) Use(hooks ...Hook) {
	c.hooks.AppGoodDisplayColor = append(c.hooks.AppGoodDisplayColor, hooks...)
}

// Create returns a builder for creating a AppGoodDisplayColor entity.
func (c *AppGoodDisplayColorClient) Create() *AppGoodDisplayColorCreate {
	mutation := newAppGoodDisplayColorMutation(c.config, OpCreate)
	return &AppGoodDisplayColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodDisplayColor entities.
func (c *AppGoodDisplayColorClient) CreateBulk(builders ...*AppGoodDisplayColorCreate) *AppGoodDisplayColorCreateBulk {
	return &AppGoodDisplayColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodDisplayColor.
func (c *AppGoodDisplayColorClient) Update() *AppGoodDisplayColorUpdate {
	mutation := newAppGoodDisplayColorMutation(c.config, OpUpdate)
	return &AppGoodDisplayColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodDisplayColorClient) UpdateOne(agdc *AppGoodDisplayColor) *AppGoodDisplayColorUpdateOne {
	mutation := newAppGoodDisplayColorMutation(c.config, OpUpdateOne, withAppGoodDisplayColor(agdc))
	return &AppGoodDisplayColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodDisplayColorClient) UpdateOneID(id uint32) *AppGoodDisplayColorUpdateOne {
	mutation := newAppGoodDisplayColorMutation(c.config, OpUpdateOne, withAppGoodDisplayColorID(id))
	return &AppGoodDisplayColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodDisplayColor.
func (c *AppGoodDisplayColorClient) Delete() *AppGoodDisplayColorDelete {
	mutation := newAppGoodDisplayColorMutation(c.config, OpDelete)
	return &AppGoodDisplayColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodDisplayColorClient) DeleteOne(agdc *AppGoodDisplayColor) *AppGoodDisplayColorDeleteOne {
	return c.DeleteOneID(agdc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodDisplayColorClient) DeleteOneID(id uint32) *AppGoodDisplayColorDeleteOne {
	builder := c.Delete().Where(appgooddisplaycolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDisplayColorDeleteOne{builder}
}

// Query returns a query builder for AppGoodDisplayColor.
func (c *AppGoodDisplayColorClient) Query() *AppGoodDisplayColorQuery {
	return &AppGoodDisplayColorQuery{
		config: c.config,
	}
}

// Get returns a AppGoodDisplayColor entity by its id.
func (c *AppGoodDisplayColorClient) Get(ctx context.Context, id uint32) (*AppGoodDisplayColor, error) {
	return c.Query().Where(appgooddisplaycolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodDisplayColorClient) GetX(ctx context.Context, id uint32) *AppGoodDisplayColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodDisplayColorClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodDisplayColor
	return append(hooks[:len(hooks):len(hooks)], appgooddisplaycolor.Hooks[:]...)
}

// AppGoodDisplayNameClient is a client for the AppGoodDisplayName schema.
type AppGoodDisplayNameClient struct {
	config
}

// NewAppGoodDisplayNameClient returns a client for the AppGoodDisplayName from the given config.
func NewAppGoodDisplayNameClient(c config) *AppGoodDisplayNameClient {
	return &AppGoodDisplayNameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgooddisplayname.Hooks(f(g(h())))`.
func (c *AppGoodDisplayNameClient) Use(hooks ...Hook) {
	c.hooks.AppGoodDisplayName = append(c.hooks.AppGoodDisplayName, hooks...)
}

// Create returns a builder for creating a AppGoodDisplayName entity.
func (c *AppGoodDisplayNameClient) Create() *AppGoodDisplayNameCreate {
	mutation := newAppGoodDisplayNameMutation(c.config, OpCreate)
	return &AppGoodDisplayNameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodDisplayName entities.
func (c *AppGoodDisplayNameClient) CreateBulk(builders ...*AppGoodDisplayNameCreate) *AppGoodDisplayNameCreateBulk {
	return &AppGoodDisplayNameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodDisplayName.
func (c *AppGoodDisplayNameClient) Update() *AppGoodDisplayNameUpdate {
	mutation := newAppGoodDisplayNameMutation(c.config, OpUpdate)
	return &AppGoodDisplayNameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodDisplayNameClient) UpdateOne(agdn *AppGoodDisplayName) *AppGoodDisplayNameUpdateOne {
	mutation := newAppGoodDisplayNameMutation(c.config, OpUpdateOne, withAppGoodDisplayName(agdn))
	return &AppGoodDisplayNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodDisplayNameClient) UpdateOneID(id uint32) *AppGoodDisplayNameUpdateOne {
	mutation := newAppGoodDisplayNameMutation(c.config, OpUpdateOne, withAppGoodDisplayNameID(id))
	return &AppGoodDisplayNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodDisplayName.
func (c *AppGoodDisplayNameClient) Delete() *AppGoodDisplayNameDelete {
	mutation := newAppGoodDisplayNameMutation(c.config, OpDelete)
	return &AppGoodDisplayNameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodDisplayNameClient) DeleteOne(agdn *AppGoodDisplayName) *AppGoodDisplayNameDeleteOne {
	return c.DeleteOneID(agdn.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodDisplayNameClient) DeleteOneID(id uint32) *AppGoodDisplayNameDeleteOne {
	builder := c.Delete().Where(appgooddisplayname.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodDisplayNameDeleteOne{builder}
}

// Query returns a query builder for AppGoodDisplayName.
func (c *AppGoodDisplayNameClient) Query() *AppGoodDisplayNameQuery {
	return &AppGoodDisplayNameQuery{
		config: c.config,
	}
}

// Get returns a AppGoodDisplayName entity by its id.
func (c *AppGoodDisplayNameClient) Get(ctx context.Context, id uint32) (*AppGoodDisplayName, error) {
	return c.Query().Where(appgooddisplayname.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodDisplayNameClient) GetX(ctx context.Context, id uint32) *AppGoodDisplayName {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodDisplayNameClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodDisplayName
	return append(hooks[:len(hooks):len(hooks)], appgooddisplayname.Hooks[:]...)
}

// AppGoodLabelClient is a client for the AppGoodLabel schema.
type AppGoodLabelClient struct {
	config
}

// NewAppGoodLabelClient returns a client for the AppGoodLabel from the given config.
func NewAppGoodLabelClient(c config) *AppGoodLabelClient {
	return &AppGoodLabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodlabel.Hooks(f(g(h())))`.
func (c *AppGoodLabelClient) Use(hooks ...Hook) {
	c.hooks.AppGoodLabel = append(c.hooks.AppGoodLabel, hooks...)
}

// Create returns a builder for creating a AppGoodLabel entity.
func (c *AppGoodLabelClient) Create() *AppGoodLabelCreate {
	mutation := newAppGoodLabelMutation(c.config, OpCreate)
	return &AppGoodLabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodLabel entities.
func (c *AppGoodLabelClient) CreateBulk(builders ...*AppGoodLabelCreate) *AppGoodLabelCreateBulk {
	return &AppGoodLabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodLabel.
func (c *AppGoodLabelClient) Update() *AppGoodLabelUpdate {
	mutation := newAppGoodLabelMutation(c.config, OpUpdate)
	return &AppGoodLabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodLabelClient) UpdateOne(agl *AppGoodLabel) *AppGoodLabelUpdateOne {
	mutation := newAppGoodLabelMutation(c.config, OpUpdateOne, withAppGoodLabel(agl))
	return &AppGoodLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodLabelClient) UpdateOneID(id uint32) *AppGoodLabelUpdateOne {
	mutation := newAppGoodLabelMutation(c.config, OpUpdateOne, withAppGoodLabelID(id))
	return &AppGoodLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodLabel.
func (c *AppGoodLabelClient) Delete() *AppGoodLabelDelete {
	mutation := newAppGoodLabelMutation(c.config, OpDelete)
	return &AppGoodLabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodLabelClient) DeleteOne(agl *AppGoodLabel) *AppGoodLabelDeleteOne {
	return c.DeleteOneID(agl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodLabelClient) DeleteOneID(id uint32) *AppGoodLabelDeleteOne {
	builder := c.Delete().Where(appgoodlabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodLabelDeleteOne{builder}
}

// Query returns a query builder for AppGoodLabel.
func (c *AppGoodLabelClient) Query() *AppGoodLabelQuery {
	return &AppGoodLabelQuery{
		config: c.config,
	}
}

// Get returns a AppGoodLabel entity by its id.
func (c *AppGoodLabelClient) Get(ctx context.Context, id uint32) (*AppGoodLabel, error) {
	return c.Query().Where(appgoodlabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodLabelClient) GetX(ctx context.Context, id uint32) *AppGoodLabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodLabelClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodLabel
	return append(hooks[:len(hooks):len(hooks)], appgoodlabel.Hooks[:]...)
}

// AppGoodPosterClient is a client for the AppGoodPoster schema.
type AppGoodPosterClient struct {
	config
}

// NewAppGoodPosterClient returns a client for the AppGoodPoster from the given config.
func NewAppGoodPosterClient(c config) *AppGoodPosterClient {
	return &AppGoodPosterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appgoodposter.Hooks(f(g(h())))`.
func (c *AppGoodPosterClient) Use(hooks ...Hook) {
	c.hooks.AppGoodPoster = append(c.hooks.AppGoodPoster, hooks...)
}

// Create returns a builder for creating a AppGoodPoster entity.
func (c *AppGoodPosterClient) Create() *AppGoodPosterCreate {
	mutation := newAppGoodPosterMutation(c.config, OpCreate)
	return &AppGoodPosterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppGoodPoster entities.
func (c *AppGoodPosterClient) CreateBulk(builders ...*AppGoodPosterCreate) *AppGoodPosterCreateBulk {
	return &AppGoodPosterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppGoodPoster.
func (c *AppGoodPosterClient) Update() *AppGoodPosterUpdate {
	mutation := newAppGoodPosterMutation(c.config, OpUpdate)
	return &AppGoodPosterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppGoodPosterClient) UpdateOne(agp *AppGoodPoster) *AppGoodPosterUpdateOne {
	mutation := newAppGoodPosterMutation(c.config, OpUpdateOne, withAppGoodPoster(agp))
	return &AppGoodPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppGoodPosterClient) UpdateOneID(id uint32) *AppGoodPosterUpdateOne {
	mutation := newAppGoodPosterMutation(c.config, OpUpdateOne, withAppGoodPosterID(id))
	return &AppGoodPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppGoodPoster.
func (c *AppGoodPosterClient) Delete() *AppGoodPosterDelete {
	mutation := newAppGoodPosterMutation(c.config, OpDelete)
	return &AppGoodPosterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppGoodPosterClient) DeleteOne(agp *AppGoodPoster) *AppGoodPosterDeleteOne {
	return c.DeleteOneID(agp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppGoodPosterClient) DeleteOneID(id uint32) *AppGoodPosterDeleteOne {
	builder := c.Delete().Where(appgoodposter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppGoodPosterDeleteOne{builder}
}

// Query returns a query builder for AppGoodPoster.
func (c *AppGoodPosterClient) Query() *AppGoodPosterQuery {
	return &AppGoodPosterQuery{
		config: c.config,
	}
}

// Get returns a AppGoodPoster entity by its id.
func (c *AppGoodPosterClient) Get(ctx context.Context, id uint32) (*AppGoodPoster, error) {
	return c.Query().Where(appgoodposter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppGoodPosterClient) GetX(ctx context.Context, id uint32) *AppGoodPoster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppGoodPosterClient) Hooks() []Hook {
	hooks := c.hooks.AppGoodPoster
	return append(hooks[:len(hooks):len(hooks)], appgoodposter.Hooks[:]...)
}

// AppLegacyPowerRentalClient is a client for the AppLegacyPowerRental schema.
type AppLegacyPowerRentalClient struct {
	config
}

// NewAppLegacyPowerRentalClient returns a client for the AppLegacyPowerRental from the given config.
func NewAppLegacyPowerRentalClient(c config) *AppLegacyPowerRentalClient {
	return &AppLegacyPowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applegacypowerrental.Hooks(f(g(h())))`.
func (c *AppLegacyPowerRentalClient) Use(hooks ...Hook) {
	c.hooks.AppLegacyPowerRental = append(c.hooks.AppLegacyPowerRental, hooks...)
}

// Create returns a builder for creating a AppLegacyPowerRental entity.
func (c *AppLegacyPowerRentalClient) Create() *AppLegacyPowerRentalCreate {
	mutation := newAppLegacyPowerRentalMutation(c.config, OpCreate)
	return &AppLegacyPowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppLegacyPowerRental entities.
func (c *AppLegacyPowerRentalClient) CreateBulk(builders ...*AppLegacyPowerRentalCreate) *AppLegacyPowerRentalCreateBulk {
	return &AppLegacyPowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppLegacyPowerRental.
func (c *AppLegacyPowerRentalClient) Update() *AppLegacyPowerRentalUpdate {
	mutation := newAppLegacyPowerRentalMutation(c.config, OpUpdate)
	return &AppLegacyPowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppLegacyPowerRentalClient) UpdateOne(alpr *AppLegacyPowerRental) *AppLegacyPowerRentalUpdateOne {
	mutation := newAppLegacyPowerRentalMutation(c.config, OpUpdateOne, withAppLegacyPowerRental(alpr))
	return &AppLegacyPowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppLegacyPowerRentalClient) UpdateOneID(id uint32) *AppLegacyPowerRentalUpdateOne {
	mutation := newAppLegacyPowerRentalMutation(c.config, OpUpdateOne, withAppLegacyPowerRentalID(id))
	return &AppLegacyPowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppLegacyPowerRental.
func (c *AppLegacyPowerRentalClient) Delete() *AppLegacyPowerRentalDelete {
	mutation := newAppLegacyPowerRentalMutation(c.config, OpDelete)
	return &AppLegacyPowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppLegacyPowerRentalClient) DeleteOne(alpr *AppLegacyPowerRental) *AppLegacyPowerRentalDeleteOne {
	return c.DeleteOneID(alpr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppLegacyPowerRentalClient) DeleteOneID(id uint32) *AppLegacyPowerRentalDeleteOne {
	builder := c.Delete().Where(applegacypowerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppLegacyPowerRentalDeleteOne{builder}
}

// Query returns a query builder for AppLegacyPowerRental.
func (c *AppLegacyPowerRentalClient) Query() *AppLegacyPowerRentalQuery {
	return &AppLegacyPowerRentalQuery{
		config: c.config,
	}
}

// Get returns a AppLegacyPowerRental entity by its id.
func (c *AppLegacyPowerRentalClient) Get(ctx context.Context, id uint32) (*AppLegacyPowerRental, error) {
	return c.Query().Where(applegacypowerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppLegacyPowerRentalClient) GetX(ctx context.Context, id uint32) *AppLegacyPowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppLegacyPowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.AppLegacyPowerRental
	return append(hooks[:len(hooks):len(hooks)], applegacypowerrental.Hooks[:]...)
}

// AppMiningGoodStockClient is a client for the AppMiningGoodStock schema.
type AppMiningGoodStockClient struct {
	config
}

// NewAppMiningGoodStockClient returns a client for the AppMiningGoodStock from the given config.
func NewAppMiningGoodStockClient(c config) *AppMiningGoodStockClient {
	return &AppMiningGoodStockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appmininggoodstock.Hooks(f(g(h())))`.
func (c *AppMiningGoodStockClient) Use(hooks ...Hook) {
	c.hooks.AppMiningGoodStock = append(c.hooks.AppMiningGoodStock, hooks...)
}

// Create returns a builder for creating a AppMiningGoodStock entity.
func (c *AppMiningGoodStockClient) Create() *AppMiningGoodStockCreate {
	mutation := newAppMiningGoodStockMutation(c.config, OpCreate)
	return &AppMiningGoodStockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppMiningGoodStock entities.
func (c *AppMiningGoodStockClient) CreateBulk(builders ...*AppMiningGoodStockCreate) *AppMiningGoodStockCreateBulk {
	return &AppMiningGoodStockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppMiningGoodStock.
func (c *AppMiningGoodStockClient) Update() *AppMiningGoodStockUpdate {
	mutation := newAppMiningGoodStockMutation(c.config, OpUpdate)
	return &AppMiningGoodStockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppMiningGoodStockClient) UpdateOne(amgs *AppMiningGoodStock) *AppMiningGoodStockUpdateOne {
	mutation := newAppMiningGoodStockMutation(c.config, OpUpdateOne, withAppMiningGoodStock(amgs))
	return &AppMiningGoodStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppMiningGoodStockClient) UpdateOneID(id uint32) *AppMiningGoodStockUpdateOne {
	mutation := newAppMiningGoodStockMutation(c.config, OpUpdateOne, withAppMiningGoodStockID(id))
	return &AppMiningGoodStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppMiningGoodStock.
func (c *AppMiningGoodStockClient) Delete() *AppMiningGoodStockDelete {
	mutation := newAppMiningGoodStockMutation(c.config, OpDelete)
	return &AppMiningGoodStockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppMiningGoodStockClient) DeleteOne(amgs *AppMiningGoodStock) *AppMiningGoodStockDeleteOne {
	return c.DeleteOneID(amgs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppMiningGoodStockClient) DeleteOneID(id uint32) *AppMiningGoodStockDeleteOne {
	builder := c.Delete().Where(appmininggoodstock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppMiningGoodStockDeleteOne{builder}
}

// Query returns a query builder for AppMiningGoodStock.
func (c *AppMiningGoodStockClient) Query() *AppMiningGoodStockQuery {
	return &AppMiningGoodStockQuery{
		config: c.config,
	}
}

// Get returns a AppMiningGoodStock entity by its id.
func (c *AppMiningGoodStockClient) Get(ctx context.Context, id uint32) (*AppMiningGoodStock, error) {
	return c.Query().Where(appmininggoodstock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppMiningGoodStockClient) GetX(ctx context.Context, id uint32) *AppMiningGoodStock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppMiningGoodStockClient) Hooks() []Hook {
	hooks := c.hooks.AppMiningGoodStock
	return append(hooks[:len(hooks):len(hooks)], appmininggoodstock.Hooks[:]...)
}

// AppPowerRentalClient is a client for the AppPowerRental schema.
type AppPowerRentalClient struct {
	config
}

// NewAppPowerRentalClient returns a client for the AppPowerRental from the given config.
func NewAppPowerRentalClient(c config) *AppPowerRentalClient {
	return &AppPowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppowerrental.Hooks(f(g(h())))`.
func (c *AppPowerRentalClient) Use(hooks ...Hook) {
	c.hooks.AppPowerRental = append(c.hooks.AppPowerRental, hooks...)
}

// Create returns a builder for creating a AppPowerRental entity.
func (c *AppPowerRentalClient) Create() *AppPowerRentalCreate {
	mutation := newAppPowerRentalMutation(c.config, OpCreate)
	return &AppPowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPowerRental entities.
func (c *AppPowerRentalClient) CreateBulk(builders ...*AppPowerRentalCreate) *AppPowerRentalCreateBulk {
	return &AppPowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPowerRental.
func (c *AppPowerRentalClient) Update() *AppPowerRentalUpdate {
	mutation := newAppPowerRentalMutation(c.config, OpUpdate)
	return &AppPowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPowerRentalClient) UpdateOne(apr *AppPowerRental) *AppPowerRentalUpdateOne {
	mutation := newAppPowerRentalMutation(c.config, OpUpdateOne, withAppPowerRental(apr))
	return &AppPowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPowerRentalClient) UpdateOneID(id uint32) *AppPowerRentalUpdateOne {
	mutation := newAppPowerRentalMutation(c.config, OpUpdateOne, withAppPowerRentalID(id))
	return &AppPowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPowerRental.
func (c *AppPowerRentalClient) Delete() *AppPowerRentalDelete {
	mutation := newAppPowerRentalMutation(c.config, OpDelete)
	return &AppPowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppPowerRentalClient) DeleteOne(apr *AppPowerRental) *AppPowerRentalDeleteOne {
	return c.DeleteOneID(apr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppPowerRentalClient) DeleteOneID(id uint32) *AppPowerRentalDeleteOne {
	builder := c.Delete().Where(apppowerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPowerRentalDeleteOne{builder}
}

// Query returns a query builder for AppPowerRental.
func (c *AppPowerRentalClient) Query() *AppPowerRentalQuery {
	return &AppPowerRentalQuery{
		config: c.config,
	}
}

// Get returns a AppPowerRental entity by its id.
func (c *AppPowerRentalClient) Get(ctx context.Context, id uint32) (*AppPowerRental, error) {
	return c.Query().Where(apppowerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPowerRentalClient) GetX(ctx context.Context, id uint32) *AppPowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppPowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.AppPowerRental
	return append(hooks[:len(hooks):len(hooks)], apppowerrental.Hooks[:]...)
}

// AppSimulatePowerRentalClient is a client for the AppSimulatePowerRental schema.
type AppSimulatePowerRentalClient struct {
	config
}

// NewAppSimulatePowerRentalClient returns a client for the AppSimulatePowerRental from the given config.
func NewAppSimulatePowerRentalClient(c config) *AppSimulatePowerRentalClient {
	return &AppSimulatePowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appsimulatepowerrental.Hooks(f(g(h())))`.
func (c *AppSimulatePowerRentalClient) Use(hooks ...Hook) {
	c.hooks.AppSimulatePowerRental = append(c.hooks.AppSimulatePowerRental, hooks...)
}

// Create returns a builder for creating a AppSimulatePowerRental entity.
func (c *AppSimulatePowerRentalClient) Create() *AppSimulatePowerRentalCreate {
	mutation := newAppSimulatePowerRentalMutation(c.config, OpCreate)
	return &AppSimulatePowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppSimulatePowerRental entities.
func (c *AppSimulatePowerRentalClient) CreateBulk(builders ...*AppSimulatePowerRentalCreate) *AppSimulatePowerRentalCreateBulk {
	return &AppSimulatePowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppSimulatePowerRental.
func (c *AppSimulatePowerRentalClient) Update() *AppSimulatePowerRentalUpdate {
	mutation := newAppSimulatePowerRentalMutation(c.config, OpUpdate)
	return &AppSimulatePowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppSimulatePowerRentalClient) UpdateOne(aspr *AppSimulatePowerRental) *AppSimulatePowerRentalUpdateOne {
	mutation := newAppSimulatePowerRentalMutation(c.config, OpUpdateOne, withAppSimulatePowerRental(aspr))
	return &AppSimulatePowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppSimulatePowerRentalClient) UpdateOneID(id uint32) *AppSimulatePowerRentalUpdateOne {
	mutation := newAppSimulatePowerRentalMutation(c.config, OpUpdateOne, withAppSimulatePowerRentalID(id))
	return &AppSimulatePowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppSimulatePowerRental.
func (c *AppSimulatePowerRentalClient) Delete() *AppSimulatePowerRentalDelete {
	mutation := newAppSimulatePowerRentalMutation(c.config, OpDelete)
	return &AppSimulatePowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppSimulatePowerRentalClient) DeleteOne(aspr *AppSimulatePowerRental) *AppSimulatePowerRentalDeleteOne {
	return c.DeleteOneID(aspr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppSimulatePowerRentalClient) DeleteOneID(id uint32) *AppSimulatePowerRentalDeleteOne {
	builder := c.Delete().Where(appsimulatepowerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppSimulatePowerRentalDeleteOne{builder}
}

// Query returns a query builder for AppSimulatePowerRental.
func (c *AppSimulatePowerRentalClient) Query() *AppSimulatePowerRentalQuery {
	return &AppSimulatePowerRentalQuery{
		config: c.config,
	}
}

// Get returns a AppSimulatePowerRental entity by its id.
func (c *AppSimulatePowerRentalClient) Get(ctx context.Context, id uint32) (*AppSimulatePowerRental, error) {
	return c.Query().Where(appsimulatepowerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppSimulatePowerRentalClient) GetX(ctx context.Context, id uint32) *AppSimulatePowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppSimulatePowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.AppSimulatePowerRental
	return append(hooks[:len(hooks):len(hooks)], appsimulatepowerrental.Hooks[:]...)
}

// AppStockClient is a client for the AppStock schema.
type AppStockClient struct {
	config
}

// NewAppStockClient returns a client for the AppStock from the given config.
func NewAppStockClient(c config) *AppStockClient {
	return &AppStockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstock.Hooks(f(g(h())))`.
func (c *AppStockClient) Use(hooks ...Hook) {
	c.hooks.AppStock = append(c.hooks.AppStock, hooks...)
}

// Create returns a builder for creating a AppStock entity.
func (c *AppStockClient) Create() *AppStockCreate {
	mutation := newAppStockMutation(c.config, OpCreate)
	return &AppStockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStock entities.
func (c *AppStockClient) CreateBulk(builders ...*AppStockCreate) *AppStockCreateBulk {
	return &AppStockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStock.
func (c *AppStockClient) Update() *AppStockUpdate {
	mutation := newAppStockMutation(c.config, OpUpdate)
	return &AppStockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStockClient) UpdateOne(as *AppStock) *AppStockUpdateOne {
	mutation := newAppStockMutation(c.config, OpUpdateOne, withAppStock(as))
	return &AppStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStockClient) UpdateOneID(id uint32) *AppStockUpdateOne {
	mutation := newAppStockMutation(c.config, OpUpdateOne, withAppStockID(id))
	return &AppStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStock.
func (c *AppStockClient) Delete() *AppStockDelete {
	mutation := newAppStockMutation(c.config, OpDelete)
	return &AppStockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStockClient) DeleteOne(as *AppStock) *AppStockDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppStockClient) DeleteOneID(id uint32) *AppStockDeleteOne {
	builder := c.Delete().Where(appstock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStockDeleteOne{builder}
}

// Query returns a query builder for AppStock.
func (c *AppStockClient) Query() *AppStockQuery {
	return &AppStockQuery{
		config: c.config,
	}
}

// Get returns a AppStock entity by its id.
func (c *AppStockClient) Get(ctx context.Context, id uint32) (*AppStock, error) {
	return c.Query().Where(appstock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStockClient) GetX(ctx context.Context, id uint32) *AppStock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppStockClient) Hooks() []Hook {
	hooks := c.hooks.AppStock
	return append(hooks[:len(hooks):len(hooks)], appstock.Hooks[:]...)
}

// AppStockLockClient is a client for the AppStockLock schema.
type AppStockLockClient struct {
	config
}

// NewAppStockLockClient returns a client for the AppStockLock from the given config.
func NewAppStockLockClient(c config) *AppStockLockClient {
	return &AppStockLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstocklock.Hooks(f(g(h())))`.
func (c *AppStockLockClient) Use(hooks ...Hook) {
	c.hooks.AppStockLock = append(c.hooks.AppStockLock, hooks...)
}

// Create returns a builder for creating a AppStockLock entity.
func (c *AppStockLockClient) Create() *AppStockLockCreate {
	mutation := newAppStockLockMutation(c.config, OpCreate)
	return &AppStockLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStockLock entities.
func (c *AppStockLockClient) CreateBulk(builders ...*AppStockLockCreate) *AppStockLockCreateBulk {
	return &AppStockLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStockLock.
func (c *AppStockLockClient) Update() *AppStockLockUpdate {
	mutation := newAppStockLockMutation(c.config, OpUpdate)
	return &AppStockLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStockLockClient) UpdateOne(asl *AppStockLock) *AppStockLockUpdateOne {
	mutation := newAppStockLockMutation(c.config, OpUpdateOne, withAppStockLock(asl))
	return &AppStockLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStockLockClient) UpdateOneID(id uint32) *AppStockLockUpdateOne {
	mutation := newAppStockLockMutation(c.config, OpUpdateOne, withAppStockLockID(id))
	return &AppStockLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStockLock.
func (c *AppStockLockClient) Delete() *AppStockLockDelete {
	mutation := newAppStockLockMutation(c.config, OpDelete)
	return &AppStockLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStockLockClient) DeleteOne(asl *AppStockLock) *AppStockLockDeleteOne {
	return c.DeleteOneID(asl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppStockLockClient) DeleteOneID(id uint32) *AppStockLockDeleteOne {
	builder := c.Delete().Where(appstocklock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStockLockDeleteOne{builder}
}

// Query returns a query builder for AppStockLock.
func (c *AppStockLockClient) Query() *AppStockLockQuery {
	return &AppStockLockQuery{
		config: c.config,
	}
}

// Get returns a AppStockLock entity by its id.
func (c *AppStockLockClient) Get(ctx context.Context, id uint32) (*AppStockLock, error) {
	return c.Query().Where(appstocklock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStockLockClient) GetX(ctx context.Context, id uint32) *AppStockLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppStockLockClient) Hooks() []Hook {
	hooks := c.hooks.AppStockLock
	return append(hooks[:len(hooks):len(hooks)], appstocklock.Hooks[:]...)
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Create returns a builder for creating a Comment entity.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id uint32) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CommentClient) DeleteOneID(id uint32) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id uint32) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id uint32) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	hooks := c.hooks.Comment
	return append(hooks[:len(hooks):len(hooks)], comment.Hooks[:]...)
}

// DelegatedStakingClient is a client for the DelegatedStaking schema.
type DelegatedStakingClient struct {
	config
}

// NewDelegatedStakingClient returns a client for the DelegatedStaking from the given config.
func NewDelegatedStakingClient(c config) *DelegatedStakingClient {
	return &DelegatedStakingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `delegatedstaking.Hooks(f(g(h())))`.
func (c *DelegatedStakingClient) Use(hooks ...Hook) {
	c.hooks.DelegatedStaking = append(c.hooks.DelegatedStaking, hooks...)
}

// Create returns a builder for creating a DelegatedStaking entity.
func (c *DelegatedStakingClient) Create() *DelegatedStakingCreate {
	mutation := newDelegatedStakingMutation(c.config, OpCreate)
	return &DelegatedStakingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DelegatedStaking entities.
func (c *DelegatedStakingClient) CreateBulk(builders ...*DelegatedStakingCreate) *DelegatedStakingCreateBulk {
	return &DelegatedStakingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DelegatedStaking.
func (c *DelegatedStakingClient) Update() *DelegatedStakingUpdate {
	mutation := newDelegatedStakingMutation(c.config, OpUpdate)
	return &DelegatedStakingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DelegatedStakingClient) UpdateOne(ds *DelegatedStaking) *DelegatedStakingUpdateOne {
	mutation := newDelegatedStakingMutation(c.config, OpUpdateOne, withDelegatedStaking(ds))
	return &DelegatedStakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DelegatedStakingClient) UpdateOneID(id uint32) *DelegatedStakingUpdateOne {
	mutation := newDelegatedStakingMutation(c.config, OpUpdateOne, withDelegatedStakingID(id))
	return &DelegatedStakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DelegatedStaking.
func (c *DelegatedStakingClient) Delete() *DelegatedStakingDelete {
	mutation := newDelegatedStakingMutation(c.config, OpDelete)
	return &DelegatedStakingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DelegatedStakingClient) DeleteOne(ds *DelegatedStaking) *DelegatedStakingDeleteOne {
	return c.DeleteOneID(ds.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DelegatedStakingClient) DeleteOneID(id uint32) *DelegatedStakingDeleteOne {
	builder := c.Delete().Where(delegatedstaking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DelegatedStakingDeleteOne{builder}
}

// Query returns a query builder for DelegatedStaking.
func (c *DelegatedStakingClient) Query() *DelegatedStakingQuery {
	return &DelegatedStakingQuery{
		config: c.config,
	}
}

// Get returns a DelegatedStaking entity by its id.
func (c *DelegatedStakingClient) Get(ctx context.Context, id uint32) (*DelegatedStaking, error) {
	return c.Query().Where(delegatedstaking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DelegatedStakingClient) GetX(ctx context.Context, id uint32) *DelegatedStaking {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DelegatedStakingClient) Hooks() []Hook {
	hooks := c.hooks.DelegatedStaking
	return append(hooks[:len(hooks):len(hooks)], delegatedstaking.Hooks[:]...)
}

// DeviceInfoClient is a client for the DeviceInfo schema.
type DeviceInfoClient struct {
	config
}

// NewDeviceInfoClient returns a client for the DeviceInfo from the given config.
func NewDeviceInfoClient(c config) *DeviceInfoClient {
	return &DeviceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceinfo.Hooks(f(g(h())))`.
func (c *DeviceInfoClient) Use(hooks ...Hook) {
	c.hooks.DeviceInfo = append(c.hooks.DeviceInfo, hooks...)
}

// Create returns a builder for creating a DeviceInfo entity.
func (c *DeviceInfoClient) Create() *DeviceInfoCreate {
	mutation := newDeviceInfoMutation(c.config, OpCreate)
	return &DeviceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceInfo entities.
func (c *DeviceInfoClient) CreateBulk(builders ...*DeviceInfoCreate) *DeviceInfoCreateBulk {
	return &DeviceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceInfo.
func (c *DeviceInfoClient) Update() *DeviceInfoUpdate {
	mutation := newDeviceInfoMutation(c.config, OpUpdate)
	return &DeviceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceInfoClient) UpdateOne(di *DeviceInfo) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfo(di))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceInfoClient) UpdateOneID(id uint32) *DeviceInfoUpdateOne {
	mutation := newDeviceInfoMutation(c.config, OpUpdateOne, withDeviceInfoID(id))
	return &DeviceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceInfo.
func (c *DeviceInfoClient) Delete() *DeviceInfoDelete {
	mutation := newDeviceInfoMutation(c.config, OpDelete)
	return &DeviceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceInfoClient) DeleteOne(di *DeviceInfo) *DeviceInfoDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DeviceInfoClient) DeleteOneID(id uint32) *DeviceInfoDeleteOne {
	builder := c.Delete().Where(deviceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceInfoDeleteOne{builder}
}

// Query returns a query builder for DeviceInfo.
func (c *DeviceInfoClient) Query() *DeviceInfoQuery {
	return &DeviceInfoQuery{
		config: c.config,
	}
}

// Get returns a DeviceInfo entity by its id.
func (c *DeviceInfoClient) Get(ctx context.Context, id uint32) (*DeviceInfo, error) {
	return c.Query().Where(deviceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceInfoClient) GetX(ctx context.Context, id uint32) *DeviceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeviceInfoClient) Hooks() []Hook {
	hooks := c.hooks.DeviceInfo
	return append(hooks[:len(hooks):len(hooks)], deviceinfo.Hooks[:]...)
}

// DeviceManufacturerClient is a client for the DeviceManufacturer schema.
type DeviceManufacturerClient struct {
	config
}

// NewDeviceManufacturerClient returns a client for the DeviceManufacturer from the given config.
func NewDeviceManufacturerClient(c config) *DeviceManufacturerClient {
	return &DeviceManufacturerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `devicemanufacturer.Hooks(f(g(h())))`.
func (c *DeviceManufacturerClient) Use(hooks ...Hook) {
	c.hooks.DeviceManufacturer = append(c.hooks.DeviceManufacturer, hooks...)
}

// Create returns a builder for creating a DeviceManufacturer entity.
func (c *DeviceManufacturerClient) Create() *DeviceManufacturerCreate {
	mutation := newDeviceManufacturerMutation(c.config, OpCreate)
	return &DeviceManufacturerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceManufacturer entities.
func (c *DeviceManufacturerClient) CreateBulk(builders ...*DeviceManufacturerCreate) *DeviceManufacturerCreateBulk {
	return &DeviceManufacturerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceManufacturer.
func (c *DeviceManufacturerClient) Update() *DeviceManufacturerUpdate {
	mutation := newDeviceManufacturerMutation(c.config, OpUpdate)
	return &DeviceManufacturerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceManufacturerClient) UpdateOne(dm *DeviceManufacturer) *DeviceManufacturerUpdateOne {
	mutation := newDeviceManufacturerMutation(c.config, OpUpdateOne, withDeviceManufacturer(dm))
	return &DeviceManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceManufacturerClient) UpdateOneID(id uint32) *DeviceManufacturerUpdateOne {
	mutation := newDeviceManufacturerMutation(c.config, OpUpdateOne, withDeviceManufacturerID(id))
	return &DeviceManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceManufacturer.
func (c *DeviceManufacturerClient) Delete() *DeviceManufacturerDelete {
	mutation := newDeviceManufacturerMutation(c.config, OpDelete)
	return &DeviceManufacturerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceManufacturerClient) DeleteOne(dm *DeviceManufacturer) *DeviceManufacturerDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DeviceManufacturerClient) DeleteOneID(id uint32) *DeviceManufacturerDeleteOne {
	builder := c.Delete().Where(devicemanufacturer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceManufacturerDeleteOne{builder}
}

// Query returns a query builder for DeviceManufacturer.
func (c *DeviceManufacturerClient) Query() *DeviceManufacturerQuery {
	return &DeviceManufacturerQuery{
		config: c.config,
	}
}

// Get returns a DeviceManufacturer entity by its id.
func (c *DeviceManufacturerClient) Get(ctx context.Context, id uint32) (*DeviceManufacturer, error) {
	return c.Query().Where(devicemanufacturer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceManufacturerClient) GetX(ctx context.Context, id uint32) *DeviceManufacturer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeviceManufacturerClient) Hooks() []Hook {
	hooks := c.hooks.DeviceManufacturer
	return append(hooks[:len(hooks):len(hooks)], devicemanufacturer.Hooks[:]...)
}

// DevicePosterClient is a client for the DevicePoster schema.
type DevicePosterClient struct {
	config
}

// NewDevicePosterClient returns a client for the DevicePoster from the given config.
func NewDevicePosterClient(c config) *DevicePosterClient {
	return &DevicePosterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceposter.Hooks(f(g(h())))`.
func (c *DevicePosterClient) Use(hooks ...Hook) {
	c.hooks.DevicePoster = append(c.hooks.DevicePoster, hooks...)
}

// Create returns a builder for creating a DevicePoster entity.
func (c *DevicePosterClient) Create() *DevicePosterCreate {
	mutation := newDevicePosterMutation(c.config, OpCreate)
	return &DevicePosterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DevicePoster entities.
func (c *DevicePosterClient) CreateBulk(builders ...*DevicePosterCreate) *DevicePosterCreateBulk {
	return &DevicePosterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DevicePoster.
func (c *DevicePosterClient) Update() *DevicePosterUpdate {
	mutation := newDevicePosterMutation(c.config, OpUpdate)
	return &DevicePosterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DevicePosterClient) UpdateOne(dp *DevicePoster) *DevicePosterUpdateOne {
	mutation := newDevicePosterMutation(c.config, OpUpdateOne, withDevicePoster(dp))
	return &DevicePosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DevicePosterClient) UpdateOneID(id uint32) *DevicePosterUpdateOne {
	mutation := newDevicePosterMutation(c.config, OpUpdateOne, withDevicePosterID(id))
	return &DevicePosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DevicePoster.
func (c *DevicePosterClient) Delete() *DevicePosterDelete {
	mutation := newDevicePosterMutation(c.config, OpDelete)
	return &DevicePosterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DevicePosterClient) DeleteOne(dp *DevicePoster) *DevicePosterDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DevicePosterClient) DeleteOneID(id uint32) *DevicePosterDeleteOne {
	builder := c.Delete().Where(deviceposter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DevicePosterDeleteOne{builder}
}

// Query returns a query builder for DevicePoster.
func (c *DevicePosterClient) Query() *DevicePosterQuery {
	return &DevicePosterQuery{
		config: c.config,
	}
}

// Get returns a DevicePoster entity by its id.
func (c *DevicePosterClient) Get(ctx context.Context, id uint32) (*DevicePoster, error) {
	return c.Query().Where(deviceposter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DevicePosterClient) GetX(ctx context.Context, id uint32) *DevicePoster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DevicePosterClient) Hooks() []Hook {
	hooks := c.hooks.DevicePoster
	return append(hooks[:len(hooks):len(hooks)], deviceposter.Hooks[:]...)
}

// ExtraInfoClient is a client for the ExtraInfo schema.
type ExtraInfoClient struct {
	config
}

// NewExtraInfoClient returns a client for the ExtraInfo from the given config.
func NewExtraInfoClient(c config) *ExtraInfoClient {
	return &ExtraInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `extrainfo.Hooks(f(g(h())))`.
func (c *ExtraInfoClient) Use(hooks ...Hook) {
	c.hooks.ExtraInfo = append(c.hooks.ExtraInfo, hooks...)
}

// Create returns a builder for creating a ExtraInfo entity.
func (c *ExtraInfoClient) Create() *ExtraInfoCreate {
	mutation := newExtraInfoMutation(c.config, OpCreate)
	return &ExtraInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExtraInfo entities.
func (c *ExtraInfoClient) CreateBulk(builders ...*ExtraInfoCreate) *ExtraInfoCreateBulk {
	return &ExtraInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExtraInfo.
func (c *ExtraInfoClient) Update() *ExtraInfoUpdate {
	mutation := newExtraInfoMutation(c.config, OpUpdate)
	return &ExtraInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExtraInfoClient) UpdateOne(ei *ExtraInfo) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfo(ei))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExtraInfoClient) UpdateOneID(id uint32) *ExtraInfoUpdateOne {
	mutation := newExtraInfoMutation(c.config, OpUpdateOne, withExtraInfoID(id))
	return &ExtraInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExtraInfo.
func (c *ExtraInfoClient) Delete() *ExtraInfoDelete {
	mutation := newExtraInfoMutation(c.config, OpDelete)
	return &ExtraInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExtraInfoClient) DeleteOne(ei *ExtraInfo) *ExtraInfoDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ExtraInfoClient) DeleteOneID(id uint32) *ExtraInfoDeleteOne {
	builder := c.Delete().Where(extrainfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExtraInfoDeleteOne{builder}
}

// Query returns a query builder for ExtraInfo.
func (c *ExtraInfoClient) Query() *ExtraInfoQuery {
	return &ExtraInfoQuery{
		config: c.config,
	}
}

// Get returns a ExtraInfo entity by its id.
func (c *ExtraInfoClient) Get(ctx context.Context, id uint32) (*ExtraInfo, error) {
	return c.Query().Where(extrainfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExtraInfoClient) GetX(ctx context.Context, id uint32) *ExtraInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExtraInfoClient) Hooks() []Hook {
	hooks := c.hooks.ExtraInfo
	return append(hooks[:len(hooks):len(hooks)], extrainfo.Hooks[:]...)
}

// FbmCrowdFundingClient is a client for the FbmCrowdFunding schema.
type FbmCrowdFundingClient struct {
	config
}

// NewFbmCrowdFundingClient returns a client for the FbmCrowdFunding from the given config.
func NewFbmCrowdFundingClient(c config) *FbmCrowdFundingClient {
	return &FbmCrowdFundingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fbmcrowdfunding.Hooks(f(g(h())))`.
func (c *FbmCrowdFundingClient) Use(hooks ...Hook) {
	c.hooks.FbmCrowdFunding = append(c.hooks.FbmCrowdFunding, hooks...)
}

// Create returns a builder for creating a FbmCrowdFunding entity.
func (c *FbmCrowdFundingClient) Create() *FbmCrowdFundingCreate {
	mutation := newFbmCrowdFundingMutation(c.config, OpCreate)
	return &FbmCrowdFundingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FbmCrowdFunding entities.
func (c *FbmCrowdFundingClient) CreateBulk(builders ...*FbmCrowdFundingCreate) *FbmCrowdFundingCreateBulk {
	return &FbmCrowdFundingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FbmCrowdFunding.
func (c *FbmCrowdFundingClient) Update() *FbmCrowdFundingUpdate {
	mutation := newFbmCrowdFundingMutation(c.config, OpUpdate)
	return &FbmCrowdFundingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FbmCrowdFundingClient) UpdateOne(fcf *FbmCrowdFunding) *FbmCrowdFundingUpdateOne {
	mutation := newFbmCrowdFundingMutation(c.config, OpUpdateOne, withFbmCrowdFunding(fcf))
	return &FbmCrowdFundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FbmCrowdFundingClient) UpdateOneID(id uint32) *FbmCrowdFundingUpdateOne {
	mutation := newFbmCrowdFundingMutation(c.config, OpUpdateOne, withFbmCrowdFundingID(id))
	return &FbmCrowdFundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FbmCrowdFunding.
func (c *FbmCrowdFundingClient) Delete() *FbmCrowdFundingDelete {
	mutation := newFbmCrowdFundingMutation(c.config, OpDelete)
	return &FbmCrowdFundingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FbmCrowdFundingClient) DeleteOne(fcf *FbmCrowdFunding) *FbmCrowdFundingDeleteOne {
	return c.DeleteOneID(fcf.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FbmCrowdFundingClient) DeleteOneID(id uint32) *FbmCrowdFundingDeleteOne {
	builder := c.Delete().Where(fbmcrowdfunding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FbmCrowdFundingDeleteOne{builder}
}

// Query returns a query builder for FbmCrowdFunding.
func (c *FbmCrowdFundingClient) Query() *FbmCrowdFundingQuery {
	return &FbmCrowdFundingQuery{
		config: c.config,
	}
}

// Get returns a FbmCrowdFunding entity by its id.
func (c *FbmCrowdFundingClient) Get(ctx context.Context, id uint32) (*FbmCrowdFunding, error) {
	return c.Query().Where(fbmcrowdfunding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FbmCrowdFundingClient) GetX(ctx context.Context, id uint32) *FbmCrowdFunding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FbmCrowdFundingClient) Hooks() []Hook {
	hooks := c.hooks.FbmCrowdFunding
	return append(hooks[:len(hooks):len(hooks)], fbmcrowdfunding.Hooks[:]...)
}

// FeeClient is a client for the Fee schema.
type FeeClient struct {
	config
}

// NewFeeClient returns a client for the Fee from the given config.
func NewFeeClient(c config) *FeeClient {
	return &FeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fee.Hooks(f(g(h())))`.
func (c *FeeClient) Use(hooks ...Hook) {
	c.hooks.Fee = append(c.hooks.Fee, hooks...)
}

// Create returns a builder for creating a Fee entity.
func (c *FeeClient) Create() *FeeCreate {
	mutation := newFeeMutation(c.config, OpCreate)
	return &FeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fee entities.
func (c *FeeClient) CreateBulk(builders ...*FeeCreate) *FeeCreateBulk {
	return &FeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fee.
func (c *FeeClient) Update() *FeeUpdate {
	mutation := newFeeMutation(c.config, OpUpdate)
	return &FeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeeClient) UpdateOne(f *Fee) *FeeUpdateOne {
	mutation := newFeeMutation(c.config, OpUpdateOne, withFee(f))
	return &FeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeeClient) UpdateOneID(id uint32) *FeeUpdateOne {
	mutation := newFeeMutation(c.config, OpUpdateOne, withFeeID(id))
	return &FeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fee.
func (c *FeeClient) Delete() *FeeDelete {
	mutation := newFeeMutation(c.config, OpDelete)
	return &FeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeeClient) DeleteOne(f *Fee) *FeeDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FeeClient) DeleteOneID(id uint32) *FeeDeleteOne {
	builder := c.Delete().Where(fee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeeDeleteOne{builder}
}

// Query returns a query builder for Fee.
func (c *FeeClient) Query() *FeeQuery {
	return &FeeQuery{
		config: c.config,
	}
}

// Get returns a Fee entity by its id.
func (c *FeeClient) Get(ctx context.Context, id uint32) (*Fee, error) {
	return c.Query().Where(fee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeeClient) GetX(ctx context.Context, id uint32) *Fee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeeClient) Hooks() []Hook {
	hooks := c.hooks.Fee
	return append(hooks[:len(hooks):len(hooks)], fee.Hooks[:]...)
}

// GoodClient is a client for the Good schema.
type GoodClient struct {
	config
}

// NewGoodClient returns a client for the Good from the given config.
func NewGoodClient(c config) *GoodClient {
	return &GoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `good.Hooks(f(g(h())))`.
func (c *GoodClient) Use(hooks ...Hook) {
	c.hooks.Good = append(c.hooks.Good, hooks...)
}

// Create returns a builder for creating a Good entity.
func (c *GoodClient) Create() *GoodCreate {
	mutation := newGoodMutation(c.config, OpCreate)
	return &GoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Good entities.
func (c *GoodClient) CreateBulk(builders ...*GoodCreate) *GoodCreateBulk {
	return &GoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Good.
func (c *GoodClient) Update() *GoodUpdate {
	mutation := newGoodMutation(c.config, OpUpdate)
	return &GoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodClient) UpdateOne(_go *Good) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGood(_go))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodClient) UpdateOneID(id uint32) *GoodUpdateOne {
	mutation := newGoodMutation(c.config, OpUpdateOne, withGoodID(id))
	return &GoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Good.
func (c *GoodClient) Delete() *GoodDelete {
	mutation := newGoodMutation(c.config, OpDelete)
	return &GoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodClient) DeleteOne(_go *Good) *GoodDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodClient) DeleteOneID(id uint32) *GoodDeleteOne {
	builder := c.Delete().Where(good.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodDeleteOne{builder}
}

// Query returns a query builder for Good.
func (c *GoodClient) Query() *GoodQuery {
	return &GoodQuery{
		config: c.config,
	}
}

// Get returns a Good entity by its id.
func (c *GoodClient) Get(ctx context.Context, id uint32) (*Good, error) {
	return c.Query().Where(good.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodClient) GetX(ctx context.Context, id uint32) *Good {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodClient) Hooks() []Hook {
	hooks := c.hooks.Good
	return append(hooks[:len(hooks):len(hooks)], good.Hooks[:]...)
}

// GoodBaseClient is a client for the GoodBase schema.
type GoodBaseClient struct {
	config
}

// NewGoodBaseClient returns a client for the GoodBase from the given config.
func NewGoodBaseClient(c config) *GoodBaseClient {
	return &GoodBaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodbase.Hooks(f(g(h())))`.
func (c *GoodBaseClient) Use(hooks ...Hook) {
	c.hooks.GoodBase = append(c.hooks.GoodBase, hooks...)
}

// Create returns a builder for creating a GoodBase entity.
func (c *GoodBaseClient) Create() *GoodBaseCreate {
	mutation := newGoodBaseMutation(c.config, OpCreate)
	return &GoodBaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodBase entities.
func (c *GoodBaseClient) CreateBulk(builders ...*GoodBaseCreate) *GoodBaseCreateBulk {
	return &GoodBaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodBase.
func (c *GoodBaseClient) Update() *GoodBaseUpdate {
	mutation := newGoodBaseMutation(c.config, OpUpdate)
	return &GoodBaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodBaseClient) UpdateOne(gb *GoodBase) *GoodBaseUpdateOne {
	mutation := newGoodBaseMutation(c.config, OpUpdateOne, withGoodBase(gb))
	return &GoodBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodBaseClient) UpdateOneID(id uint32) *GoodBaseUpdateOne {
	mutation := newGoodBaseMutation(c.config, OpUpdateOne, withGoodBaseID(id))
	return &GoodBaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodBase.
func (c *GoodBaseClient) Delete() *GoodBaseDelete {
	mutation := newGoodBaseMutation(c.config, OpDelete)
	return &GoodBaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodBaseClient) DeleteOne(gb *GoodBase) *GoodBaseDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodBaseClient) DeleteOneID(id uint32) *GoodBaseDeleteOne {
	builder := c.Delete().Where(goodbase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodBaseDeleteOne{builder}
}

// Query returns a query builder for GoodBase.
func (c *GoodBaseClient) Query() *GoodBaseQuery {
	return &GoodBaseQuery{
		config: c.config,
	}
}

// Get returns a GoodBase entity by its id.
func (c *GoodBaseClient) Get(ctx context.Context, id uint32) (*GoodBase, error) {
	return c.Query().Where(goodbase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodBaseClient) GetX(ctx context.Context, id uint32) *GoodBase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodBaseClient) Hooks() []Hook {
	hooks := c.hooks.GoodBase
	return append(hooks[:len(hooks):len(hooks)], goodbase.Hooks[:]...)
}

// GoodCoinClient is a client for the GoodCoin schema.
type GoodCoinClient struct {
	config
}

// NewGoodCoinClient returns a client for the GoodCoin from the given config.
func NewGoodCoinClient(c config) *GoodCoinClient {
	return &GoodCoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodcoin.Hooks(f(g(h())))`.
func (c *GoodCoinClient) Use(hooks ...Hook) {
	c.hooks.GoodCoin = append(c.hooks.GoodCoin, hooks...)
}

// Create returns a builder for creating a GoodCoin entity.
func (c *GoodCoinClient) Create() *GoodCoinCreate {
	mutation := newGoodCoinMutation(c.config, OpCreate)
	return &GoodCoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodCoin entities.
func (c *GoodCoinClient) CreateBulk(builders ...*GoodCoinCreate) *GoodCoinCreateBulk {
	return &GoodCoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodCoin.
func (c *GoodCoinClient) Update() *GoodCoinUpdate {
	mutation := newGoodCoinMutation(c.config, OpUpdate)
	return &GoodCoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodCoinClient) UpdateOne(gc *GoodCoin) *GoodCoinUpdateOne {
	mutation := newGoodCoinMutation(c.config, OpUpdateOne, withGoodCoin(gc))
	return &GoodCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodCoinClient) UpdateOneID(id uint32) *GoodCoinUpdateOne {
	mutation := newGoodCoinMutation(c.config, OpUpdateOne, withGoodCoinID(id))
	return &GoodCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodCoin.
func (c *GoodCoinClient) Delete() *GoodCoinDelete {
	mutation := newGoodCoinMutation(c.config, OpDelete)
	return &GoodCoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodCoinClient) DeleteOne(gc *GoodCoin) *GoodCoinDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodCoinClient) DeleteOneID(id uint32) *GoodCoinDeleteOne {
	builder := c.Delete().Where(goodcoin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodCoinDeleteOne{builder}
}

// Query returns a query builder for GoodCoin.
func (c *GoodCoinClient) Query() *GoodCoinQuery {
	return &GoodCoinQuery{
		config: c.config,
	}
}

// Get returns a GoodCoin entity by its id.
func (c *GoodCoinClient) Get(ctx context.Context, id uint32) (*GoodCoin, error) {
	return c.Query().Where(goodcoin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodCoinClient) GetX(ctx context.Context, id uint32) *GoodCoin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodCoinClient) Hooks() []Hook {
	hooks := c.hooks.GoodCoin
	return append(hooks[:len(hooks):len(hooks)], goodcoin.Hooks[:]...)
}

// GoodRewardClient is a client for the GoodReward schema.
type GoodRewardClient struct {
	config
}

// NewGoodRewardClient returns a client for the GoodReward from the given config.
func NewGoodRewardClient(c config) *GoodRewardClient {
	return &GoodRewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodreward.Hooks(f(g(h())))`.
func (c *GoodRewardClient) Use(hooks ...Hook) {
	c.hooks.GoodReward = append(c.hooks.GoodReward, hooks...)
}

// Create returns a builder for creating a GoodReward entity.
func (c *GoodRewardClient) Create() *GoodRewardCreate {
	mutation := newGoodRewardMutation(c.config, OpCreate)
	return &GoodRewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodReward entities.
func (c *GoodRewardClient) CreateBulk(builders ...*GoodRewardCreate) *GoodRewardCreateBulk {
	return &GoodRewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodReward.
func (c *GoodRewardClient) Update() *GoodRewardUpdate {
	mutation := newGoodRewardMutation(c.config, OpUpdate)
	return &GoodRewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodRewardClient) UpdateOne(gr *GoodReward) *GoodRewardUpdateOne {
	mutation := newGoodRewardMutation(c.config, OpUpdateOne, withGoodReward(gr))
	return &GoodRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodRewardClient) UpdateOneID(id uint32) *GoodRewardUpdateOne {
	mutation := newGoodRewardMutation(c.config, OpUpdateOne, withGoodRewardID(id))
	return &GoodRewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodReward.
func (c *GoodRewardClient) Delete() *GoodRewardDelete {
	mutation := newGoodRewardMutation(c.config, OpDelete)
	return &GoodRewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodRewardClient) DeleteOne(gr *GoodReward) *GoodRewardDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodRewardClient) DeleteOneID(id uint32) *GoodRewardDeleteOne {
	builder := c.Delete().Where(goodreward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodRewardDeleteOne{builder}
}

// Query returns a query builder for GoodReward.
func (c *GoodRewardClient) Query() *GoodRewardQuery {
	return &GoodRewardQuery{
		config: c.config,
	}
}

// Get returns a GoodReward entity by its id.
func (c *GoodRewardClient) Get(ctx context.Context, id uint32) (*GoodReward, error) {
	return c.Query().Where(goodreward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodRewardClient) GetX(ctx context.Context, id uint32) *GoodReward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodRewardClient) Hooks() []Hook {
	hooks := c.hooks.GoodReward
	return append(hooks[:len(hooks):len(hooks)], goodreward.Hooks[:]...)
}

// GoodRewardHistoryClient is a client for the GoodRewardHistory schema.
type GoodRewardHistoryClient struct {
	config
}

// NewGoodRewardHistoryClient returns a client for the GoodRewardHistory from the given config.
func NewGoodRewardHistoryClient(c config) *GoodRewardHistoryClient {
	return &GoodRewardHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodrewardhistory.Hooks(f(g(h())))`.
func (c *GoodRewardHistoryClient) Use(hooks ...Hook) {
	c.hooks.GoodRewardHistory = append(c.hooks.GoodRewardHistory, hooks...)
}

// Create returns a builder for creating a GoodRewardHistory entity.
func (c *GoodRewardHistoryClient) Create() *GoodRewardHistoryCreate {
	mutation := newGoodRewardHistoryMutation(c.config, OpCreate)
	return &GoodRewardHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodRewardHistory entities.
func (c *GoodRewardHistoryClient) CreateBulk(builders ...*GoodRewardHistoryCreate) *GoodRewardHistoryCreateBulk {
	return &GoodRewardHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Update() *GoodRewardHistoryUpdate {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdate)
	return &GoodRewardHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodRewardHistoryClient) UpdateOne(grh *GoodRewardHistory) *GoodRewardHistoryUpdateOne {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdateOne, withGoodRewardHistory(grh))
	return &GoodRewardHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodRewardHistoryClient) UpdateOneID(id uint32) *GoodRewardHistoryUpdateOne {
	mutation := newGoodRewardHistoryMutation(c.config, OpUpdateOne, withGoodRewardHistoryID(id))
	return &GoodRewardHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Delete() *GoodRewardHistoryDelete {
	mutation := newGoodRewardHistoryMutation(c.config, OpDelete)
	return &GoodRewardHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodRewardHistoryClient) DeleteOne(grh *GoodRewardHistory) *GoodRewardHistoryDeleteOne {
	return c.DeleteOneID(grh.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodRewardHistoryClient) DeleteOneID(id uint32) *GoodRewardHistoryDeleteOne {
	builder := c.Delete().Where(goodrewardhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodRewardHistoryDeleteOne{builder}
}

// Query returns a query builder for GoodRewardHistory.
func (c *GoodRewardHistoryClient) Query() *GoodRewardHistoryQuery {
	return &GoodRewardHistoryQuery{
		config: c.config,
	}
}

// Get returns a GoodRewardHistory entity by its id.
func (c *GoodRewardHistoryClient) Get(ctx context.Context, id uint32) (*GoodRewardHistory, error) {
	return c.Query().Where(goodrewardhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodRewardHistoryClient) GetX(ctx context.Context, id uint32) *GoodRewardHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodRewardHistoryClient) Hooks() []Hook {
	hooks := c.hooks.GoodRewardHistory
	return append(hooks[:len(hooks):len(hooks)], goodrewardhistory.Hooks[:]...)
}

// LikeClient is a client for the Like schema.
type LikeClient struct {
	config
}

// NewLikeClient returns a client for the Like from the given config.
func NewLikeClient(c config) *LikeClient {
	return &LikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `like.Hooks(f(g(h())))`.
func (c *LikeClient) Use(hooks ...Hook) {
	c.hooks.Like = append(c.hooks.Like, hooks...)
}

// Create returns a builder for creating a Like entity.
func (c *LikeClient) Create() *LikeCreate {
	mutation := newLikeMutation(c.config, OpCreate)
	return &LikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Like entities.
func (c *LikeClient) CreateBulk(builders ...*LikeCreate) *LikeCreateBulk {
	return &LikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Like.
func (c *LikeClient) Update() *LikeUpdate {
	mutation := newLikeMutation(c.config, OpUpdate)
	return &LikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LikeClient) UpdateOne(l *Like) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLike(l))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LikeClient) UpdateOneID(id uint32) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLikeID(id))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Like.
func (c *LikeClient) Delete() *LikeDelete {
	mutation := newLikeMutation(c.config, OpDelete)
	return &LikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LikeClient) DeleteOne(l *Like) *LikeDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LikeClient) DeleteOneID(id uint32) *LikeDeleteOne {
	builder := c.Delete().Where(like.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LikeDeleteOne{builder}
}

// Query returns a query builder for Like.
func (c *LikeClient) Query() *LikeQuery {
	return &LikeQuery{
		config: c.config,
	}
}

// Get returns a Like entity by its id.
func (c *LikeClient) Get(ctx context.Context, id uint32) (*Like, error) {
	return c.Query().Where(like.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LikeClient) GetX(ctx context.Context, id uint32) *Like {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LikeClient) Hooks() []Hook {
	hooks := c.hooks.Like
	return append(hooks[:len(hooks):len(hooks)], like.Hooks[:]...)
}

// MiningGoodStockClient is a client for the MiningGoodStock schema.
type MiningGoodStockClient struct {
	config
}

// NewMiningGoodStockClient returns a client for the MiningGoodStock from the given config.
func NewMiningGoodStockClient(c config) *MiningGoodStockClient {
	return &MiningGoodStockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mininggoodstock.Hooks(f(g(h())))`.
func (c *MiningGoodStockClient) Use(hooks ...Hook) {
	c.hooks.MiningGoodStock = append(c.hooks.MiningGoodStock, hooks...)
}

// Create returns a builder for creating a MiningGoodStock entity.
func (c *MiningGoodStockClient) Create() *MiningGoodStockCreate {
	mutation := newMiningGoodStockMutation(c.config, OpCreate)
	return &MiningGoodStockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MiningGoodStock entities.
func (c *MiningGoodStockClient) CreateBulk(builders ...*MiningGoodStockCreate) *MiningGoodStockCreateBulk {
	return &MiningGoodStockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MiningGoodStock.
func (c *MiningGoodStockClient) Update() *MiningGoodStockUpdate {
	mutation := newMiningGoodStockMutation(c.config, OpUpdate)
	return &MiningGoodStockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MiningGoodStockClient) UpdateOne(mgs *MiningGoodStock) *MiningGoodStockUpdateOne {
	mutation := newMiningGoodStockMutation(c.config, OpUpdateOne, withMiningGoodStock(mgs))
	return &MiningGoodStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MiningGoodStockClient) UpdateOneID(id uint32) *MiningGoodStockUpdateOne {
	mutation := newMiningGoodStockMutation(c.config, OpUpdateOne, withMiningGoodStockID(id))
	return &MiningGoodStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MiningGoodStock.
func (c *MiningGoodStockClient) Delete() *MiningGoodStockDelete {
	mutation := newMiningGoodStockMutation(c.config, OpDelete)
	return &MiningGoodStockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MiningGoodStockClient) DeleteOne(mgs *MiningGoodStock) *MiningGoodStockDeleteOne {
	return c.DeleteOneID(mgs.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MiningGoodStockClient) DeleteOneID(id uint32) *MiningGoodStockDeleteOne {
	builder := c.Delete().Where(mininggoodstock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MiningGoodStockDeleteOne{builder}
}

// Query returns a query builder for MiningGoodStock.
func (c *MiningGoodStockClient) Query() *MiningGoodStockQuery {
	return &MiningGoodStockQuery{
		config: c.config,
	}
}

// Get returns a MiningGoodStock entity by its id.
func (c *MiningGoodStockClient) Get(ctx context.Context, id uint32) (*MiningGoodStock, error) {
	return c.Query().Where(mininggoodstock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MiningGoodStockClient) GetX(ctx context.Context, id uint32) *MiningGoodStock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MiningGoodStockClient) Hooks() []Hook {
	hooks := c.hooks.MiningGoodStock
	return append(hooks[:len(hooks):len(hooks)], mininggoodstock.Hooks[:]...)
}

// PowerRentalClient is a client for the PowerRental schema.
type PowerRentalClient struct {
	config
}

// NewPowerRentalClient returns a client for the PowerRental from the given config.
func NewPowerRentalClient(c config) *PowerRentalClient {
	return &PowerRentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `powerrental.Hooks(f(g(h())))`.
func (c *PowerRentalClient) Use(hooks ...Hook) {
	c.hooks.PowerRental = append(c.hooks.PowerRental, hooks...)
}

// Create returns a builder for creating a PowerRental entity.
func (c *PowerRentalClient) Create() *PowerRentalCreate {
	mutation := newPowerRentalMutation(c.config, OpCreate)
	return &PowerRentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PowerRental entities.
func (c *PowerRentalClient) CreateBulk(builders ...*PowerRentalCreate) *PowerRentalCreateBulk {
	return &PowerRentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PowerRental.
func (c *PowerRentalClient) Update() *PowerRentalUpdate {
	mutation := newPowerRentalMutation(c.config, OpUpdate)
	return &PowerRentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PowerRentalClient) UpdateOne(pr *PowerRental) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRental(pr))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PowerRentalClient) UpdateOneID(id uint32) *PowerRentalUpdateOne {
	mutation := newPowerRentalMutation(c.config, OpUpdateOne, withPowerRentalID(id))
	return &PowerRentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PowerRental.
func (c *PowerRentalClient) Delete() *PowerRentalDelete {
	mutation := newPowerRentalMutation(c.config, OpDelete)
	return &PowerRentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PowerRentalClient) DeleteOne(pr *PowerRental) *PowerRentalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PowerRentalClient) DeleteOneID(id uint32) *PowerRentalDeleteOne {
	builder := c.Delete().Where(powerrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PowerRentalDeleteOne{builder}
}

// Query returns a query builder for PowerRental.
func (c *PowerRentalClient) Query() *PowerRentalQuery {
	return &PowerRentalQuery{
		config: c.config,
	}
}

// Get returns a PowerRental entity by its id.
func (c *PowerRentalClient) Get(ctx context.Context, id uint32) (*PowerRental, error) {
	return c.Query().Where(powerrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PowerRentalClient) GetX(ctx context.Context, id uint32) *PowerRental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PowerRentalClient) Hooks() []Hook {
	hooks := c.hooks.PowerRental
	return append(hooks[:len(hooks):len(hooks)], powerrental.Hooks[:]...)
}

// RecommendClient is a client for the Recommend schema.
type RecommendClient struct {
	config
}

// NewRecommendClient returns a client for the Recommend from the given config.
func NewRecommendClient(c config) *RecommendClient {
	return &RecommendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommend.Hooks(f(g(h())))`.
func (c *RecommendClient) Use(hooks ...Hook) {
	c.hooks.Recommend = append(c.hooks.Recommend, hooks...)
}

// Create returns a builder for creating a Recommend entity.
func (c *RecommendClient) Create() *RecommendCreate {
	mutation := newRecommendMutation(c.config, OpCreate)
	return &RecommendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recommend entities.
func (c *RecommendClient) CreateBulk(builders ...*RecommendCreate) *RecommendCreateBulk {
	return &RecommendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recommend.
func (c *RecommendClient) Update() *RecommendUpdate {
	mutation := newRecommendMutation(c.config, OpUpdate)
	return &RecommendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendClient) UpdateOne(r *Recommend) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommend(r))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendClient) UpdateOneID(id uint32) *RecommendUpdateOne {
	mutation := newRecommendMutation(c.config, OpUpdateOne, withRecommendID(id))
	return &RecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recommend.
func (c *RecommendClient) Delete() *RecommendDelete {
	mutation := newRecommendMutation(c.config, OpDelete)
	return &RecommendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendClient) DeleteOne(r *Recommend) *RecommendDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RecommendClient) DeleteOneID(id uint32) *RecommendDeleteOne {
	builder := c.Delete().Where(recommend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendDeleteOne{builder}
}

// Query returns a query builder for Recommend.
func (c *RecommendClient) Query() *RecommendQuery {
	return &RecommendQuery{
		config: c.config,
	}
}

// Get returns a Recommend entity by its id.
func (c *RecommendClient) Get(ctx context.Context, id uint32) (*Recommend, error) {
	return c.Query().Where(recommend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendClient) GetX(ctx context.Context, id uint32) *Recommend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RecommendClient) Hooks() []Hook {
	hooks := c.hooks.Recommend
	return append(hooks[:len(hooks):len(hooks)], recommend.Hooks[:]...)
}

// RequiredAppGoodClient is a client for the RequiredAppGood schema.
type RequiredAppGoodClient struct {
	config
}

// NewRequiredAppGoodClient returns a client for the RequiredAppGood from the given config.
func NewRequiredAppGoodClient(c config) *RequiredAppGoodClient {
	return &RequiredAppGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requiredappgood.Hooks(f(g(h())))`.
func (c *RequiredAppGoodClient) Use(hooks ...Hook) {
	c.hooks.RequiredAppGood = append(c.hooks.RequiredAppGood, hooks...)
}

// Create returns a builder for creating a RequiredAppGood entity.
func (c *RequiredAppGoodClient) Create() *RequiredAppGoodCreate {
	mutation := newRequiredAppGoodMutation(c.config, OpCreate)
	return &RequiredAppGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequiredAppGood entities.
func (c *RequiredAppGoodClient) CreateBulk(builders ...*RequiredAppGoodCreate) *RequiredAppGoodCreateBulk {
	return &RequiredAppGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequiredAppGood.
func (c *RequiredAppGoodClient) Update() *RequiredAppGoodUpdate {
	mutation := newRequiredAppGoodMutation(c.config, OpUpdate)
	return &RequiredAppGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequiredAppGoodClient) UpdateOne(rag *RequiredAppGood) *RequiredAppGoodUpdateOne {
	mutation := newRequiredAppGoodMutation(c.config, OpUpdateOne, withRequiredAppGood(rag))
	return &RequiredAppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequiredAppGoodClient) UpdateOneID(id uint32) *RequiredAppGoodUpdateOne {
	mutation := newRequiredAppGoodMutation(c.config, OpUpdateOne, withRequiredAppGoodID(id))
	return &RequiredAppGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequiredAppGood.
func (c *RequiredAppGoodClient) Delete() *RequiredAppGoodDelete {
	mutation := newRequiredAppGoodMutation(c.config, OpDelete)
	return &RequiredAppGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequiredAppGoodClient) DeleteOne(rag *RequiredAppGood) *RequiredAppGoodDeleteOne {
	return c.DeleteOneID(rag.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RequiredAppGoodClient) DeleteOneID(id uint32) *RequiredAppGoodDeleteOne {
	builder := c.Delete().Where(requiredappgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequiredAppGoodDeleteOne{builder}
}

// Query returns a query builder for RequiredAppGood.
func (c *RequiredAppGoodClient) Query() *RequiredAppGoodQuery {
	return &RequiredAppGoodQuery{
		config: c.config,
	}
}

// Get returns a RequiredAppGood entity by its id.
func (c *RequiredAppGoodClient) Get(ctx context.Context, id uint32) (*RequiredAppGood, error) {
	return c.Query().Where(requiredappgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequiredAppGoodClient) GetX(ctx context.Context, id uint32) *RequiredAppGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RequiredAppGoodClient) Hooks() []Hook {
	hooks := c.hooks.RequiredAppGood
	return append(hooks[:len(hooks):len(hooks)], requiredappgood.Hooks[:]...)
}

// RequiredGoodClient is a client for the RequiredGood schema.
type RequiredGoodClient struct {
	config
}

// NewRequiredGoodClient returns a client for the RequiredGood from the given config.
func NewRequiredGoodClient(c config) *RequiredGoodClient {
	return &RequiredGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requiredgood.Hooks(f(g(h())))`.
func (c *RequiredGoodClient) Use(hooks ...Hook) {
	c.hooks.RequiredGood = append(c.hooks.RequiredGood, hooks...)
}

// Create returns a builder for creating a RequiredGood entity.
func (c *RequiredGoodClient) Create() *RequiredGoodCreate {
	mutation := newRequiredGoodMutation(c.config, OpCreate)
	return &RequiredGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequiredGood entities.
func (c *RequiredGoodClient) CreateBulk(builders ...*RequiredGoodCreate) *RequiredGoodCreateBulk {
	return &RequiredGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequiredGood.
func (c *RequiredGoodClient) Update() *RequiredGoodUpdate {
	mutation := newRequiredGoodMutation(c.config, OpUpdate)
	return &RequiredGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequiredGoodClient) UpdateOne(rg *RequiredGood) *RequiredGoodUpdateOne {
	mutation := newRequiredGoodMutation(c.config, OpUpdateOne, withRequiredGood(rg))
	return &RequiredGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequiredGoodClient) UpdateOneID(id uint32) *RequiredGoodUpdateOne {
	mutation := newRequiredGoodMutation(c.config, OpUpdateOne, withRequiredGoodID(id))
	return &RequiredGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequiredGood.
func (c *RequiredGoodClient) Delete() *RequiredGoodDelete {
	mutation := newRequiredGoodMutation(c.config, OpDelete)
	return &RequiredGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequiredGoodClient) DeleteOne(rg *RequiredGood) *RequiredGoodDeleteOne {
	return c.DeleteOneID(rg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RequiredGoodClient) DeleteOneID(id uint32) *RequiredGoodDeleteOne {
	builder := c.Delete().Where(requiredgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequiredGoodDeleteOne{builder}
}

// Query returns a query builder for RequiredGood.
func (c *RequiredGoodClient) Query() *RequiredGoodQuery {
	return &RequiredGoodQuery{
		config: c.config,
	}
}

// Get returns a RequiredGood entity by its id.
func (c *RequiredGoodClient) Get(ctx context.Context, id uint32) (*RequiredGood, error) {
	return c.Query().Where(requiredgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequiredGoodClient) GetX(ctx context.Context, id uint32) *RequiredGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RequiredGoodClient) Hooks() []Hook {
	hooks := c.hooks.RequiredGood
	return append(hooks[:len(hooks):len(hooks)], requiredgood.Hooks[:]...)
}

// ScoreClient is a client for the Score schema.
type ScoreClient struct {
	config
}

// NewScoreClient returns a client for the Score from the given config.
func NewScoreClient(c config) *ScoreClient {
	return &ScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `score.Hooks(f(g(h())))`.
func (c *ScoreClient) Use(hooks ...Hook) {
	c.hooks.Score = append(c.hooks.Score, hooks...)
}

// Create returns a builder for creating a Score entity.
func (c *ScoreClient) Create() *ScoreCreate {
	mutation := newScoreMutation(c.config, OpCreate)
	return &ScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Score entities.
func (c *ScoreClient) CreateBulk(builders ...*ScoreCreate) *ScoreCreateBulk {
	return &ScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Score.
func (c *ScoreClient) Update() *ScoreUpdate {
	mutation := newScoreMutation(c.config, OpUpdate)
	return &ScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoreClient) UpdateOne(s *Score) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScore(s))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoreClient) UpdateOneID(id uint32) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScoreID(id))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Score.
func (c *ScoreClient) Delete() *ScoreDelete {
	mutation := newScoreMutation(c.config, OpDelete)
	return &ScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoreClient) DeleteOne(s *Score) *ScoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ScoreClient) DeleteOneID(id uint32) *ScoreDeleteOne {
	builder := c.Delete().Where(score.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoreDeleteOne{builder}
}

// Query returns a query builder for Score.
func (c *ScoreClient) Query() *ScoreQuery {
	return &ScoreQuery{
		config: c.config,
	}
}

// Get returns a Score entity by its id.
func (c *ScoreClient) Get(ctx context.Context, id uint32) (*Score, error) {
	return c.Query().Where(score.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoreClient) GetX(ctx context.Context, id uint32) *Score {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScoreClient) Hooks() []Hook {
	hooks := c.hooks.Score
	return append(hooks[:len(hooks):len(hooks)], score.Hooks[:]...)
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uint32) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uint32) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uint32) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uint32) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	hooks := c.hooks.Stock
	return append(hooks[:len(hooks):len(hooks)], stock.Hooks[:]...)
}

// TopMostClient is a client for the TopMost schema.
type TopMostClient struct {
	config
}

// NewTopMostClient returns a client for the TopMost from the given config.
func NewTopMostClient(c config) *TopMostClient {
	return &TopMostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmost.Hooks(f(g(h())))`.
func (c *TopMostClient) Use(hooks ...Hook) {
	c.hooks.TopMost = append(c.hooks.TopMost, hooks...)
}

// Create returns a builder for creating a TopMost entity.
func (c *TopMostClient) Create() *TopMostCreate {
	mutation := newTopMostMutation(c.config, OpCreate)
	return &TopMostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMost entities.
func (c *TopMostClient) CreateBulk(builders ...*TopMostCreate) *TopMostCreateBulk {
	return &TopMostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMost.
func (c *TopMostClient) Update() *TopMostUpdate {
	mutation := newTopMostMutation(c.config, OpUpdate)
	return &TopMostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostClient) UpdateOne(tm *TopMost) *TopMostUpdateOne {
	mutation := newTopMostMutation(c.config, OpUpdateOne, withTopMost(tm))
	return &TopMostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostClient) UpdateOneID(id uint32) *TopMostUpdateOne {
	mutation := newTopMostMutation(c.config, OpUpdateOne, withTopMostID(id))
	return &TopMostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMost.
func (c *TopMostClient) Delete() *TopMostDelete {
	mutation := newTopMostMutation(c.config, OpDelete)
	return &TopMostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostClient) DeleteOne(tm *TopMost) *TopMostDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostClient) DeleteOneID(id uint32) *TopMostDeleteOne {
	builder := c.Delete().Where(topmost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostDeleteOne{builder}
}

// Query returns a query builder for TopMost.
func (c *TopMostClient) Query() *TopMostQuery {
	return &TopMostQuery{
		config: c.config,
	}
}

// Get returns a TopMost entity by its id.
func (c *TopMostClient) Get(ctx context.Context, id uint32) (*TopMost, error) {
	return c.Query().Where(topmost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostClient) GetX(ctx context.Context, id uint32) *TopMost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostClient) Hooks() []Hook {
	hooks := c.hooks.TopMost
	return append(hooks[:len(hooks):len(hooks)], topmost.Hooks[:]...)
}

// TopMostConstraintClient is a client for the TopMostConstraint schema.
type TopMostConstraintClient struct {
	config
}

// NewTopMostConstraintClient returns a client for the TopMostConstraint from the given config.
func NewTopMostConstraintClient(c config) *TopMostConstraintClient {
	return &TopMostConstraintClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostconstraint.Hooks(f(g(h())))`.
func (c *TopMostConstraintClient) Use(hooks ...Hook) {
	c.hooks.TopMostConstraint = append(c.hooks.TopMostConstraint, hooks...)
}

// Create returns a builder for creating a TopMostConstraint entity.
func (c *TopMostConstraintClient) Create() *TopMostConstraintCreate {
	mutation := newTopMostConstraintMutation(c.config, OpCreate)
	return &TopMostConstraintCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostConstraint entities.
func (c *TopMostConstraintClient) CreateBulk(builders ...*TopMostConstraintCreate) *TopMostConstraintCreateBulk {
	return &TopMostConstraintCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostConstraint.
func (c *TopMostConstraintClient) Update() *TopMostConstraintUpdate {
	mutation := newTopMostConstraintMutation(c.config, OpUpdate)
	return &TopMostConstraintUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostConstraintClient) UpdateOne(tmc *TopMostConstraint) *TopMostConstraintUpdateOne {
	mutation := newTopMostConstraintMutation(c.config, OpUpdateOne, withTopMostConstraint(tmc))
	return &TopMostConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostConstraintClient) UpdateOneID(id uint32) *TopMostConstraintUpdateOne {
	mutation := newTopMostConstraintMutation(c.config, OpUpdateOne, withTopMostConstraintID(id))
	return &TopMostConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostConstraint.
func (c *TopMostConstraintClient) Delete() *TopMostConstraintDelete {
	mutation := newTopMostConstraintMutation(c.config, OpDelete)
	return &TopMostConstraintDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostConstraintClient) DeleteOne(tmc *TopMostConstraint) *TopMostConstraintDeleteOne {
	return c.DeleteOneID(tmc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostConstraintClient) DeleteOneID(id uint32) *TopMostConstraintDeleteOne {
	builder := c.Delete().Where(topmostconstraint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostConstraintDeleteOne{builder}
}

// Query returns a query builder for TopMostConstraint.
func (c *TopMostConstraintClient) Query() *TopMostConstraintQuery {
	return &TopMostConstraintQuery{
		config: c.config,
	}
}

// Get returns a TopMostConstraint entity by its id.
func (c *TopMostConstraintClient) Get(ctx context.Context, id uint32) (*TopMostConstraint, error) {
	return c.Query().Where(topmostconstraint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostConstraintClient) GetX(ctx context.Context, id uint32) *TopMostConstraint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostConstraintClient) Hooks() []Hook {
	hooks := c.hooks.TopMostConstraint
	return append(hooks[:len(hooks):len(hooks)], topmostconstraint.Hooks[:]...)
}

// TopMostGoodClient is a client for the TopMostGood schema.
type TopMostGoodClient struct {
	config
}

// NewTopMostGoodClient returns a client for the TopMostGood from the given config.
func NewTopMostGoodClient(c config) *TopMostGoodClient {
	return &TopMostGoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostgood.Hooks(f(g(h())))`.
func (c *TopMostGoodClient) Use(hooks ...Hook) {
	c.hooks.TopMostGood = append(c.hooks.TopMostGood, hooks...)
}

// Create returns a builder for creating a TopMostGood entity.
func (c *TopMostGoodClient) Create() *TopMostGoodCreate {
	mutation := newTopMostGoodMutation(c.config, OpCreate)
	return &TopMostGoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostGood entities.
func (c *TopMostGoodClient) CreateBulk(builders ...*TopMostGoodCreate) *TopMostGoodCreateBulk {
	return &TopMostGoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostGood.
func (c *TopMostGoodClient) Update() *TopMostGoodUpdate {
	mutation := newTopMostGoodMutation(c.config, OpUpdate)
	return &TopMostGoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostGoodClient) UpdateOne(tmg *TopMostGood) *TopMostGoodUpdateOne {
	mutation := newTopMostGoodMutation(c.config, OpUpdateOne, withTopMostGood(tmg))
	return &TopMostGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostGoodClient) UpdateOneID(id uint32) *TopMostGoodUpdateOne {
	mutation := newTopMostGoodMutation(c.config, OpUpdateOne, withTopMostGoodID(id))
	return &TopMostGoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostGood.
func (c *TopMostGoodClient) Delete() *TopMostGoodDelete {
	mutation := newTopMostGoodMutation(c.config, OpDelete)
	return &TopMostGoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostGoodClient) DeleteOne(tmg *TopMostGood) *TopMostGoodDeleteOne {
	return c.DeleteOneID(tmg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostGoodClient) DeleteOneID(id uint32) *TopMostGoodDeleteOne {
	builder := c.Delete().Where(topmostgood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostGoodDeleteOne{builder}
}

// Query returns a query builder for TopMostGood.
func (c *TopMostGoodClient) Query() *TopMostGoodQuery {
	return &TopMostGoodQuery{
		config: c.config,
	}
}

// Get returns a TopMostGood entity by its id.
func (c *TopMostGoodClient) Get(ctx context.Context, id uint32) (*TopMostGood, error) {
	return c.Query().Where(topmostgood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostGoodClient) GetX(ctx context.Context, id uint32) *TopMostGood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostGoodClient) Hooks() []Hook {
	hooks := c.hooks.TopMostGood
	return append(hooks[:len(hooks):len(hooks)], topmostgood.Hooks[:]...)
}

// TopMostGoodConstraintClient is a client for the TopMostGoodConstraint schema.
type TopMostGoodConstraintClient struct {
	config
}

// NewTopMostGoodConstraintClient returns a client for the TopMostGoodConstraint from the given config.
func NewTopMostGoodConstraintClient(c config) *TopMostGoodConstraintClient {
	return &TopMostGoodConstraintClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostgoodconstraint.Hooks(f(g(h())))`.
func (c *TopMostGoodConstraintClient) Use(hooks ...Hook) {
	c.hooks.TopMostGoodConstraint = append(c.hooks.TopMostGoodConstraint, hooks...)
}

// Create returns a builder for creating a TopMostGoodConstraint entity.
func (c *TopMostGoodConstraintClient) Create() *TopMostGoodConstraintCreate {
	mutation := newTopMostGoodConstraintMutation(c.config, OpCreate)
	return &TopMostGoodConstraintCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostGoodConstraint entities.
func (c *TopMostGoodConstraintClient) CreateBulk(builders ...*TopMostGoodConstraintCreate) *TopMostGoodConstraintCreateBulk {
	return &TopMostGoodConstraintCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostGoodConstraint.
func (c *TopMostGoodConstraintClient) Update() *TopMostGoodConstraintUpdate {
	mutation := newTopMostGoodConstraintMutation(c.config, OpUpdate)
	return &TopMostGoodConstraintUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostGoodConstraintClient) UpdateOne(tmgc *TopMostGoodConstraint) *TopMostGoodConstraintUpdateOne {
	mutation := newTopMostGoodConstraintMutation(c.config, OpUpdateOne, withTopMostGoodConstraint(tmgc))
	return &TopMostGoodConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostGoodConstraintClient) UpdateOneID(id uint32) *TopMostGoodConstraintUpdateOne {
	mutation := newTopMostGoodConstraintMutation(c.config, OpUpdateOne, withTopMostGoodConstraintID(id))
	return &TopMostGoodConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostGoodConstraint.
func (c *TopMostGoodConstraintClient) Delete() *TopMostGoodConstraintDelete {
	mutation := newTopMostGoodConstraintMutation(c.config, OpDelete)
	return &TopMostGoodConstraintDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostGoodConstraintClient) DeleteOne(tmgc *TopMostGoodConstraint) *TopMostGoodConstraintDeleteOne {
	return c.DeleteOneID(tmgc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostGoodConstraintClient) DeleteOneID(id uint32) *TopMostGoodConstraintDeleteOne {
	builder := c.Delete().Where(topmostgoodconstraint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostGoodConstraintDeleteOne{builder}
}

// Query returns a query builder for TopMostGoodConstraint.
func (c *TopMostGoodConstraintClient) Query() *TopMostGoodConstraintQuery {
	return &TopMostGoodConstraintQuery{
		config: c.config,
	}
}

// Get returns a TopMostGoodConstraint entity by its id.
func (c *TopMostGoodConstraintClient) Get(ctx context.Context, id uint32) (*TopMostGoodConstraint, error) {
	return c.Query().Where(topmostgoodconstraint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostGoodConstraintClient) GetX(ctx context.Context, id uint32) *TopMostGoodConstraint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostGoodConstraintClient) Hooks() []Hook {
	hooks := c.hooks.TopMostGoodConstraint
	return append(hooks[:len(hooks):len(hooks)], topmostgoodconstraint.Hooks[:]...)
}

// TopMostGoodPosterClient is a client for the TopMostGoodPoster schema.
type TopMostGoodPosterClient struct {
	config
}

// NewTopMostGoodPosterClient returns a client for the TopMostGoodPoster from the given config.
func NewTopMostGoodPosterClient(c config) *TopMostGoodPosterClient {
	return &TopMostGoodPosterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostgoodposter.Hooks(f(g(h())))`.
func (c *TopMostGoodPosterClient) Use(hooks ...Hook) {
	c.hooks.TopMostGoodPoster = append(c.hooks.TopMostGoodPoster, hooks...)
}

// Create returns a builder for creating a TopMostGoodPoster entity.
func (c *TopMostGoodPosterClient) Create() *TopMostGoodPosterCreate {
	mutation := newTopMostGoodPosterMutation(c.config, OpCreate)
	return &TopMostGoodPosterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostGoodPoster entities.
func (c *TopMostGoodPosterClient) CreateBulk(builders ...*TopMostGoodPosterCreate) *TopMostGoodPosterCreateBulk {
	return &TopMostGoodPosterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostGoodPoster.
func (c *TopMostGoodPosterClient) Update() *TopMostGoodPosterUpdate {
	mutation := newTopMostGoodPosterMutation(c.config, OpUpdate)
	return &TopMostGoodPosterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostGoodPosterClient) UpdateOne(tmgp *TopMostGoodPoster) *TopMostGoodPosterUpdateOne {
	mutation := newTopMostGoodPosterMutation(c.config, OpUpdateOne, withTopMostGoodPoster(tmgp))
	return &TopMostGoodPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostGoodPosterClient) UpdateOneID(id uint32) *TopMostGoodPosterUpdateOne {
	mutation := newTopMostGoodPosterMutation(c.config, OpUpdateOne, withTopMostGoodPosterID(id))
	return &TopMostGoodPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostGoodPoster.
func (c *TopMostGoodPosterClient) Delete() *TopMostGoodPosterDelete {
	mutation := newTopMostGoodPosterMutation(c.config, OpDelete)
	return &TopMostGoodPosterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostGoodPosterClient) DeleteOne(tmgp *TopMostGoodPoster) *TopMostGoodPosterDeleteOne {
	return c.DeleteOneID(tmgp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostGoodPosterClient) DeleteOneID(id uint32) *TopMostGoodPosterDeleteOne {
	builder := c.Delete().Where(topmostgoodposter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostGoodPosterDeleteOne{builder}
}

// Query returns a query builder for TopMostGoodPoster.
func (c *TopMostGoodPosterClient) Query() *TopMostGoodPosterQuery {
	return &TopMostGoodPosterQuery{
		config: c.config,
	}
}

// Get returns a TopMostGoodPoster entity by its id.
func (c *TopMostGoodPosterClient) Get(ctx context.Context, id uint32) (*TopMostGoodPoster, error) {
	return c.Query().Where(topmostgoodposter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostGoodPosterClient) GetX(ctx context.Context, id uint32) *TopMostGoodPoster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostGoodPosterClient) Hooks() []Hook {
	hooks := c.hooks.TopMostGoodPoster
	return append(hooks[:len(hooks):len(hooks)], topmostgoodposter.Hooks[:]...)
}

// TopMostPosterClient is a client for the TopMostPoster schema.
type TopMostPosterClient struct {
	config
}

// NewTopMostPosterClient returns a client for the TopMostPoster from the given config.
func NewTopMostPosterClient(c config) *TopMostPosterClient {
	return &TopMostPosterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topmostposter.Hooks(f(g(h())))`.
func (c *TopMostPosterClient) Use(hooks ...Hook) {
	c.hooks.TopMostPoster = append(c.hooks.TopMostPoster, hooks...)
}

// Create returns a builder for creating a TopMostPoster entity.
func (c *TopMostPosterClient) Create() *TopMostPosterCreate {
	mutation := newTopMostPosterMutation(c.config, OpCreate)
	return &TopMostPosterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopMostPoster entities.
func (c *TopMostPosterClient) CreateBulk(builders ...*TopMostPosterCreate) *TopMostPosterCreateBulk {
	return &TopMostPosterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopMostPoster.
func (c *TopMostPosterClient) Update() *TopMostPosterUpdate {
	mutation := newTopMostPosterMutation(c.config, OpUpdate)
	return &TopMostPosterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopMostPosterClient) UpdateOne(tmp *TopMostPoster) *TopMostPosterUpdateOne {
	mutation := newTopMostPosterMutation(c.config, OpUpdateOne, withTopMostPoster(tmp))
	return &TopMostPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopMostPosterClient) UpdateOneID(id uint32) *TopMostPosterUpdateOne {
	mutation := newTopMostPosterMutation(c.config, OpUpdateOne, withTopMostPosterID(id))
	return &TopMostPosterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopMostPoster.
func (c *TopMostPosterClient) Delete() *TopMostPosterDelete {
	mutation := newTopMostPosterMutation(c.config, OpDelete)
	return &TopMostPosterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopMostPosterClient) DeleteOne(tmp *TopMostPoster) *TopMostPosterDeleteOne {
	return c.DeleteOneID(tmp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopMostPosterClient) DeleteOneID(id uint32) *TopMostPosterDeleteOne {
	builder := c.Delete().Where(topmostposter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopMostPosterDeleteOne{builder}
}

// Query returns a query builder for TopMostPoster.
func (c *TopMostPosterClient) Query() *TopMostPosterQuery {
	return &TopMostPosterQuery{
		config: c.config,
	}
}

// Get returns a TopMostPoster entity by its id.
func (c *TopMostPosterClient) Get(ctx context.Context, id uint32) (*TopMostPoster, error) {
	return c.Query().Where(topmostposter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopMostPosterClient) GetX(ctx context.Context, id uint32) *TopMostPoster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopMostPosterClient) Hooks() []Hook {
	hooks := c.hooks.TopMostPoster
	return append(hooks[:len(hooks):len(hooks)], topmostposter.Hooks[:]...)
}

// VendorBrandClient is a client for the VendorBrand schema.
type VendorBrandClient struct {
	config
}

// NewVendorBrandClient returns a client for the VendorBrand from the given config.
func NewVendorBrandClient(c config) *VendorBrandClient {
	return &VendorBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendorbrand.Hooks(f(g(h())))`.
func (c *VendorBrandClient) Use(hooks ...Hook) {
	c.hooks.VendorBrand = append(c.hooks.VendorBrand, hooks...)
}

// Create returns a builder for creating a VendorBrand entity.
func (c *VendorBrandClient) Create() *VendorBrandCreate {
	mutation := newVendorBrandMutation(c.config, OpCreate)
	return &VendorBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VendorBrand entities.
func (c *VendorBrandClient) CreateBulk(builders ...*VendorBrandCreate) *VendorBrandCreateBulk {
	return &VendorBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VendorBrand.
func (c *VendorBrandClient) Update() *VendorBrandUpdate {
	mutation := newVendorBrandMutation(c.config, OpUpdate)
	return &VendorBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorBrandClient) UpdateOne(vb *VendorBrand) *VendorBrandUpdateOne {
	mutation := newVendorBrandMutation(c.config, OpUpdateOne, withVendorBrand(vb))
	return &VendorBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorBrandClient) UpdateOneID(id uint32) *VendorBrandUpdateOne {
	mutation := newVendorBrandMutation(c.config, OpUpdateOne, withVendorBrandID(id))
	return &VendorBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VendorBrand.
func (c *VendorBrandClient) Delete() *VendorBrandDelete {
	mutation := newVendorBrandMutation(c.config, OpDelete)
	return &VendorBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VendorBrandClient) DeleteOne(vb *VendorBrand) *VendorBrandDeleteOne {
	return c.DeleteOneID(vb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VendorBrandClient) DeleteOneID(id uint32) *VendorBrandDeleteOne {
	builder := c.Delete().Where(vendorbrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorBrandDeleteOne{builder}
}

// Query returns a query builder for VendorBrand.
func (c *VendorBrandClient) Query() *VendorBrandQuery {
	return &VendorBrandQuery{
		config: c.config,
	}
}

// Get returns a VendorBrand entity by its id.
func (c *VendorBrandClient) Get(ctx context.Context, id uint32) (*VendorBrand, error) {
	return c.Query().Where(vendorbrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorBrandClient) GetX(ctx context.Context, id uint32) *VendorBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VendorBrandClient) Hooks() []Hook {
	hooks := c.hooks.VendorBrand
	return append(hooks[:len(hooks):len(hooks)], vendorbrand.Hooks[:]...)
}

// VendorLocationClient is a client for the VendorLocation schema.
type VendorLocationClient struct {
	config
}

// NewVendorLocationClient returns a client for the VendorLocation from the given config.
func NewVendorLocationClient(c config) *VendorLocationClient {
	return &VendorLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendorlocation.Hooks(f(g(h())))`.
func (c *VendorLocationClient) Use(hooks ...Hook) {
	c.hooks.VendorLocation = append(c.hooks.VendorLocation, hooks...)
}

// Create returns a builder for creating a VendorLocation entity.
func (c *VendorLocationClient) Create() *VendorLocationCreate {
	mutation := newVendorLocationMutation(c.config, OpCreate)
	return &VendorLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VendorLocation entities.
func (c *VendorLocationClient) CreateBulk(builders ...*VendorLocationCreate) *VendorLocationCreateBulk {
	return &VendorLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VendorLocation.
func (c *VendorLocationClient) Update() *VendorLocationUpdate {
	mutation := newVendorLocationMutation(c.config, OpUpdate)
	return &VendorLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorLocationClient) UpdateOne(vl *VendorLocation) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocation(vl))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorLocationClient) UpdateOneID(id uint32) *VendorLocationUpdateOne {
	mutation := newVendorLocationMutation(c.config, OpUpdateOne, withVendorLocationID(id))
	return &VendorLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VendorLocation.
func (c *VendorLocationClient) Delete() *VendorLocationDelete {
	mutation := newVendorLocationMutation(c.config, OpDelete)
	return &VendorLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VendorLocationClient) DeleteOne(vl *VendorLocation) *VendorLocationDeleteOne {
	return c.DeleteOneID(vl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *VendorLocationClient) DeleteOneID(id uint32) *VendorLocationDeleteOne {
	builder := c.Delete().Where(vendorlocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorLocationDeleteOne{builder}
}

// Query returns a query builder for VendorLocation.
func (c *VendorLocationClient) Query() *VendorLocationQuery {
	return &VendorLocationQuery{
		config: c.config,
	}
}

// Get returns a VendorLocation entity by its id.
func (c *VendorLocationClient) Get(ctx context.Context, id uint32) (*VendorLocation, error) {
	return c.Query().Where(vendorlocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorLocationClient) GetX(ctx context.Context, id uint32) *VendorLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VendorLocationClient) Hooks() []Hook {
	hooks := c.hooks.VendorLocation
	return append(hooks[:len(hooks):len(hooks)], vendorlocation.Hooks[:]...)
}
