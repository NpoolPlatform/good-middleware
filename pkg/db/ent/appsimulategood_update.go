// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appsimulategood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppSimulateGoodUpdate is the builder for updating AppSimulateGood entities.
type AppSimulateGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSimulateGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSimulateGoodUpdate builder.
func (asgu *AppSimulateGoodUpdate) Where(ps ...predicate.AppSimulateGood) *AppSimulateGoodUpdate {
	asgu.mutation.Where(ps...)
	return asgu
}

// SetCreatedAt sets the "created_at" field.
func (asgu *AppSimulateGoodUpdate) SetCreatedAt(u uint32) *AppSimulateGoodUpdate {
	asgu.mutation.ResetCreatedAt()
	asgu.mutation.SetCreatedAt(u)
	return asgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableCreatedAt(u *uint32) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetCreatedAt(*u)
	}
	return asgu
}

// AddCreatedAt adds u to the "created_at" field.
func (asgu *AppSimulateGoodUpdate) AddCreatedAt(u int32) *AppSimulateGoodUpdate {
	asgu.mutation.AddCreatedAt(u)
	return asgu
}

// SetUpdatedAt sets the "updated_at" field.
func (asgu *AppSimulateGoodUpdate) SetUpdatedAt(u uint32) *AppSimulateGoodUpdate {
	asgu.mutation.ResetUpdatedAt()
	asgu.mutation.SetUpdatedAt(u)
	return asgu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asgu *AppSimulateGoodUpdate) AddUpdatedAt(u int32) *AppSimulateGoodUpdate {
	asgu.mutation.AddUpdatedAt(u)
	return asgu
}

// SetDeletedAt sets the "deleted_at" field.
func (asgu *AppSimulateGoodUpdate) SetDeletedAt(u uint32) *AppSimulateGoodUpdate {
	asgu.mutation.ResetDeletedAt()
	asgu.mutation.SetDeletedAt(u)
	return asgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableDeletedAt(u *uint32) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetDeletedAt(*u)
	}
	return asgu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asgu *AppSimulateGoodUpdate) AddDeletedAt(u int32) *AppSimulateGoodUpdate {
	asgu.mutation.AddDeletedAt(u)
	return asgu
}

// SetEntID sets the "ent_id" field.
func (asgu *AppSimulateGoodUpdate) SetEntID(u uuid.UUID) *AppSimulateGoodUpdate {
	asgu.mutation.SetEntID(u)
	return asgu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableEntID(u *uuid.UUID) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetEntID(*u)
	}
	return asgu
}

// SetAppID sets the "app_id" field.
func (asgu *AppSimulateGoodUpdate) SetAppID(u uuid.UUID) *AppSimulateGoodUpdate {
	asgu.mutation.SetAppID(u)
	return asgu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableAppID(u *uuid.UUID) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetAppID(*u)
	}
	return asgu
}

// ClearAppID clears the value of the "app_id" field.
func (asgu *AppSimulateGoodUpdate) ClearAppID() *AppSimulateGoodUpdate {
	asgu.mutation.ClearAppID()
	return asgu
}

// SetGoodID sets the "good_id" field.
func (asgu *AppSimulateGoodUpdate) SetGoodID(u uuid.UUID) *AppSimulateGoodUpdate {
	asgu.mutation.SetGoodID(u)
	return asgu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableGoodID(u *uuid.UUID) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetGoodID(*u)
	}
	return asgu
}

// ClearGoodID clears the value of the "good_id" field.
func (asgu *AppSimulateGoodUpdate) ClearGoodID() *AppSimulateGoodUpdate {
	asgu.mutation.ClearGoodID()
	return asgu
}

// SetAppGoodID sets the "app_good_id" field.
func (asgu *AppSimulateGoodUpdate) SetAppGoodID(u uuid.UUID) *AppSimulateGoodUpdate {
	asgu.mutation.SetAppGoodID(u)
	return asgu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetAppGoodID(*u)
	}
	return asgu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asgu *AppSimulateGoodUpdate) ClearAppGoodID() *AppSimulateGoodUpdate {
	asgu.mutation.ClearAppGoodID()
	return asgu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (asgu *AppSimulateGoodUpdate) SetCoinTypeID(u uuid.UUID) *AppSimulateGoodUpdate {
	asgu.mutation.SetCoinTypeID(u)
	return asgu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (asgu *AppSimulateGoodUpdate) SetNillableCoinTypeID(u *uuid.UUID) *AppSimulateGoodUpdate {
	if u != nil {
		asgu.SetCoinTypeID(*u)
	}
	return asgu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (asgu *AppSimulateGoodUpdate) ClearCoinTypeID() *AppSimulateGoodUpdate {
	asgu.mutation.ClearCoinTypeID()
	return asgu
}

// Mutation returns the AppSimulateGoodMutation object of the builder.
func (asgu *AppSimulateGoodUpdate) Mutation() *AppSimulateGoodMutation {
	return asgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asgu *AppSimulateGoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := asgu.defaults(); err != nil {
		return 0, err
	}
	if len(asgu.hooks) == 0 {
		affected, err = asgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppSimulateGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asgu.mutation = mutation
			affected, err = asgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asgu.hooks) - 1; i >= 0; i-- {
			if asgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asgu *AppSimulateGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := asgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asgu *AppSimulateGoodUpdate) Exec(ctx context.Context) error {
	_, err := asgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asgu *AppSimulateGoodUpdate) ExecX(ctx context.Context) {
	if err := asgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asgu *AppSimulateGoodUpdate) defaults() error {
	if _, ok := asgu.mutation.UpdatedAt(); !ok {
		if appsimulategood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appsimulategood.UpdateDefaultUpdatedAt()
		asgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asgu *AppSimulateGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSimulateGoodUpdate {
	asgu.modifiers = append(asgu.modifiers, modifiers...)
	return asgu
}

func (asgu *AppSimulateGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appsimulategood.Table,
			Columns: appsimulategood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appsimulategood.FieldID,
			},
		},
	}
	if ps := asgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldCreatedAt,
		})
	}
	if value, ok := asgu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldCreatedAt,
		})
	}
	if value, ok := asgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldUpdatedAt,
		})
	}
	if value, ok := asgu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldUpdatedAt,
		})
	}
	if value, ok := asgu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldDeletedAt,
		})
	}
	if value, ok := asgu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldDeletedAt,
		})
	}
	if value, ok := asgu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldEntID,
		})
	}
	if value, ok := asgu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppID,
		})
	}
	if asgu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldAppID,
		})
	}
	if value, ok := asgu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldGoodID,
		})
	}
	if asgu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldGoodID,
		})
	}
	if value, ok := asgu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppGoodID,
		})
	}
	if asgu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldAppGoodID,
		})
	}
	if value, ok := asgu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldCoinTypeID,
		})
	}
	if asgu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldCoinTypeID,
		})
	}
	_spec.Modifiers = asgu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, asgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsimulategood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppSimulateGoodUpdateOne is the builder for updating a single AppSimulateGood entity.
type AppSimulateGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSimulateGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (asguo *AppSimulateGoodUpdateOne) SetCreatedAt(u uint32) *AppSimulateGoodUpdateOne {
	asguo.mutation.ResetCreatedAt()
	asguo.mutation.SetCreatedAt(u)
	return asguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableCreatedAt(u *uint32) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetCreatedAt(*u)
	}
	return asguo
}

// AddCreatedAt adds u to the "created_at" field.
func (asguo *AppSimulateGoodUpdateOne) AddCreatedAt(u int32) *AppSimulateGoodUpdateOne {
	asguo.mutation.AddCreatedAt(u)
	return asguo
}

// SetUpdatedAt sets the "updated_at" field.
func (asguo *AppSimulateGoodUpdateOne) SetUpdatedAt(u uint32) *AppSimulateGoodUpdateOne {
	asguo.mutation.ResetUpdatedAt()
	asguo.mutation.SetUpdatedAt(u)
	return asguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (asguo *AppSimulateGoodUpdateOne) AddUpdatedAt(u int32) *AppSimulateGoodUpdateOne {
	asguo.mutation.AddUpdatedAt(u)
	return asguo
}

// SetDeletedAt sets the "deleted_at" field.
func (asguo *AppSimulateGoodUpdateOne) SetDeletedAt(u uint32) *AppSimulateGoodUpdateOne {
	asguo.mutation.ResetDeletedAt()
	asguo.mutation.SetDeletedAt(u)
	return asguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableDeletedAt(u *uint32) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetDeletedAt(*u)
	}
	return asguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (asguo *AppSimulateGoodUpdateOne) AddDeletedAt(u int32) *AppSimulateGoodUpdateOne {
	asguo.mutation.AddDeletedAt(u)
	return asguo
}

// SetEntID sets the "ent_id" field.
func (asguo *AppSimulateGoodUpdateOne) SetEntID(u uuid.UUID) *AppSimulateGoodUpdateOne {
	asguo.mutation.SetEntID(u)
	return asguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetEntID(*u)
	}
	return asguo
}

// SetAppID sets the "app_id" field.
func (asguo *AppSimulateGoodUpdateOne) SetAppID(u uuid.UUID) *AppSimulateGoodUpdateOne {
	asguo.mutation.SetAppID(u)
	return asguo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableAppID(u *uuid.UUID) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetAppID(*u)
	}
	return asguo
}

// ClearAppID clears the value of the "app_id" field.
func (asguo *AppSimulateGoodUpdateOne) ClearAppID() *AppSimulateGoodUpdateOne {
	asguo.mutation.ClearAppID()
	return asguo
}

// SetGoodID sets the "good_id" field.
func (asguo *AppSimulateGoodUpdateOne) SetGoodID(u uuid.UUID) *AppSimulateGoodUpdateOne {
	asguo.mutation.SetGoodID(u)
	return asguo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableGoodID(u *uuid.UUID) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetGoodID(*u)
	}
	return asguo
}

// ClearGoodID clears the value of the "good_id" field.
func (asguo *AppSimulateGoodUpdateOne) ClearGoodID() *AppSimulateGoodUpdateOne {
	asguo.mutation.ClearGoodID()
	return asguo
}

// SetAppGoodID sets the "app_good_id" field.
func (asguo *AppSimulateGoodUpdateOne) SetAppGoodID(u uuid.UUID) *AppSimulateGoodUpdateOne {
	asguo.mutation.SetAppGoodID(u)
	return asguo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetAppGoodID(*u)
	}
	return asguo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (asguo *AppSimulateGoodUpdateOne) ClearAppGoodID() *AppSimulateGoodUpdateOne {
	asguo.mutation.ClearAppGoodID()
	return asguo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (asguo *AppSimulateGoodUpdateOne) SetCoinTypeID(u uuid.UUID) *AppSimulateGoodUpdateOne {
	asguo.mutation.SetCoinTypeID(u)
	return asguo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (asguo *AppSimulateGoodUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *AppSimulateGoodUpdateOne {
	if u != nil {
		asguo.SetCoinTypeID(*u)
	}
	return asguo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (asguo *AppSimulateGoodUpdateOne) ClearCoinTypeID() *AppSimulateGoodUpdateOne {
	asguo.mutation.ClearCoinTypeID()
	return asguo
}

// Mutation returns the AppSimulateGoodMutation object of the builder.
func (asguo *AppSimulateGoodUpdateOne) Mutation() *AppSimulateGoodMutation {
	return asguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asguo *AppSimulateGoodUpdateOne) Select(field string, fields ...string) *AppSimulateGoodUpdateOne {
	asguo.fields = append([]string{field}, fields...)
	return asguo
}

// Save executes the query and returns the updated AppSimulateGood entity.
func (asguo *AppSimulateGoodUpdateOne) Save(ctx context.Context) (*AppSimulateGood, error) {
	var (
		err  error
		node *AppSimulateGood
	)
	if err := asguo.defaults(); err != nil {
		return nil, err
	}
	if len(asguo.hooks) == 0 {
		node, err = asguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppSimulateGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asguo.mutation = mutation
			node, err = asguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asguo.hooks) - 1; i >= 0; i-- {
			if asguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppSimulateGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppSimulateGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asguo *AppSimulateGoodUpdateOne) SaveX(ctx context.Context) *AppSimulateGood {
	node, err := asguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asguo *AppSimulateGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := asguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asguo *AppSimulateGoodUpdateOne) ExecX(ctx context.Context) {
	if err := asguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asguo *AppSimulateGoodUpdateOne) defaults() error {
	if _, ok := asguo.mutation.UpdatedAt(); !ok {
		if appsimulategood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsimulategood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appsimulategood.UpdateDefaultUpdatedAt()
		asguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asguo *AppSimulateGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSimulateGoodUpdateOne {
	asguo.modifiers = append(asguo.modifiers, modifiers...)
	return asguo
}

func (asguo *AppSimulateGoodUpdateOne) sqlSave(ctx context.Context) (_node *AppSimulateGood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appsimulategood.Table,
			Columns: appsimulategood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appsimulategood.FieldID,
			},
		},
	}
	id, ok := asguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppSimulateGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsimulategood.FieldID)
		for _, f := range fields {
			if !appsimulategood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appsimulategood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldCreatedAt,
		})
	}
	if value, ok := asguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldCreatedAt,
		})
	}
	if value, ok := asguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldUpdatedAt,
		})
	}
	if value, ok := asguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldUpdatedAt,
		})
	}
	if value, ok := asguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldDeletedAt,
		})
	}
	if value, ok := asguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsimulategood.FieldDeletedAt,
		})
	}
	if value, ok := asguo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldEntID,
		})
	}
	if value, ok := asguo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppID,
		})
	}
	if asguo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldAppID,
		})
	}
	if value, ok := asguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldGoodID,
		})
	}
	if asguo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldGoodID,
		})
	}
	if value, ok := asguo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldAppGoodID,
		})
	}
	if asguo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldAppGoodID,
		})
	}
	if value, ok := asguo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsimulategood.FieldCoinTypeID,
		})
	}
	if asguo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appsimulategood.FieldCoinTypeID,
		})
	}
	_spec.Modifiers = asguo.modifiers
	_node = &AppSimulateGood{config: asguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsimulategood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
