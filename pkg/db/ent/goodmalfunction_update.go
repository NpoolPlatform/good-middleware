// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodmalfunction"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodMalfunctionUpdate is the builder for updating GoodMalfunction entities.
type GoodMalfunctionUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodMalfunctionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodMalfunctionUpdate builder.
func (gmu *GoodMalfunctionUpdate) Where(ps ...predicate.GoodMalfunction) *GoodMalfunctionUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetCreatedAt sets the "created_at" field.
func (gmu *GoodMalfunctionUpdate) SetCreatedAt(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetCreatedAt()
	gmu.mutation.SetCreatedAt(u)
	return gmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableCreatedAt(u *uint32) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetCreatedAt(*u)
	}
	return gmu
}

// AddCreatedAt adds u to the "created_at" field.
func (gmu *GoodMalfunctionUpdate) AddCreatedAt(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddCreatedAt(u)
	return gmu
}

// SetUpdatedAt sets the "updated_at" field.
func (gmu *GoodMalfunctionUpdate) SetUpdatedAt(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetUpdatedAt()
	gmu.mutation.SetUpdatedAt(u)
	return gmu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gmu *GoodMalfunctionUpdate) AddUpdatedAt(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddUpdatedAt(u)
	return gmu
}

// SetDeletedAt sets the "deleted_at" field.
func (gmu *GoodMalfunctionUpdate) SetDeletedAt(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetDeletedAt()
	gmu.mutation.SetDeletedAt(u)
	return gmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableDeletedAt(u *uint32) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetDeletedAt(*u)
	}
	return gmu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gmu *GoodMalfunctionUpdate) AddDeletedAt(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddDeletedAt(u)
	return gmu
}

// SetEntID sets the "ent_id" field.
func (gmu *GoodMalfunctionUpdate) SetEntID(u uuid.UUID) *GoodMalfunctionUpdate {
	gmu.mutation.SetEntID(u)
	return gmu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableEntID(u *uuid.UUID) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetEntID(*u)
	}
	return gmu
}

// SetGoodID sets the "good_id" field.
func (gmu *GoodMalfunctionUpdate) SetGoodID(u uuid.UUID) *GoodMalfunctionUpdate {
	gmu.mutation.SetGoodID(u)
	return gmu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableGoodID(u *uuid.UUID) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetGoodID(*u)
	}
	return gmu
}

// ClearGoodID clears the value of the "good_id" field.
func (gmu *GoodMalfunctionUpdate) ClearGoodID() *GoodMalfunctionUpdate {
	gmu.mutation.ClearGoodID()
	return gmu
}

// SetTitle sets the "title" field.
func (gmu *GoodMalfunctionUpdate) SetTitle(s string) *GoodMalfunctionUpdate {
	gmu.mutation.SetTitle(s)
	return gmu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableTitle(s *string) *GoodMalfunctionUpdate {
	if s != nil {
		gmu.SetTitle(*s)
	}
	return gmu
}

// ClearTitle clears the value of the "title" field.
func (gmu *GoodMalfunctionUpdate) ClearTitle() *GoodMalfunctionUpdate {
	gmu.mutation.ClearTitle()
	return gmu
}

// SetMessage sets the "message" field.
func (gmu *GoodMalfunctionUpdate) SetMessage(s string) *GoodMalfunctionUpdate {
	gmu.mutation.SetMessage(s)
	return gmu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableMessage(s *string) *GoodMalfunctionUpdate {
	if s != nil {
		gmu.SetMessage(*s)
	}
	return gmu
}

// ClearMessage clears the value of the "message" field.
func (gmu *GoodMalfunctionUpdate) ClearMessage() *GoodMalfunctionUpdate {
	gmu.mutation.ClearMessage()
	return gmu
}

// SetStartAt sets the "start_at" field.
func (gmu *GoodMalfunctionUpdate) SetStartAt(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetStartAt()
	gmu.mutation.SetStartAt(u)
	return gmu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableStartAt(u *uint32) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetStartAt(*u)
	}
	return gmu
}

// AddStartAt adds u to the "start_at" field.
func (gmu *GoodMalfunctionUpdate) AddStartAt(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddStartAt(u)
	return gmu
}

// ClearStartAt clears the value of the "start_at" field.
func (gmu *GoodMalfunctionUpdate) ClearStartAt() *GoodMalfunctionUpdate {
	gmu.mutation.ClearStartAt()
	return gmu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (gmu *GoodMalfunctionUpdate) SetDurationSeconds(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetDurationSeconds()
	gmu.mutation.SetDurationSeconds(u)
	return gmu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableDurationSeconds(u *uint32) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetDurationSeconds(*u)
	}
	return gmu
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (gmu *GoodMalfunctionUpdate) AddDurationSeconds(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddDurationSeconds(u)
	return gmu
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (gmu *GoodMalfunctionUpdate) ClearDurationSeconds() *GoodMalfunctionUpdate {
	gmu.mutation.ClearDurationSeconds()
	return gmu
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (gmu *GoodMalfunctionUpdate) SetCompensateSeconds(u uint32) *GoodMalfunctionUpdate {
	gmu.mutation.ResetCompensateSeconds()
	gmu.mutation.SetCompensateSeconds(u)
	return gmu
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (gmu *GoodMalfunctionUpdate) SetNillableCompensateSeconds(u *uint32) *GoodMalfunctionUpdate {
	if u != nil {
		gmu.SetCompensateSeconds(*u)
	}
	return gmu
}

// AddCompensateSeconds adds u to the "compensate_seconds" field.
func (gmu *GoodMalfunctionUpdate) AddCompensateSeconds(u int32) *GoodMalfunctionUpdate {
	gmu.mutation.AddCompensateSeconds(u)
	return gmu
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (gmu *GoodMalfunctionUpdate) ClearCompensateSeconds() *GoodMalfunctionUpdate {
	gmu.mutation.ClearCompensateSeconds()
	return gmu
}

// Mutation returns the GoodMalfunctionMutation object of the builder.
func (gmu *GoodMalfunctionUpdate) Mutation() *GoodMalfunctionMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GoodMalfunctionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gmu.defaults(); err != nil {
		return 0, err
	}
	if len(gmu.hooks) == 0 {
		affected, err = gmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMalfunctionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmu.mutation = mutation
			affected, err = gmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gmu.hooks) - 1; i >= 0; i-- {
			if gmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GoodMalfunctionUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GoodMalfunctionUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GoodMalfunctionUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmu *GoodMalfunctionUpdate) defaults() error {
	if _, ok := gmu.mutation.UpdatedAt(); !ok {
		if goodmalfunction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.UpdateDefaultUpdatedAt()
		gmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmu *GoodMalfunctionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodMalfunctionUpdate {
	gmu.modifiers = append(gmu.modifiers, modifiers...)
	return gmu
}

func (gmu *GoodMalfunctionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodmalfunction.Table,
			Columns: goodmalfunction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodmalfunction.FieldID,
			},
		},
	}
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCreatedAt,
		})
	}
	if value, ok := gmu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCreatedAt,
		})
	}
	if value, ok := gmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldUpdatedAt,
		})
	}
	if value, ok := gmu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldUpdatedAt,
		})
	}
	if value, ok := gmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDeletedAt,
		})
	}
	if value, ok := gmu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDeletedAt,
		})
	}
	if value, ok := gmu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldEntID,
		})
	}
	if value, ok := gmu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldGoodID,
		})
	}
	if gmu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodmalfunction.FieldGoodID,
		})
	}
	if value, ok := gmu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldTitle,
		})
	}
	if gmu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodmalfunction.FieldTitle,
		})
	}
	if value, ok := gmu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldMessage,
		})
	}
	if gmu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodmalfunction.FieldMessage,
		})
	}
	if value, ok := gmu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if value, ok := gmu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if gmu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if value, ok := gmu.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if value, ok := gmu.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if gmu.mutation.DurationSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if value, ok := gmu.mutation.CompensateSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	if value, ok := gmu.mutation.AddedCompensateSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	if gmu.mutation.CompensateSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	_spec.Modifiers = gmu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodmalfunction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodMalfunctionUpdateOne is the builder for updating a single GoodMalfunction entity.
type GoodMalfunctionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodMalfunctionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (gmuo *GoodMalfunctionUpdateOne) SetCreatedAt(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetCreatedAt()
	gmuo.mutation.SetCreatedAt(u)
	return gmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableCreatedAt(u *uint32) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetCreatedAt(*u)
	}
	return gmuo
}

// AddCreatedAt adds u to the "created_at" field.
func (gmuo *GoodMalfunctionUpdateOne) AddCreatedAt(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddCreatedAt(u)
	return gmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gmuo *GoodMalfunctionUpdateOne) SetUpdatedAt(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetUpdatedAt()
	gmuo.mutation.SetUpdatedAt(u)
	return gmuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gmuo *GoodMalfunctionUpdateOne) AddUpdatedAt(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddUpdatedAt(u)
	return gmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gmuo *GoodMalfunctionUpdateOne) SetDeletedAt(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetDeletedAt()
	gmuo.mutation.SetDeletedAt(u)
	return gmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableDeletedAt(u *uint32) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetDeletedAt(*u)
	}
	return gmuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gmuo *GoodMalfunctionUpdateOne) AddDeletedAt(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddDeletedAt(u)
	return gmuo
}

// SetEntID sets the "ent_id" field.
func (gmuo *GoodMalfunctionUpdateOne) SetEntID(u uuid.UUID) *GoodMalfunctionUpdateOne {
	gmuo.mutation.SetEntID(u)
	return gmuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetEntID(*u)
	}
	return gmuo
}

// SetGoodID sets the "good_id" field.
func (gmuo *GoodMalfunctionUpdateOne) SetGoodID(u uuid.UUID) *GoodMalfunctionUpdateOne {
	gmuo.mutation.SetGoodID(u)
	return gmuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetGoodID(*u)
	}
	return gmuo
}

// ClearGoodID clears the value of the "good_id" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearGoodID() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearGoodID()
	return gmuo
}

// SetTitle sets the "title" field.
func (gmuo *GoodMalfunctionUpdateOne) SetTitle(s string) *GoodMalfunctionUpdateOne {
	gmuo.mutation.SetTitle(s)
	return gmuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableTitle(s *string) *GoodMalfunctionUpdateOne {
	if s != nil {
		gmuo.SetTitle(*s)
	}
	return gmuo
}

// ClearTitle clears the value of the "title" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearTitle() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearTitle()
	return gmuo
}

// SetMessage sets the "message" field.
func (gmuo *GoodMalfunctionUpdateOne) SetMessage(s string) *GoodMalfunctionUpdateOne {
	gmuo.mutation.SetMessage(s)
	return gmuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableMessage(s *string) *GoodMalfunctionUpdateOne {
	if s != nil {
		gmuo.SetMessage(*s)
	}
	return gmuo
}

// ClearMessage clears the value of the "message" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearMessage() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearMessage()
	return gmuo
}

// SetStartAt sets the "start_at" field.
func (gmuo *GoodMalfunctionUpdateOne) SetStartAt(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetStartAt()
	gmuo.mutation.SetStartAt(u)
	return gmuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableStartAt(u *uint32) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetStartAt(*u)
	}
	return gmuo
}

// AddStartAt adds u to the "start_at" field.
func (gmuo *GoodMalfunctionUpdateOne) AddStartAt(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddStartAt(u)
	return gmuo
}

// ClearStartAt clears the value of the "start_at" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearStartAt() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearStartAt()
	return gmuo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) SetDurationSeconds(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetDurationSeconds()
	gmuo.mutation.SetDurationSeconds(u)
	return gmuo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableDurationSeconds(u *uint32) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetDurationSeconds(*u)
	}
	return gmuo
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) AddDurationSeconds(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddDurationSeconds(u)
	return gmuo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearDurationSeconds() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearDurationSeconds()
	return gmuo
}

// SetCompensateSeconds sets the "compensate_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) SetCompensateSeconds(u uint32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.ResetCompensateSeconds()
	gmuo.mutation.SetCompensateSeconds(u)
	return gmuo
}

// SetNillableCompensateSeconds sets the "compensate_seconds" field if the given value is not nil.
func (gmuo *GoodMalfunctionUpdateOne) SetNillableCompensateSeconds(u *uint32) *GoodMalfunctionUpdateOne {
	if u != nil {
		gmuo.SetCompensateSeconds(*u)
	}
	return gmuo
}

// AddCompensateSeconds adds u to the "compensate_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) AddCompensateSeconds(u int32) *GoodMalfunctionUpdateOne {
	gmuo.mutation.AddCompensateSeconds(u)
	return gmuo
}

// ClearCompensateSeconds clears the value of the "compensate_seconds" field.
func (gmuo *GoodMalfunctionUpdateOne) ClearCompensateSeconds() *GoodMalfunctionUpdateOne {
	gmuo.mutation.ClearCompensateSeconds()
	return gmuo
}

// Mutation returns the GoodMalfunctionMutation object of the builder.
func (gmuo *GoodMalfunctionUpdateOne) Mutation() *GoodMalfunctionMutation {
	return gmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GoodMalfunctionUpdateOne) Select(field string, fields ...string) *GoodMalfunctionUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GoodMalfunction entity.
func (gmuo *GoodMalfunctionUpdateOne) Save(ctx context.Context) (*GoodMalfunction, error) {
	var (
		err  error
		node *GoodMalfunction
	)
	if err := gmuo.defaults(); err != nil {
		return nil, err
	}
	if len(gmuo.hooks) == 0 {
		node, err = gmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMalfunctionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmuo.mutation = mutation
			node, err = gmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gmuo.hooks) - 1; i >= 0; i-- {
			if gmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodMalfunction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodMalfunctionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GoodMalfunctionUpdateOne) SaveX(ctx context.Context) *GoodMalfunction {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GoodMalfunctionUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GoodMalfunctionUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmuo *GoodMalfunctionUpdateOne) defaults() error {
	if _, ok := gmuo.mutation.UpdatedAt(); !ok {
		if goodmalfunction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodmalfunction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodmalfunction.UpdateDefaultUpdatedAt()
		gmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmuo *GoodMalfunctionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodMalfunctionUpdateOne {
	gmuo.modifiers = append(gmuo.modifiers, modifiers...)
	return gmuo
}

func (gmuo *GoodMalfunctionUpdateOne) sqlSave(ctx context.Context) (_node *GoodMalfunction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodmalfunction.Table,
			Columns: goodmalfunction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: goodmalfunction.FieldID,
			},
		},
	}
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodMalfunction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodmalfunction.FieldID)
		for _, f := range fields {
			if !goodmalfunction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodmalfunction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCreatedAt,
		})
	}
	if value, ok := gmuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCreatedAt,
		})
	}
	if value, ok := gmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldUpdatedAt,
		})
	}
	if value, ok := gmuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldUpdatedAt,
		})
	}
	if value, ok := gmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDeletedAt,
		})
	}
	if value, ok := gmuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDeletedAt,
		})
	}
	if value, ok := gmuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldEntID,
		})
	}
	if value, ok := gmuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodmalfunction.FieldGoodID,
		})
	}
	if gmuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodmalfunction.FieldGoodID,
		})
	}
	if value, ok := gmuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldTitle,
		})
	}
	if gmuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodmalfunction.FieldTitle,
		})
	}
	if value, ok := gmuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodmalfunction.FieldMessage,
		})
	}
	if gmuo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodmalfunction.FieldMessage,
		})
	}
	if value, ok := gmuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if value, ok := gmuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if gmuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldStartAt,
		})
	}
	if value, ok := gmuo.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if value, ok := gmuo.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if gmuo.mutation.DurationSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldDurationSeconds,
		})
	}
	if value, ok := gmuo.mutation.CompensateSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	if value, ok := gmuo.mutation.AddedCompensateSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	if gmuo.mutation.CompensateSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodmalfunction.FieldCompensateSeconds,
		})
	}
	_spec.Modifiers = gmuo.modifiers
	_node = &GoodMalfunction{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodmalfunction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
