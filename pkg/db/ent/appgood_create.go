// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGoodCreate is the builder for creating a AppGood entity.
type AppGoodCreate struct {
	config
	mutation *AppGoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (agc *AppGoodCreate) SetCreatedAt(u uint32) *AppGoodCreate {
	agc.mutation.SetCreatedAt(u)
	return agc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCreatedAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetCreatedAt(*u)
	}
	return agc
}

// SetUpdatedAt sets the "updated_at" field.
func (agc *AppGoodCreate) SetUpdatedAt(u uint32) *AppGoodCreate {
	agc.mutation.SetUpdatedAt(u)
	return agc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableUpdatedAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetUpdatedAt(*u)
	}
	return agc
}

// SetDeletedAt sets the "deleted_at" field.
func (agc *AppGoodCreate) SetDeletedAt(u uint32) *AppGoodCreate {
	agc.mutation.SetDeletedAt(u)
	return agc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableDeletedAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetDeletedAt(*u)
	}
	return agc
}

// SetAppID sets the "app_id" field.
func (agc *AppGoodCreate) SetAppID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetAppID(u)
	return agc
}

// SetGoodID sets the "good_id" field.
func (agc *AppGoodCreate) SetGoodID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetGoodID(u)
	return agc
}

// SetOnline sets the "online" field.
func (agc *AppGoodCreate) SetOnline(b bool) *AppGoodCreate {
	agc.mutation.SetOnline(b)
	return agc
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableOnline(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetOnline(*b)
	}
	return agc
}

// SetVisible sets the "visible" field.
func (agc *AppGoodCreate) SetVisible(b bool) *AppGoodCreate {
	agc.mutation.SetVisible(b)
	return agc
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableVisible(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetVisible(*b)
	}
	return agc
}

// SetGoodName sets the "good_name" field.
func (agc *AppGoodCreate) SetGoodName(s string) *AppGoodCreate {
	agc.mutation.SetGoodName(s)
	return agc
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableGoodName(s *string) *AppGoodCreate {
	if s != nil {
		agc.SetGoodName(*s)
	}
	return agc
}

// SetPrice sets the "price" field.
func (agc *AppGoodCreate) SetPrice(d decimal.Decimal) *AppGoodCreate {
	agc.mutation.SetPrice(d)
	return agc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillablePrice(d *decimal.Decimal) *AppGoodCreate {
	if d != nil {
		agc.SetPrice(*d)
	}
	return agc
}

// SetDisplayIndex sets the "display_index" field.
func (agc *AppGoodCreate) SetDisplayIndex(i int32) *AppGoodCreate {
	agc.mutation.SetDisplayIndex(i)
	return agc
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableDisplayIndex(i *int32) *AppGoodCreate {
	if i != nil {
		agc.SetDisplayIndex(*i)
	}
	return agc
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (agc *AppGoodCreate) SetPurchaseLimit(i int32) *AppGoodCreate {
	agc.mutation.SetPurchaseLimit(i)
	return agc
}

// SetNillablePurchaseLimit sets the "purchase_limit" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillablePurchaseLimit(i *int32) *AppGoodCreate {
	if i != nil {
		agc.SetPurchaseLimit(*i)
	}
	return agc
}

// SetCommissionPercent sets the "commission_percent" field.
func (agc *AppGoodCreate) SetCommissionPercent(i int32) *AppGoodCreate {
	agc.mutation.SetCommissionPercent(i)
	return agc
}

// SetNillableCommissionPercent sets the "commission_percent" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCommissionPercent(i *int32) *AppGoodCreate {
	if i != nil {
		agc.SetCommissionPercent(*i)
	}
	return agc
}

// SetSaleStartAt sets the "sale_start_at" field.
func (agc *AppGoodCreate) SetSaleStartAt(u uint32) *AppGoodCreate {
	agc.mutation.SetSaleStartAt(u)
	return agc
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableSaleStartAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetSaleStartAt(*u)
	}
	return agc
}

// SetSaleEndAt sets the "sale_end_at" field.
func (agc *AppGoodCreate) SetSaleEndAt(u uint32) *AppGoodCreate {
	agc.mutation.SetSaleEndAt(u)
	return agc
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableSaleEndAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetSaleEndAt(*u)
	}
	return agc
}

// SetServiceStartAt sets the "service_start_at" field.
func (agc *AppGoodCreate) SetServiceStartAt(u uint32) *AppGoodCreate {
	agc.mutation.SetServiceStartAt(u)
	return agc
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableServiceStartAt(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetServiceStartAt(*u)
	}
	return agc
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (agc *AppGoodCreate) SetTechnicalFeeRatio(u uint32) *AppGoodCreate {
	agc.mutation.SetTechnicalFeeRatio(u)
	return agc
}

// SetNillableTechnicalFeeRatio sets the "technical_fee_ratio" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableTechnicalFeeRatio(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetTechnicalFeeRatio(*u)
	}
	return agc
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (agc *AppGoodCreate) SetElectricityFeeRatio(u uint32) *AppGoodCreate {
	agc.mutation.SetElectricityFeeRatio(u)
	return agc
}

// SetNillableElectricityFeeRatio sets the "electricity_fee_ratio" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableElectricityFeeRatio(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetElectricityFeeRatio(*u)
	}
	return agc
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (agc *AppGoodCreate) SetDailyRewardAmount(d decimal.Decimal) *AppGoodCreate {
	agc.mutation.SetDailyRewardAmount(d)
	return agc
}

// SetNillableDailyRewardAmount sets the "daily_reward_amount" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableDailyRewardAmount(d *decimal.Decimal) *AppGoodCreate {
	if d != nil {
		agc.SetDailyRewardAmount(*d)
	}
	return agc
}

// SetCommissionSettleType sets the "commission_settle_type" field.
func (agc *AppGoodCreate) SetCommissionSettleType(s string) *AppGoodCreate {
	agc.mutation.SetCommissionSettleType(s)
	return agc
}

// SetNillableCommissionSettleType sets the "commission_settle_type" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCommissionSettleType(s *string) *AppGoodCreate {
	if s != nil {
		agc.SetCommissionSettleType(*s)
	}
	return agc
}

// SetDescriptions sets the "descriptions" field.
func (agc *AppGoodCreate) SetDescriptions(s []string) *AppGoodCreate {
	agc.mutation.SetDescriptions(s)
	return agc
}

// SetGoodBanner sets the "good_banner" field.
func (agc *AppGoodCreate) SetGoodBanner(s string) *AppGoodCreate {
	agc.mutation.SetGoodBanner(s)
	return agc
}

// SetNillableGoodBanner sets the "good_banner" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableGoodBanner(s *string) *AppGoodCreate {
	if s != nil {
		agc.SetGoodBanner(*s)
	}
	return agc
}

// SetDisplayNames sets the "display_names" field.
func (agc *AppGoodCreate) SetDisplayNames(s []string) *AppGoodCreate {
	agc.mutation.SetDisplayNames(s)
	return agc
}

// SetEnablePurchase sets the "enable_purchase" field.
func (agc *AppGoodCreate) SetEnablePurchase(b bool) *AppGoodCreate {
	agc.mutation.SetEnablePurchase(b)
	return agc
}

// SetNillableEnablePurchase sets the "enable_purchase" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableEnablePurchase(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetEnablePurchase(*b)
	}
	return agc
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agc *AppGoodCreate) SetEnableProductPage(b bool) *AppGoodCreate {
	agc.mutation.SetEnableProductPage(b)
	return agc
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableEnableProductPage(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetEnableProductPage(*b)
	}
	return agc
}

// SetCancelMode sets the "cancel_mode" field.
func (agc *AppGoodCreate) SetCancelMode(s string) *AppGoodCreate {
	agc.mutation.SetCancelMode(s)
	return agc
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCancelMode(s *string) *AppGoodCreate {
	if s != nil {
		agc.SetCancelMode(*s)
	}
	return agc
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (agc *AppGoodCreate) SetUserPurchaseLimit(d decimal.Decimal) *AppGoodCreate {
	agc.mutation.SetUserPurchaseLimit(d)
	return agc
}

// SetNillableUserPurchaseLimit sets the "user_purchase_limit" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableUserPurchaseLimit(d *decimal.Decimal) *AppGoodCreate {
	if d != nil {
		agc.SetUserPurchaseLimit(*d)
	}
	return agc
}

// SetDisplayColors sets the "display_colors" field.
func (agc *AppGoodCreate) SetDisplayColors(s []string) *AppGoodCreate {
	agc.mutation.SetDisplayColors(s)
	return agc
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (agc *AppGoodCreate) SetCancellableBeforeStart(u uint32) *AppGoodCreate {
	agc.mutation.SetCancellableBeforeStart(u)
	return agc
}

// SetNillableCancellableBeforeStart sets the "cancellable_before_start" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCancellableBeforeStart(u *uint32) *AppGoodCreate {
	if u != nil {
		agc.SetCancellableBeforeStart(*u)
	}
	return agc
}

// SetProductPage sets the "product_page" field.
func (agc *AppGoodCreate) SetProductPage(s string) *AppGoodCreate {
	agc.mutation.SetProductPage(s)
	return agc
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableProductPage(s *string) *AppGoodCreate {
	if s != nil {
		agc.SetProductPage(*s)
	}
	return agc
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (agc *AppGoodCreate) SetEnableSetCommission(b bool) *AppGoodCreate {
	agc.mutation.SetEnableSetCommission(b)
	return agc
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableEnableSetCommission(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetEnableSetCommission(*b)
	}
	return agc
}

// SetID sets the "id" field.
func (agc *AppGoodCreate) SetID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetID(u)
	return agc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableID(u *uuid.UUID) *AppGoodCreate {
	if u != nil {
		agc.SetID(*u)
	}
	return agc
}

// Mutation returns the AppGoodMutation object of the builder.
func (agc *AppGoodCreate) Mutation() *AppGoodMutation {
	return agc.mutation
}

// Save creates the AppGood in the database.
func (agc *AppGoodCreate) Save(ctx context.Context) (*AppGood, error) {
	var (
		err  error
		node *AppGood
	)
	if err := agc.defaults(); err != nil {
		return nil, err
	}
	if len(agc.hooks) == 0 {
		if err = agc.check(); err != nil {
			return nil, err
		}
		node, err = agc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agc.check(); err != nil {
				return nil, err
			}
			agc.mutation = mutation
			if node, err = agc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agc.hooks) - 1; i >= 0; i-- {
			if agc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, agc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AppGoodCreate) SaveX(ctx context.Context) *AppGood {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *AppGoodCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *AppGoodCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *AppGoodCreate) defaults() error {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		if appgood.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgood.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appgood.DefaultCreatedAt()
		agc.mutation.SetCreatedAt(v)
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		if appgood.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgood.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgood.DefaultUpdatedAt()
		agc.mutation.SetUpdatedAt(v)
	}
	if _, ok := agc.mutation.DeletedAt(); !ok {
		if appgood.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized appgood.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := appgood.DefaultDeletedAt()
		agc.mutation.SetDeletedAt(v)
	}
	if _, ok := agc.mutation.Online(); !ok {
		v := appgood.DefaultOnline
		agc.mutation.SetOnline(v)
	}
	if _, ok := agc.mutation.Visible(); !ok {
		v := appgood.DefaultVisible
		agc.mutation.SetVisible(v)
	}
	if _, ok := agc.mutation.GoodName(); !ok {
		v := appgood.DefaultGoodName
		agc.mutation.SetGoodName(v)
	}
	if _, ok := agc.mutation.Price(); !ok {
		v := appgood.DefaultPrice
		agc.mutation.SetPrice(v)
	}
	if _, ok := agc.mutation.DisplayIndex(); !ok {
		v := appgood.DefaultDisplayIndex
		agc.mutation.SetDisplayIndex(v)
	}
	if _, ok := agc.mutation.PurchaseLimit(); !ok {
		v := appgood.DefaultPurchaseLimit
		agc.mutation.SetPurchaseLimit(v)
	}
	if _, ok := agc.mutation.CommissionPercent(); !ok {
		v := appgood.DefaultCommissionPercent
		agc.mutation.SetCommissionPercent(v)
	}
	if _, ok := agc.mutation.SaleStartAt(); !ok {
		v := appgood.DefaultSaleStartAt
		agc.mutation.SetSaleStartAt(v)
	}
	if _, ok := agc.mutation.SaleEndAt(); !ok {
		v := appgood.DefaultSaleEndAt
		agc.mutation.SetSaleEndAt(v)
	}
	if _, ok := agc.mutation.ServiceStartAt(); !ok {
		v := appgood.DefaultServiceStartAt
		agc.mutation.SetServiceStartAt(v)
	}
	if _, ok := agc.mutation.TechnicalFeeRatio(); !ok {
		v := appgood.DefaultTechnicalFeeRatio
		agc.mutation.SetTechnicalFeeRatio(v)
	}
	if _, ok := agc.mutation.ElectricityFeeRatio(); !ok {
		v := appgood.DefaultElectricityFeeRatio
		agc.mutation.SetElectricityFeeRatio(v)
	}
	if _, ok := agc.mutation.DailyRewardAmount(); !ok {
		v := appgood.DefaultDailyRewardAmount
		agc.mutation.SetDailyRewardAmount(v)
	}
	if _, ok := agc.mutation.CommissionSettleType(); !ok {
		v := appgood.DefaultCommissionSettleType
		agc.mutation.SetCommissionSettleType(v)
	}
	if _, ok := agc.mutation.Descriptions(); !ok {
		v := appgood.DefaultDescriptions
		agc.mutation.SetDescriptions(v)
	}
	if _, ok := agc.mutation.GoodBanner(); !ok {
		v := appgood.DefaultGoodBanner
		agc.mutation.SetGoodBanner(v)
	}
	if _, ok := agc.mutation.DisplayNames(); !ok {
		v := appgood.DefaultDisplayNames
		agc.mutation.SetDisplayNames(v)
	}
	if _, ok := agc.mutation.EnablePurchase(); !ok {
		v := appgood.DefaultEnablePurchase
		agc.mutation.SetEnablePurchase(v)
	}
	if _, ok := agc.mutation.EnableProductPage(); !ok {
		v := appgood.DefaultEnableProductPage
		agc.mutation.SetEnableProductPage(v)
	}
	if _, ok := agc.mutation.CancelMode(); !ok {
		v := appgood.DefaultCancelMode
		agc.mutation.SetCancelMode(v)
	}
	if _, ok := agc.mutation.DisplayColors(); !ok {
		v := appgood.DefaultDisplayColors
		agc.mutation.SetDisplayColors(v)
	}
	if _, ok := agc.mutation.CancellableBeforeStart(); !ok {
		v := appgood.DefaultCancellableBeforeStart
		agc.mutation.SetCancellableBeforeStart(v)
	}
	if _, ok := agc.mutation.ProductPage(); !ok {
		v := appgood.DefaultProductPage
		agc.mutation.SetProductPage(v)
	}
	if _, ok := agc.mutation.EnableSetCommission(); !ok {
		v := appgood.DefaultEnableSetCommission
		agc.mutation.SetEnableSetCommission(v)
	}
	if _, ok := agc.mutation.ID(); !ok {
		if appgood.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized appgood.DefaultID (forgotten import ent/runtime?)")
		}
		v := appgood.DefaultID()
		agc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (agc *AppGoodCreate) check() error {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppGood.created_at"`)}
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppGood.updated_at"`)}
	}
	if _, ok := agc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppGood.deleted_at"`)}
	}
	if _, ok := agc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppGood.app_id"`)}
	}
	if _, ok := agc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "AppGood.good_id"`)}
	}
	return nil
}

func (agc *AppGoodCreate) sqlSave(ctx context.Context) (*AppGood, error) {
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (agc *AppGoodCreate) createSpec() (*AppGood, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGood{config: agc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appgood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgood.FieldID,
			},
		}
	)
	_spec.OnConflict = agc.conflict
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := agc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := agc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := agc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := agc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := agc.mutation.Online(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
		_node.Online = value
	}
	if value, ok := agc.mutation.Visible(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldVisible,
		})
		_node.Visible = value
	}
	if value, ok := agc.mutation.GoodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodName,
		})
		_node.GoodName = value
	}
	if value, ok := agc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := agc.mutation.DisplayIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldDisplayIndex,
		})
		_node.DisplayIndex = value
	}
	if value, ok := agc.mutation.PurchaseLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldPurchaseLimit,
		})
		_node.PurchaseLimit = value
	}
	if value, ok := agc.mutation.CommissionPercent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldCommissionPercent,
		})
		_node.CommissionPercent = value
	}
	if value, ok := agc.mutation.SaleStartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleStartAt,
		})
		_node.SaleStartAt = value
	}
	if value, ok := agc.mutation.SaleEndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleEndAt,
		})
		_node.SaleEndAt = value
	}
	if value, ok := agc.mutation.ServiceStartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldServiceStartAt,
		})
		_node.ServiceStartAt = value
	}
	if value, ok := agc.mutation.TechnicalFeeRatio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldTechnicalFeeRatio,
		})
		_node.TechnicalFeeRatio = value
	}
	if value, ok := agc.mutation.ElectricityFeeRatio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldElectricityFeeRatio,
		})
		_node.ElectricityFeeRatio = value
	}
	if value, ok := agc.mutation.DailyRewardAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldDailyRewardAmount,
		})
		_node.DailyRewardAmount = value
	}
	if value, ok := agc.mutation.CommissionSettleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldCommissionSettleType,
		})
		_node.CommissionSettleType = value
	}
	if value, ok := agc.mutation.Descriptions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDescriptions,
		})
		_node.Descriptions = value
	}
	if value, ok := agc.mutation.GoodBanner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodBanner,
		})
		_node.GoodBanner = value
	}
	if value, ok := agc.mutation.DisplayNames(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayNames,
		})
		_node.DisplayNames = value
	}
	if value, ok := agc.mutation.EnablePurchase(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnablePurchase,
		})
		_node.EnablePurchase = value
	}
	if value, ok := agc.mutation.EnableProductPage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableProductPage,
		})
		_node.EnableProductPage = value
	}
	if value, ok := agc.mutation.CancelMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldCancelMode,
		})
		_node.CancelMode = value
	}
	if value, ok := agc.mutation.UserPurchaseLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldUserPurchaseLimit,
		})
		_node.UserPurchaseLimit = value
	}
	if value, ok := agc.mutation.DisplayColors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayColors,
		})
		_node.DisplayColors = value
	}
	if value, ok := agc.mutation.CancellableBeforeStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCancellableBeforeStart,
		})
		_node.CancellableBeforeStart = value
	}
	if value, ok := agc.mutation.ProductPage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldProductPage,
		})
		_node.ProductPage = value
	}
	if value, ok := agc.mutation.EnableSetCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableSetCommission,
		})
		_node.EnableSetCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGood.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (agc *AppGoodCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodUpsertOne {
	agc.conflict = opts
	return &AppGoodUpsertOne{
		create: agc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agc *AppGoodCreate) OnConflictColumns(columns ...string) *AppGoodUpsertOne {
	agc.conflict = append(agc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodUpsertOne{
		create: agc,
	}
}

type (
	// AppGoodUpsertOne is the builder for "upsert"-ing
	//  one AppGood node.
	AppGoodUpsertOne struct {
		create *AppGoodCreate
	}

	// AppGoodUpsert is the "OnConflict" setter.
	AppGoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodUpsert) SetCreatedAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateCreatedAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodUpsert) AddCreatedAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodUpsert) SetUpdatedAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateUpdatedAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodUpsert) AddUpdatedAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodUpsert) SetDeletedAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDeletedAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodUpsert) AddDeletedAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodUpsert) SetAppID(v uuid.UUID) *AppGoodUpsert {
	u.Set(appgood.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateAppID() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodUpsert) SetGoodID(v uuid.UUID) *AppGoodUpsert {
	u.Set(appgood.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateGoodID() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldGoodID)
	return u
}

// SetOnline sets the "online" field.
func (u *AppGoodUpsert) SetOnline(v bool) *AppGoodUpsert {
	u.Set(appgood.FieldOnline, v)
	return u
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateOnline() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldOnline)
	return u
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodUpsert) ClearOnline() *AppGoodUpsert {
	u.SetNull(appgood.FieldOnline)
	return u
}

// SetVisible sets the "visible" field.
func (u *AppGoodUpsert) SetVisible(v bool) *AppGoodUpsert {
	u.Set(appgood.FieldVisible, v)
	return u
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateVisible() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldVisible)
	return u
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodUpsert) ClearVisible() *AppGoodUpsert {
	u.SetNull(appgood.FieldVisible)
	return u
}

// SetGoodName sets the "good_name" field.
func (u *AppGoodUpsert) SetGoodName(v string) *AppGoodUpsert {
	u.Set(appgood.FieldGoodName, v)
	return u
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateGoodName() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldGoodName)
	return u
}

// ClearGoodName clears the value of the "good_name" field.
func (u *AppGoodUpsert) ClearGoodName() *AppGoodUpsert {
	u.SetNull(appgood.FieldGoodName)
	return u
}

// SetPrice sets the "price" field.
func (u *AppGoodUpsert) SetPrice(v decimal.Decimal) *AppGoodUpsert {
	u.Set(appgood.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdatePrice() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *AppGoodUpsert) ClearPrice() *AppGoodUpsert {
	u.SetNull(appgood.FieldPrice)
	return u
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodUpsert) SetDisplayIndex(v int32) *AppGoodUpsert {
	u.Set(appgood.FieldDisplayIndex, v)
	return u
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDisplayIndex() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDisplayIndex)
	return u
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodUpsert) AddDisplayIndex(v int32) *AppGoodUpsert {
	u.Add(appgood.FieldDisplayIndex, v)
	return u
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodUpsert) ClearDisplayIndex() *AppGoodUpsert {
	u.SetNull(appgood.FieldDisplayIndex)
	return u
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (u *AppGoodUpsert) SetPurchaseLimit(v int32) *AppGoodUpsert {
	u.Set(appgood.FieldPurchaseLimit, v)
	return u
}

// UpdatePurchaseLimit sets the "purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdatePurchaseLimit() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldPurchaseLimit)
	return u
}

// AddPurchaseLimit adds v to the "purchase_limit" field.
func (u *AppGoodUpsert) AddPurchaseLimit(v int32) *AppGoodUpsert {
	u.Add(appgood.FieldPurchaseLimit, v)
	return u
}

// ClearPurchaseLimit clears the value of the "purchase_limit" field.
func (u *AppGoodUpsert) ClearPurchaseLimit() *AppGoodUpsert {
	u.SetNull(appgood.FieldPurchaseLimit)
	return u
}

// SetCommissionPercent sets the "commission_percent" field.
func (u *AppGoodUpsert) SetCommissionPercent(v int32) *AppGoodUpsert {
	u.Set(appgood.FieldCommissionPercent, v)
	return u
}

// UpdateCommissionPercent sets the "commission_percent" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateCommissionPercent() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldCommissionPercent)
	return u
}

// AddCommissionPercent adds v to the "commission_percent" field.
func (u *AppGoodUpsert) AddCommissionPercent(v int32) *AppGoodUpsert {
	u.Add(appgood.FieldCommissionPercent, v)
	return u
}

// ClearCommissionPercent clears the value of the "commission_percent" field.
func (u *AppGoodUpsert) ClearCommissionPercent() *AppGoodUpsert {
	u.SetNull(appgood.FieldCommissionPercent)
	return u
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppGoodUpsert) SetSaleStartAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldSaleStartAt, v)
	return u
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateSaleStartAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldSaleStartAt)
	return u
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppGoodUpsert) AddSaleStartAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldSaleStartAt, v)
	return u
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppGoodUpsert) ClearSaleStartAt() *AppGoodUpsert {
	u.SetNull(appgood.FieldSaleStartAt)
	return u
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppGoodUpsert) SetSaleEndAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldSaleEndAt, v)
	return u
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateSaleEndAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldSaleEndAt)
	return u
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppGoodUpsert) AddSaleEndAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldSaleEndAt, v)
	return u
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppGoodUpsert) ClearSaleEndAt() *AppGoodUpsert {
	u.SetNull(appgood.FieldSaleEndAt)
	return u
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppGoodUpsert) SetServiceStartAt(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldServiceStartAt, v)
	return u
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateServiceStartAt() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldServiceStartAt)
	return u
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppGoodUpsert) AddServiceStartAt(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldServiceStartAt, v)
	return u
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppGoodUpsert) ClearServiceStartAt() *AppGoodUpsert {
	u.SetNull(appgood.FieldServiceStartAt)
	return u
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (u *AppGoodUpsert) SetTechnicalFeeRatio(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldTechnicalFeeRatio, v)
	return u
}

// UpdateTechnicalFeeRatio sets the "technical_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateTechnicalFeeRatio() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldTechnicalFeeRatio)
	return u
}

// AddTechnicalFeeRatio adds v to the "technical_fee_ratio" field.
func (u *AppGoodUpsert) AddTechnicalFeeRatio(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldTechnicalFeeRatio, v)
	return u
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (u *AppGoodUpsert) ClearTechnicalFeeRatio() *AppGoodUpsert {
	u.SetNull(appgood.FieldTechnicalFeeRatio)
	return u
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (u *AppGoodUpsert) SetElectricityFeeRatio(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldElectricityFeeRatio, v)
	return u
}

// UpdateElectricityFeeRatio sets the "electricity_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateElectricityFeeRatio() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldElectricityFeeRatio)
	return u
}

// AddElectricityFeeRatio adds v to the "electricity_fee_ratio" field.
func (u *AppGoodUpsert) AddElectricityFeeRatio(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldElectricityFeeRatio, v)
	return u
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (u *AppGoodUpsert) ClearElectricityFeeRatio() *AppGoodUpsert {
	u.SetNull(appgood.FieldElectricityFeeRatio)
	return u
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppGoodUpsert) SetDailyRewardAmount(v decimal.Decimal) *AppGoodUpsert {
	u.Set(appgood.FieldDailyRewardAmount, v)
	return u
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDailyRewardAmount() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDailyRewardAmount)
	return u
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppGoodUpsert) ClearDailyRewardAmount() *AppGoodUpsert {
	u.SetNull(appgood.FieldDailyRewardAmount)
	return u
}

// SetCommissionSettleType sets the "commission_settle_type" field.
func (u *AppGoodUpsert) SetCommissionSettleType(v string) *AppGoodUpsert {
	u.Set(appgood.FieldCommissionSettleType, v)
	return u
}

// UpdateCommissionSettleType sets the "commission_settle_type" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateCommissionSettleType() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldCommissionSettleType)
	return u
}

// ClearCommissionSettleType clears the value of the "commission_settle_type" field.
func (u *AppGoodUpsert) ClearCommissionSettleType() *AppGoodUpsert {
	u.SetNull(appgood.FieldCommissionSettleType)
	return u
}

// SetDescriptions sets the "descriptions" field.
func (u *AppGoodUpsert) SetDescriptions(v []string) *AppGoodUpsert {
	u.Set(appgood.FieldDescriptions, v)
	return u
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDescriptions() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDescriptions)
	return u
}

// ClearDescriptions clears the value of the "descriptions" field.
func (u *AppGoodUpsert) ClearDescriptions() *AppGoodUpsert {
	u.SetNull(appgood.FieldDescriptions)
	return u
}

// SetGoodBanner sets the "good_banner" field.
func (u *AppGoodUpsert) SetGoodBanner(v string) *AppGoodUpsert {
	u.Set(appgood.FieldGoodBanner, v)
	return u
}

// UpdateGoodBanner sets the "good_banner" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateGoodBanner() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldGoodBanner)
	return u
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (u *AppGoodUpsert) ClearGoodBanner() *AppGoodUpsert {
	u.SetNull(appgood.FieldGoodBanner)
	return u
}

// SetDisplayNames sets the "display_names" field.
func (u *AppGoodUpsert) SetDisplayNames(v []string) *AppGoodUpsert {
	u.Set(appgood.FieldDisplayNames, v)
	return u
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDisplayNames() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDisplayNames)
	return u
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppGoodUpsert) ClearDisplayNames() *AppGoodUpsert {
	u.SetNull(appgood.FieldDisplayNames)
	return u
}

// SetEnablePurchase sets the "enable_purchase" field.
func (u *AppGoodUpsert) SetEnablePurchase(v bool) *AppGoodUpsert {
	u.Set(appgood.FieldEnablePurchase, v)
	return u
}

// UpdateEnablePurchase sets the "enable_purchase" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateEnablePurchase() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldEnablePurchase)
	return u
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (u *AppGoodUpsert) ClearEnablePurchase() *AppGoodUpsert {
	u.SetNull(appgood.FieldEnablePurchase)
	return u
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodUpsert) SetEnableProductPage(v bool) *AppGoodUpsert {
	u.Set(appgood.FieldEnableProductPage, v)
	return u
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateEnableProductPage() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldEnableProductPage)
	return u
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodUpsert) ClearEnableProductPage() *AppGoodUpsert {
	u.SetNull(appgood.FieldEnableProductPage)
	return u
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppGoodUpsert) SetCancelMode(v string) *AppGoodUpsert {
	u.Set(appgood.FieldCancelMode, v)
	return u
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateCancelMode() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldCancelMode)
	return u
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppGoodUpsert) ClearCancelMode() *AppGoodUpsert {
	u.SetNull(appgood.FieldCancelMode)
	return u
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (u *AppGoodUpsert) SetUserPurchaseLimit(v decimal.Decimal) *AppGoodUpsert {
	u.Set(appgood.FieldUserPurchaseLimit, v)
	return u
}

// UpdateUserPurchaseLimit sets the "user_purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateUserPurchaseLimit() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldUserPurchaseLimit)
	return u
}

// ClearUserPurchaseLimit clears the value of the "user_purchase_limit" field.
func (u *AppGoodUpsert) ClearUserPurchaseLimit() *AppGoodUpsert {
	u.SetNull(appgood.FieldUserPurchaseLimit)
	return u
}

// SetDisplayColors sets the "display_colors" field.
func (u *AppGoodUpsert) SetDisplayColors(v []string) *AppGoodUpsert {
	u.Set(appgood.FieldDisplayColors, v)
	return u
}

// UpdateDisplayColors sets the "display_colors" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateDisplayColors() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldDisplayColors)
	return u
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (u *AppGoodUpsert) ClearDisplayColors() *AppGoodUpsert {
	u.SetNull(appgood.FieldDisplayColors)
	return u
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (u *AppGoodUpsert) SetCancellableBeforeStart(v uint32) *AppGoodUpsert {
	u.Set(appgood.FieldCancellableBeforeStart, v)
	return u
}

// UpdateCancellableBeforeStart sets the "cancellable_before_start" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateCancellableBeforeStart() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldCancellableBeforeStart)
	return u
}

// AddCancellableBeforeStart adds v to the "cancellable_before_start" field.
func (u *AppGoodUpsert) AddCancellableBeforeStart(v uint32) *AppGoodUpsert {
	u.Add(appgood.FieldCancellableBeforeStart, v)
	return u
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (u *AppGoodUpsert) ClearCancellableBeforeStart() *AppGoodUpsert {
	u.SetNull(appgood.FieldCancellableBeforeStart)
	return u
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodUpsert) SetProductPage(v string) *AppGoodUpsert {
	u.Set(appgood.FieldProductPage, v)
	return u
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateProductPage() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldProductPage)
	return u
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodUpsert) ClearProductPage() *AppGoodUpsert {
	u.SetNull(appgood.FieldProductPage)
	return u
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppGoodUpsert) SetEnableSetCommission(v bool) *AppGoodUpsert {
	u.Set(appgood.FieldEnableSetCommission, v)
	return u
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppGoodUpsert) UpdateEnableSetCommission() *AppGoodUpsert {
	u.SetExcluded(appgood.FieldEnableSetCommission)
	return u
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppGoodUpsert) ClearEnableSetCommission() *AppGoodUpsert {
	u.SetNull(appgood.FieldEnableSetCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodUpsertOne) UpdateNewValues() *AppGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgood.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppGood.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppGoodUpsertOne) Ignore() *AppGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodUpsertOne) DoNothing() *AppGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodCreate.OnConflict
// documentation for more info.
func (u *AppGoodUpsertOne) Update(set func(*AppGoodUpsert)) *AppGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodUpsertOne) SetCreatedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodUpsertOne) AddCreatedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateCreatedAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodUpsertOne) SetUpdatedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodUpsertOne) AddUpdatedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateUpdatedAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodUpsertOne) SetDeletedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodUpsertOne) AddDeletedAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDeletedAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodUpsertOne) SetAppID(v uuid.UUID) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateAppID() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodUpsertOne) SetGoodID(v uuid.UUID) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateGoodID() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodID()
	})
}

// SetOnline sets the "online" field.
func (u *AppGoodUpsertOne) SetOnline(v bool) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateOnline() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodUpsertOne) ClearOnline() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearOnline()
	})
}

// SetVisible sets the "visible" field.
func (u *AppGoodUpsertOne) SetVisible(v bool) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateVisible() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateVisible()
	})
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodUpsertOne) ClearVisible() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearVisible()
	})
}

// SetGoodName sets the "good_name" field.
func (u *AppGoodUpsertOne) SetGoodName(v string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodName(v)
	})
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateGoodName() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodName()
	})
}

// ClearGoodName clears the value of the "good_name" field.
func (u *AppGoodUpsertOne) ClearGoodName() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearGoodName()
	})
}

// SetPrice sets the "price" field.
func (u *AppGoodUpsertOne) SetPrice(v decimal.Decimal) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdatePrice() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *AppGoodUpsertOne) ClearPrice() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearPrice()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodUpsertOne) SetDisplayIndex(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodUpsertOne) AddDisplayIndex(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDisplayIndex() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodUpsertOne) ClearDisplayIndex() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (u *AppGoodUpsertOne) SetPurchaseLimit(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetPurchaseLimit(v)
	})
}

// AddPurchaseLimit adds v to the "purchase_limit" field.
func (u *AppGoodUpsertOne) AddPurchaseLimit(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddPurchaseLimit(v)
	})
}

// UpdatePurchaseLimit sets the "purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdatePurchaseLimit() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdatePurchaseLimit()
	})
}

// ClearPurchaseLimit clears the value of the "purchase_limit" field.
func (u *AppGoodUpsertOne) ClearPurchaseLimit() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearPurchaseLimit()
	})
}

// SetCommissionPercent sets the "commission_percent" field.
func (u *AppGoodUpsertOne) SetCommissionPercent(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCommissionPercent(v)
	})
}

// AddCommissionPercent adds v to the "commission_percent" field.
func (u *AppGoodUpsertOne) AddCommissionPercent(v int32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCommissionPercent(v)
	})
}

// UpdateCommissionPercent sets the "commission_percent" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateCommissionPercent() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCommissionPercent()
	})
}

// ClearCommissionPercent clears the value of the "commission_percent" field.
func (u *AppGoodUpsertOne) ClearCommissionPercent() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCommissionPercent()
	})
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppGoodUpsertOne) SetSaleStartAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetSaleStartAt(v)
	})
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppGoodUpsertOne) AddSaleStartAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddSaleStartAt(v)
	})
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateSaleStartAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateSaleStartAt()
	})
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppGoodUpsertOne) ClearSaleStartAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearSaleStartAt()
	})
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppGoodUpsertOne) SetSaleEndAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetSaleEndAt(v)
	})
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppGoodUpsertOne) AddSaleEndAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddSaleEndAt(v)
	})
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateSaleEndAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateSaleEndAt()
	})
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppGoodUpsertOne) ClearSaleEndAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearSaleEndAt()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppGoodUpsertOne) SetServiceStartAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppGoodUpsertOne) AddServiceStartAt(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateServiceStartAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppGoodUpsertOne) ClearServiceStartAt() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (u *AppGoodUpsertOne) SetTechnicalFeeRatio(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetTechnicalFeeRatio(v)
	})
}

// AddTechnicalFeeRatio adds v to the "technical_fee_ratio" field.
func (u *AppGoodUpsertOne) AddTechnicalFeeRatio(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddTechnicalFeeRatio(v)
	})
}

// UpdateTechnicalFeeRatio sets the "technical_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateTechnicalFeeRatio() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateTechnicalFeeRatio()
	})
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (u *AppGoodUpsertOne) ClearTechnicalFeeRatio() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearTechnicalFeeRatio()
	})
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (u *AppGoodUpsertOne) SetElectricityFeeRatio(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetElectricityFeeRatio(v)
	})
}

// AddElectricityFeeRatio adds v to the "electricity_fee_ratio" field.
func (u *AppGoodUpsertOne) AddElectricityFeeRatio(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddElectricityFeeRatio(v)
	})
}

// UpdateElectricityFeeRatio sets the "electricity_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateElectricityFeeRatio() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateElectricityFeeRatio()
	})
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (u *AppGoodUpsertOne) ClearElectricityFeeRatio() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearElectricityFeeRatio()
	})
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppGoodUpsertOne) SetDailyRewardAmount(v decimal.Decimal) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDailyRewardAmount(v)
	})
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDailyRewardAmount() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDailyRewardAmount()
	})
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppGoodUpsertOne) ClearDailyRewardAmount() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDailyRewardAmount()
	})
}

// SetCommissionSettleType sets the "commission_settle_type" field.
func (u *AppGoodUpsertOne) SetCommissionSettleType(v string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCommissionSettleType(v)
	})
}

// UpdateCommissionSettleType sets the "commission_settle_type" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateCommissionSettleType() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCommissionSettleType()
	})
}

// ClearCommissionSettleType clears the value of the "commission_settle_type" field.
func (u *AppGoodUpsertOne) ClearCommissionSettleType() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCommissionSettleType()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *AppGoodUpsertOne) SetDescriptions(v []string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDescriptions() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDescriptions()
	})
}

// ClearDescriptions clears the value of the "descriptions" field.
func (u *AppGoodUpsertOne) ClearDescriptions() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDescriptions()
	})
}

// SetGoodBanner sets the "good_banner" field.
func (u *AppGoodUpsertOne) SetGoodBanner(v string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodBanner(v)
	})
}

// UpdateGoodBanner sets the "good_banner" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateGoodBanner() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodBanner()
	})
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (u *AppGoodUpsertOne) ClearGoodBanner() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearGoodBanner()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppGoodUpsertOne) SetDisplayNames(v []string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDisplayNames() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppGoodUpsertOne) ClearDisplayNames() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayNames()
	})
}

// SetEnablePurchase sets the "enable_purchase" field.
func (u *AppGoodUpsertOne) SetEnablePurchase(v bool) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnablePurchase(v)
	})
}

// UpdateEnablePurchase sets the "enable_purchase" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateEnablePurchase() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnablePurchase()
	})
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (u *AppGoodUpsertOne) ClearEnablePurchase() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnablePurchase()
	})
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodUpsertOne) SetEnableProductPage(v bool) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnableProductPage(v)
	})
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateEnableProductPage() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnableProductPage()
	})
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodUpsertOne) ClearEnableProductPage() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnableProductPage()
	})
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppGoodUpsertOne) SetCancelMode(v string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCancelMode(v)
	})
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateCancelMode() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCancelMode()
	})
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppGoodUpsertOne) ClearCancelMode() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCancelMode()
	})
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (u *AppGoodUpsertOne) SetUserPurchaseLimit(v decimal.Decimal) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetUserPurchaseLimit(v)
	})
}

// UpdateUserPurchaseLimit sets the "user_purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateUserPurchaseLimit() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateUserPurchaseLimit()
	})
}

// ClearUserPurchaseLimit clears the value of the "user_purchase_limit" field.
func (u *AppGoodUpsertOne) ClearUserPurchaseLimit() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearUserPurchaseLimit()
	})
}

// SetDisplayColors sets the "display_colors" field.
func (u *AppGoodUpsertOne) SetDisplayColors(v []string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayColors(v)
	})
}

// UpdateDisplayColors sets the "display_colors" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateDisplayColors() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayColors()
	})
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (u *AppGoodUpsertOne) ClearDisplayColors() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayColors()
	})
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (u *AppGoodUpsertOne) SetCancellableBeforeStart(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCancellableBeforeStart(v)
	})
}

// AddCancellableBeforeStart adds v to the "cancellable_before_start" field.
func (u *AppGoodUpsertOne) AddCancellableBeforeStart(v uint32) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCancellableBeforeStart(v)
	})
}

// UpdateCancellableBeforeStart sets the "cancellable_before_start" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateCancellableBeforeStart() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCancellableBeforeStart()
	})
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (u *AppGoodUpsertOne) ClearCancellableBeforeStart() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCancellableBeforeStart()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodUpsertOne) SetProductPage(v string) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateProductPage() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodUpsertOne) ClearProductPage() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearProductPage()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppGoodUpsertOne) SetEnableSetCommission(v bool) *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppGoodUpsertOne) UpdateEnableSetCommission() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppGoodUpsertOne) ClearEnableSetCommission() *AppGoodUpsertOne {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnableSetCommission()
	})
}

// Exec executes the query.
func (u *AppGoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppGoodUpsertOne.ID is not supported by MySQL driver. Use AppGoodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodCreateBulk is the builder for creating many AppGood entities in bulk.
type AppGoodCreateBulk struct {
	config
	builders []*AppGoodCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGood entities in the database.
func (agcb *AppGoodCreateBulk) Save(ctx context.Context) ([]*AppGood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AppGood, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *AppGoodCreateBulk) SaveX(ctx context.Context) []*AppGood {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *AppGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *AppGoodCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGood.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (agcb *AppGoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodUpsertBulk {
	agcb.conflict = opts
	return &AppGoodUpsertBulk{
		create: agcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agcb *AppGoodCreateBulk) OnConflictColumns(columns ...string) *AppGoodUpsertBulk {
	agcb.conflict = append(agcb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodUpsertBulk{
		create: agcb,
	}
}

// AppGoodUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGood nodes.
type AppGoodUpsertBulk struct {
	create *AppGoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodUpsertBulk) UpdateNewValues() *AppGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgood.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGood.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppGoodUpsertBulk) Ignore() *AppGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodUpsertBulk) DoNothing() *AppGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodUpsertBulk) Update(set func(*AppGoodUpsert)) *AppGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppGoodUpsertBulk) SetCreatedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppGoodUpsertBulk) AddCreatedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateCreatedAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppGoodUpsertBulk) SetUpdatedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppGoodUpsertBulk) AddUpdatedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateUpdatedAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppGoodUpsertBulk) SetDeletedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppGoodUpsertBulk) AddDeletedAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDeletedAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppGoodUpsertBulk) SetAppID(v uuid.UUID) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateAppID() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodUpsertBulk) SetGoodID(v uuid.UUID) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateGoodID() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodID()
	})
}

// SetOnline sets the "online" field.
func (u *AppGoodUpsertBulk) SetOnline(v bool) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateOnline() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateOnline()
	})
}

// ClearOnline clears the value of the "online" field.
func (u *AppGoodUpsertBulk) ClearOnline() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearOnline()
	})
}

// SetVisible sets the "visible" field.
func (u *AppGoodUpsertBulk) SetVisible(v bool) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetVisible(v)
	})
}

// UpdateVisible sets the "visible" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateVisible() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateVisible()
	})
}

// ClearVisible clears the value of the "visible" field.
func (u *AppGoodUpsertBulk) ClearVisible() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearVisible()
	})
}

// SetGoodName sets the "good_name" field.
func (u *AppGoodUpsertBulk) SetGoodName(v string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodName(v)
	})
}

// UpdateGoodName sets the "good_name" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateGoodName() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodName()
	})
}

// ClearGoodName clears the value of the "good_name" field.
func (u *AppGoodUpsertBulk) ClearGoodName() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearGoodName()
	})
}

// SetPrice sets the "price" field.
func (u *AppGoodUpsertBulk) SetPrice(v decimal.Decimal) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdatePrice() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *AppGoodUpsertBulk) ClearPrice() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearPrice()
	})
}

// SetDisplayIndex sets the "display_index" field.
func (u *AppGoodUpsertBulk) SetDisplayIndex(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayIndex(v)
	})
}

// AddDisplayIndex adds v to the "display_index" field.
func (u *AppGoodUpsertBulk) AddDisplayIndex(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddDisplayIndex(v)
	})
}

// UpdateDisplayIndex sets the "display_index" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDisplayIndex() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayIndex()
	})
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (u *AppGoodUpsertBulk) ClearDisplayIndex() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayIndex()
	})
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (u *AppGoodUpsertBulk) SetPurchaseLimit(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetPurchaseLimit(v)
	})
}

// AddPurchaseLimit adds v to the "purchase_limit" field.
func (u *AppGoodUpsertBulk) AddPurchaseLimit(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddPurchaseLimit(v)
	})
}

// UpdatePurchaseLimit sets the "purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdatePurchaseLimit() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdatePurchaseLimit()
	})
}

// ClearPurchaseLimit clears the value of the "purchase_limit" field.
func (u *AppGoodUpsertBulk) ClearPurchaseLimit() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearPurchaseLimit()
	})
}

// SetCommissionPercent sets the "commission_percent" field.
func (u *AppGoodUpsertBulk) SetCommissionPercent(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCommissionPercent(v)
	})
}

// AddCommissionPercent adds v to the "commission_percent" field.
func (u *AppGoodUpsertBulk) AddCommissionPercent(v int32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCommissionPercent(v)
	})
}

// UpdateCommissionPercent sets the "commission_percent" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateCommissionPercent() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCommissionPercent()
	})
}

// ClearCommissionPercent clears the value of the "commission_percent" field.
func (u *AppGoodUpsertBulk) ClearCommissionPercent() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCommissionPercent()
	})
}

// SetSaleStartAt sets the "sale_start_at" field.
func (u *AppGoodUpsertBulk) SetSaleStartAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetSaleStartAt(v)
	})
}

// AddSaleStartAt adds v to the "sale_start_at" field.
func (u *AppGoodUpsertBulk) AddSaleStartAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddSaleStartAt(v)
	})
}

// UpdateSaleStartAt sets the "sale_start_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateSaleStartAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateSaleStartAt()
	})
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (u *AppGoodUpsertBulk) ClearSaleStartAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearSaleStartAt()
	})
}

// SetSaleEndAt sets the "sale_end_at" field.
func (u *AppGoodUpsertBulk) SetSaleEndAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetSaleEndAt(v)
	})
}

// AddSaleEndAt adds v to the "sale_end_at" field.
func (u *AppGoodUpsertBulk) AddSaleEndAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddSaleEndAt(v)
	})
}

// UpdateSaleEndAt sets the "sale_end_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateSaleEndAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateSaleEndAt()
	})
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (u *AppGoodUpsertBulk) ClearSaleEndAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearSaleEndAt()
	})
}

// SetServiceStartAt sets the "service_start_at" field.
func (u *AppGoodUpsertBulk) SetServiceStartAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetServiceStartAt(v)
	})
}

// AddServiceStartAt adds v to the "service_start_at" field.
func (u *AppGoodUpsertBulk) AddServiceStartAt(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddServiceStartAt(v)
	})
}

// UpdateServiceStartAt sets the "service_start_at" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateServiceStartAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateServiceStartAt()
	})
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (u *AppGoodUpsertBulk) ClearServiceStartAt() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearServiceStartAt()
	})
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (u *AppGoodUpsertBulk) SetTechnicalFeeRatio(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetTechnicalFeeRatio(v)
	})
}

// AddTechnicalFeeRatio adds v to the "technical_fee_ratio" field.
func (u *AppGoodUpsertBulk) AddTechnicalFeeRatio(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddTechnicalFeeRatio(v)
	})
}

// UpdateTechnicalFeeRatio sets the "technical_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateTechnicalFeeRatio() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateTechnicalFeeRatio()
	})
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (u *AppGoodUpsertBulk) ClearTechnicalFeeRatio() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearTechnicalFeeRatio()
	})
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (u *AppGoodUpsertBulk) SetElectricityFeeRatio(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetElectricityFeeRatio(v)
	})
}

// AddElectricityFeeRatio adds v to the "electricity_fee_ratio" field.
func (u *AppGoodUpsertBulk) AddElectricityFeeRatio(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddElectricityFeeRatio(v)
	})
}

// UpdateElectricityFeeRatio sets the "electricity_fee_ratio" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateElectricityFeeRatio() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateElectricityFeeRatio()
	})
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (u *AppGoodUpsertBulk) ClearElectricityFeeRatio() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearElectricityFeeRatio()
	})
}

// SetDailyRewardAmount sets the "daily_reward_amount" field.
func (u *AppGoodUpsertBulk) SetDailyRewardAmount(v decimal.Decimal) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDailyRewardAmount(v)
	})
}

// UpdateDailyRewardAmount sets the "daily_reward_amount" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDailyRewardAmount() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDailyRewardAmount()
	})
}

// ClearDailyRewardAmount clears the value of the "daily_reward_amount" field.
func (u *AppGoodUpsertBulk) ClearDailyRewardAmount() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDailyRewardAmount()
	})
}

// SetCommissionSettleType sets the "commission_settle_type" field.
func (u *AppGoodUpsertBulk) SetCommissionSettleType(v string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCommissionSettleType(v)
	})
}

// UpdateCommissionSettleType sets the "commission_settle_type" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateCommissionSettleType() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCommissionSettleType()
	})
}

// ClearCommissionSettleType clears the value of the "commission_settle_type" field.
func (u *AppGoodUpsertBulk) ClearCommissionSettleType() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCommissionSettleType()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *AppGoodUpsertBulk) SetDescriptions(v []string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDescriptions() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDescriptions()
	})
}

// ClearDescriptions clears the value of the "descriptions" field.
func (u *AppGoodUpsertBulk) ClearDescriptions() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDescriptions()
	})
}

// SetGoodBanner sets the "good_banner" field.
func (u *AppGoodUpsertBulk) SetGoodBanner(v string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetGoodBanner(v)
	})
}

// UpdateGoodBanner sets the "good_banner" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateGoodBanner() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateGoodBanner()
	})
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (u *AppGoodUpsertBulk) ClearGoodBanner() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearGoodBanner()
	})
}

// SetDisplayNames sets the "display_names" field.
func (u *AppGoodUpsertBulk) SetDisplayNames(v []string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayNames(v)
	})
}

// UpdateDisplayNames sets the "display_names" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDisplayNames() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayNames()
	})
}

// ClearDisplayNames clears the value of the "display_names" field.
func (u *AppGoodUpsertBulk) ClearDisplayNames() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayNames()
	})
}

// SetEnablePurchase sets the "enable_purchase" field.
func (u *AppGoodUpsertBulk) SetEnablePurchase(v bool) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnablePurchase(v)
	})
}

// UpdateEnablePurchase sets the "enable_purchase" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateEnablePurchase() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnablePurchase()
	})
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (u *AppGoodUpsertBulk) ClearEnablePurchase() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnablePurchase()
	})
}

// SetEnableProductPage sets the "enable_product_page" field.
func (u *AppGoodUpsertBulk) SetEnableProductPage(v bool) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnableProductPage(v)
	})
}

// UpdateEnableProductPage sets the "enable_product_page" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateEnableProductPage() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnableProductPage()
	})
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (u *AppGoodUpsertBulk) ClearEnableProductPage() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnableProductPage()
	})
}

// SetCancelMode sets the "cancel_mode" field.
func (u *AppGoodUpsertBulk) SetCancelMode(v string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCancelMode(v)
	})
}

// UpdateCancelMode sets the "cancel_mode" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateCancelMode() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCancelMode()
	})
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (u *AppGoodUpsertBulk) ClearCancelMode() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCancelMode()
	})
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (u *AppGoodUpsertBulk) SetUserPurchaseLimit(v decimal.Decimal) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetUserPurchaseLimit(v)
	})
}

// UpdateUserPurchaseLimit sets the "user_purchase_limit" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateUserPurchaseLimit() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateUserPurchaseLimit()
	})
}

// ClearUserPurchaseLimit clears the value of the "user_purchase_limit" field.
func (u *AppGoodUpsertBulk) ClearUserPurchaseLimit() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearUserPurchaseLimit()
	})
}

// SetDisplayColors sets the "display_colors" field.
func (u *AppGoodUpsertBulk) SetDisplayColors(v []string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetDisplayColors(v)
	})
}

// UpdateDisplayColors sets the "display_colors" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateDisplayColors() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateDisplayColors()
	})
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (u *AppGoodUpsertBulk) ClearDisplayColors() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearDisplayColors()
	})
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (u *AppGoodUpsertBulk) SetCancellableBeforeStart(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetCancellableBeforeStart(v)
	})
}

// AddCancellableBeforeStart adds v to the "cancellable_before_start" field.
func (u *AppGoodUpsertBulk) AddCancellableBeforeStart(v uint32) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.AddCancellableBeforeStart(v)
	})
}

// UpdateCancellableBeforeStart sets the "cancellable_before_start" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateCancellableBeforeStart() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateCancellableBeforeStart()
	})
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (u *AppGoodUpsertBulk) ClearCancellableBeforeStart() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearCancellableBeforeStart()
	})
}

// SetProductPage sets the "product_page" field.
func (u *AppGoodUpsertBulk) SetProductPage(v string) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetProductPage(v)
	})
}

// UpdateProductPage sets the "product_page" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateProductPage() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateProductPage()
	})
}

// ClearProductPage clears the value of the "product_page" field.
func (u *AppGoodUpsertBulk) ClearProductPage() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearProductPage()
	})
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (u *AppGoodUpsertBulk) SetEnableSetCommission(v bool) *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.SetEnableSetCommission(v)
	})
}

// UpdateEnableSetCommission sets the "enable_set_commission" field to the value that was provided on create.
func (u *AppGoodUpsertBulk) UpdateEnableSetCommission() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.UpdateEnableSetCommission()
	})
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (u *AppGoodUpsertBulk) ClearEnableSetCommission() *AppGoodUpsertBulk {
	return u.Update(func(s *AppGoodUpsert) {
		s.ClearEnableSetCommission()
	})
}

// Exec executes the query.
func (u *AppGoodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppGoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
