// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appstocklock"
	"github.com/google/uuid"
)

// AppStockLock is the model entity for the AppStockLock schema.
type AppStockLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppStockLock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appstocklock.FieldCreatedAt, appstocklock.FieldUpdatedAt, appstocklock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case appstocklock.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppStockLock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppStockLock fields.
func (asl *AppStockLock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appstocklock.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				asl.ID = *value
			}
		case appstocklock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				asl.CreatedAt = uint32(value.Int64)
			}
		case appstocklock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				asl.UpdatedAt = uint32(value.Int64)
			}
		case appstocklock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				asl.DeletedAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppStockLock.
// Note that you need to call AppStockLock.Unwrap() before calling this method if this AppStockLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (asl *AppStockLock) Update() *AppStockLockUpdateOne {
	return (&AppStockLockClient{config: asl.config}).UpdateOne(asl)
}

// Unwrap unwraps the AppStockLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asl *AppStockLock) Unwrap() *AppStockLock {
	_tx, ok := asl.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppStockLock is not a transactional entity")
	}
	asl.config.driver = _tx.drv
	return asl
}

// String implements the fmt.Stringer.
func (asl *AppStockLock) String() string {
	var builder strings.Builder
	builder.WriteString("AppStockLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", asl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", asl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", asl.DeletedAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppStockLocks is a parsable slice of AppStockLock.
type AppStockLocks []*AppStockLock

func (asl AppStockLocks) config(cfg config) {
	for _i := range asl {
		asl[_i].config = cfg
	}
}
