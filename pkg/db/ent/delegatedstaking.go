// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/delegatedstaking"
	"github.com/google/uuid"
)

// DelegatedStaking is the model entity for the DelegatedStaking schema.
type DelegatedStaking struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// NoStakeRedeemDelayHours holds the value of the "no_stake_redeem_delay_hours" field.
	NoStakeRedeemDelayHours uint32 `json:"no_stake_redeem_delay_hours,omitempty"`
	// MaxRedeemDelayHours holds the value of the "max_redeem_delay_hours" field.
	MaxRedeemDelayHours uint32 `json:"max_redeem_delay_hours,omitempty"`
	// ContractAddress holds the value of the "contract_address" field.
	ContractAddress string `json:"contract_address,omitempty"`
	// NoStakeBenefitDelayHours holds the value of the "no_stake_benefit_delay_hours" field.
	NoStakeBenefitDelayHours uint32 `json:"no_stake_benefit_delay_hours,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DelegatedStaking) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case delegatedstaking.FieldID, delegatedstaking.FieldCreatedAt, delegatedstaking.FieldUpdatedAt, delegatedstaking.FieldDeletedAt, delegatedstaking.FieldNoStakeRedeemDelayHours, delegatedstaking.FieldMaxRedeemDelayHours, delegatedstaking.FieldNoStakeBenefitDelayHours:
			values[i] = new(sql.NullInt64)
		case delegatedstaking.FieldContractAddress:
			values[i] = new(sql.NullString)
		case delegatedstaking.FieldEntID, delegatedstaking.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DelegatedStaking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DelegatedStaking fields.
func (ds *DelegatedStaking) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delegatedstaking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = uint32(value.Int64)
		case delegatedstaking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ds.CreatedAt = uint32(value.Int64)
			}
		case delegatedstaking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ds.UpdatedAt = uint32(value.Int64)
			}
		case delegatedstaking.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ds.DeletedAt = uint32(value.Int64)
			}
		case delegatedstaking.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ds.EntID = *value
			}
		case delegatedstaking.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				ds.GoodID = *value
			}
		case delegatedstaking.FieldNoStakeRedeemDelayHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field no_stake_redeem_delay_hours", values[i])
			} else if value.Valid {
				ds.NoStakeRedeemDelayHours = uint32(value.Int64)
			}
		case delegatedstaking.FieldMaxRedeemDelayHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_redeem_delay_hours", values[i])
			} else if value.Valid {
				ds.MaxRedeemDelayHours = uint32(value.Int64)
			}
		case delegatedstaking.FieldContractAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_address", values[i])
			} else if value.Valid {
				ds.ContractAddress = value.String
			}
		case delegatedstaking.FieldNoStakeBenefitDelayHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field no_stake_benefit_delay_hours", values[i])
			} else if value.Valid {
				ds.NoStakeBenefitDelayHours = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DelegatedStaking.
// Note that you need to call DelegatedStaking.Unwrap() before calling this method if this DelegatedStaking
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DelegatedStaking) Update() *DelegatedStakingUpdateOne {
	return (&DelegatedStakingClient{config: ds.config}).UpdateOne(ds)
}

// Unwrap unwraps the DelegatedStaking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DelegatedStaking) Unwrap() *DelegatedStaking {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DelegatedStaking is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DelegatedStaking) String() string {
	var builder strings.Builder
	builder.WriteString("DelegatedStaking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ds.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ds.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ds.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ds.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", ds.GoodID))
	builder.WriteString(", ")
	builder.WriteString("no_stake_redeem_delay_hours=")
	builder.WriteString(fmt.Sprintf("%v", ds.NoStakeRedeemDelayHours))
	builder.WriteString(", ")
	builder.WriteString("max_redeem_delay_hours=")
	builder.WriteString(fmt.Sprintf("%v", ds.MaxRedeemDelayHours))
	builder.WriteString(", ")
	builder.WriteString("contract_address=")
	builder.WriteString(ds.ContractAddress)
	builder.WriteString(", ")
	builder.WriteString("no_stake_benefit_delay_hours=")
	builder.WriteString(fmt.Sprintf("%v", ds.NoStakeBenefitDelayHours))
	builder.WriteByte(')')
	return builder.String()
}

// DelegatedStakings is a parsable slice of DelegatedStaking.
type DelegatedStakings []*DelegatedStaking

func (ds DelegatedStakings) config(cfg config) {
	for _i := range ds {
		ds[_i].config = cfg
	}
}
