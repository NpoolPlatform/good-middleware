// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appsimulatepowerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppSimulatePowerRental is the model entity for the AppSimulatePowerRental schema.
type AppSimulatePowerRental struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// OrderUnits holds the value of the "order_units" field.
	OrderUnits decimal.Decimal `json:"order_units,omitempty"`
	// OrderDuration holds the value of the "order_duration" field.
	OrderDuration uint32 `json:"order_duration,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppSimulatePowerRental) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appsimulatepowerrental.FieldOrderUnits:
			values[i] = new(decimal.Decimal)
		case appsimulatepowerrental.FieldID, appsimulatepowerrental.FieldCreatedAt, appsimulatepowerrental.FieldUpdatedAt, appsimulatepowerrental.FieldDeletedAt, appsimulatepowerrental.FieldOrderDuration:
			values[i] = new(sql.NullInt64)
		case appsimulatepowerrental.FieldEntID, appsimulatepowerrental.FieldAppGoodID, appsimulatepowerrental.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppSimulatePowerRental", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppSimulatePowerRental fields.
func (aspr *AppSimulatePowerRental) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appsimulatepowerrental.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aspr.ID = uint32(value.Int64)
		case appsimulatepowerrental.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aspr.CreatedAt = uint32(value.Int64)
			}
		case appsimulatepowerrental.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aspr.UpdatedAt = uint32(value.Int64)
			}
		case appsimulatepowerrental.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aspr.DeletedAt = uint32(value.Int64)
			}
		case appsimulatepowerrental.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				aspr.EntID = *value
			}
		case appsimulatepowerrental.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				aspr.AppGoodID = *value
			}
		case appsimulatepowerrental.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				aspr.CoinTypeID = *value
			}
		case appsimulatepowerrental.FieldOrderUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field order_units", values[i])
			} else if value != nil {
				aspr.OrderUnits = *value
			}
		case appsimulatepowerrental.FieldOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_duration", values[i])
			} else if value.Valid {
				aspr.OrderDuration = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppSimulatePowerRental.
// Note that you need to call AppSimulatePowerRental.Unwrap() before calling this method if this AppSimulatePowerRental
// was returned from a transaction, and the transaction was committed or rolled back.
func (aspr *AppSimulatePowerRental) Update() *AppSimulatePowerRentalUpdateOne {
	return (&AppSimulatePowerRentalClient{config: aspr.config}).UpdateOne(aspr)
}

// Unwrap unwraps the AppSimulatePowerRental entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aspr *AppSimulatePowerRental) Unwrap() *AppSimulatePowerRental {
	_tx, ok := aspr.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppSimulatePowerRental is not a transactional entity")
	}
	aspr.config.driver = _tx.drv
	return aspr
}

// String implements the fmt.Stringer.
func (aspr *AppSimulatePowerRental) String() string {
	var builder strings.Builder
	builder.WriteString("AppSimulatePowerRental(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aspr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", aspr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", aspr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", aspr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", aspr.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", aspr.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", aspr.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("order_units=")
	builder.WriteString(fmt.Sprintf("%v", aspr.OrderUnits))
	builder.WriteString(", ")
	builder.WriteString("order_duration=")
	builder.WriteString(fmt.Sprintf("%v", aspr.OrderDuration))
	builder.WriteByte(')')
	return builder.String()
}

// AppSimulatePowerRentals is a parsable slice of AppSimulatePowerRental.
type AppSimulatePowerRentals []*AppSimulatePowerRental

func (aspr AppSimulatePowerRentals) config(cfg config) {
	for _i := range aspr {
		aspr[_i].config = cfg
	}
}
