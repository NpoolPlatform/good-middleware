// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodCreate is the builder for creating a Good entity.
type GoodCreate struct {
	config
	mutation *GoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GoodCreate) SetCreatedAt(u uint32) *GoodCreate {
	gc.mutation.SetCreatedAt(u)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableCreatedAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetCreatedAt(*u)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GoodCreate) SetUpdatedAt(u uint32) *GoodCreate {
	gc.mutation.SetUpdatedAt(u)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUpdatedAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetUpdatedAt(*u)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GoodCreate) SetDeletedAt(u uint32) *GoodCreate {
	gc.mutation.SetDeletedAt(u)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDeletedAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetDeletedAt(*u)
	}
	return gc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gc *GoodCreate) SetDeviceInfoID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetDeviceInfoID(u)
	return gc
}

// SetDurationDays sets the "duration_days" field.
func (gc *GoodCreate) SetDurationDays(i int32) *GoodCreate {
	gc.mutation.SetDurationDays(i)
	return gc
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDurationDays(i *int32) *GoodCreate {
	if i != nil {
		gc.SetDurationDays(*i)
	}
	return gc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gc *GoodCreate) SetCoinTypeID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetCoinTypeID(u)
	return gc
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (gc *GoodCreate) SetInheritFromGoodID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetInheritFromGoodID(u)
	return gc
}

// SetNillableInheritFromGoodID sets the "inherit_from_good_id" field if the given value is not nil.
func (gc *GoodCreate) SetNillableInheritFromGoodID(u *uuid.UUID) *GoodCreate {
	if u != nil {
		gc.SetInheritFromGoodID(*u)
	}
	return gc
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (gc *GoodCreate) SetVendorLocationID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetVendorLocationID(u)
	return gc
}

// SetPrice sets the "price" field.
func (gc *GoodCreate) SetPrice(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetPrice(d)
	return gc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (gc *GoodCreate) SetNillablePrice(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetPrice(*d)
	}
	return gc
}

// SetBenefitType sets the "benefit_type" field.
func (gc *GoodCreate) SetBenefitType(s string) *GoodCreate {
	gc.mutation.SetBenefitType(s)
	return gc
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableBenefitType(s *string) *GoodCreate {
	if s != nil {
		gc.SetBenefitType(*s)
	}
	return gc
}

// SetGoodType sets the "good_type" field.
func (gc *GoodCreate) SetGoodType(s string) *GoodCreate {
	gc.mutation.SetGoodType(s)
	return gc
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gc *GoodCreate) SetNillableGoodType(s *string) *GoodCreate {
	if s != nil {
		gc.SetGoodType(*s)
	}
	return gc
}

// SetTitle sets the "title" field.
func (gc *GoodCreate) SetTitle(s string) *GoodCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gc *GoodCreate) SetNillableTitle(s *string) *GoodCreate {
	if s != nil {
		gc.SetTitle(*s)
	}
	return gc
}

// SetUnit sets the "unit" field.
func (gc *GoodCreate) SetUnit(s string) *GoodCreate {
	gc.mutation.SetUnit(s)
	return gc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnit(s *string) *GoodCreate {
	if s != nil {
		gc.SetUnit(*s)
	}
	return gc
}

// SetUnitAmount sets the "unit_amount" field.
func (gc *GoodCreate) SetUnitAmount(i int32) *GoodCreate {
	gc.mutation.SetUnitAmount(i)
	return gc
}

// SetNillableUnitAmount sets the "unit_amount" field if the given value is not nil.
func (gc *GoodCreate) SetNillableUnitAmount(i *int32) *GoodCreate {
	if i != nil {
		gc.SetUnitAmount(*i)
	}
	return gc
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (gc *GoodCreate) SetSupportCoinTypeIds(u []uuid.UUID) *GoodCreate {
	gc.mutation.SetSupportCoinTypeIds(u)
	return gc
}

// SetDeliveryAt sets the "delivery_at" field.
func (gc *GoodCreate) SetDeliveryAt(u uint32) *GoodCreate {
	gc.mutation.SetDeliveryAt(u)
	return gc
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableDeliveryAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetDeliveryAt(*u)
	}
	return gc
}

// SetStartAt sets the "start_at" field.
func (gc *GoodCreate) SetStartAt(u uint32) *GoodCreate {
	gc.mutation.SetStartAt(u)
	return gc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableStartAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetStartAt(*u)
	}
	return gc
}

// SetTestOnly sets the "test_only" field.
func (gc *GoodCreate) SetTestOnly(b bool) *GoodCreate {
	gc.mutation.SetTestOnly(b)
	return gc
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gc *GoodCreate) SetNillableTestOnly(b *bool) *GoodCreate {
	if b != nil {
		gc.SetTestOnly(*b)
	}
	return gc
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gc *GoodCreate) SetBenefitIntervalHours(u uint32) *GoodCreate {
	gc.mutation.SetBenefitIntervalHours(u)
	return gc
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gc *GoodCreate) SetNillableBenefitIntervalHours(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetBenefitIntervalHours(*u)
	}
	return gc
}

// SetBenefitState sets the "benefit_state" field.
func (gc *GoodCreate) SetBenefitState(s string) *GoodCreate {
	gc.mutation.SetBenefitState(s)
	return gc
}

// SetNillableBenefitState sets the "benefit_state" field if the given value is not nil.
func (gc *GoodCreate) SetNillableBenefitState(s *string) *GoodCreate {
	if s != nil {
		gc.SetBenefitState(*s)
	}
	return gc
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (gc *GoodCreate) SetLastBenefitAt(u uint32) *GoodCreate {
	gc.mutation.SetLastBenefitAt(u)
	return gc
}

// SetNillableLastBenefitAt sets the "last_benefit_at" field if the given value is not nil.
func (gc *GoodCreate) SetNillableLastBenefitAt(u *uint32) *GoodCreate {
	if u != nil {
		gc.SetLastBenefitAt(*u)
	}
	return gc
}

// SetBenefitTids sets the "benefit_tids" field.
func (gc *GoodCreate) SetBenefitTids(u []uuid.UUID) *GoodCreate {
	gc.mutation.SetBenefitTids(u)
	return gc
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (gc *GoodCreate) SetNextBenefitStartAmount(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetNextBenefitStartAmount(d)
	return gc
}

// SetNillableNextBenefitStartAmount sets the "next_benefit_start_amount" field if the given value is not nil.
func (gc *GoodCreate) SetNillableNextBenefitStartAmount(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetNextBenefitStartAmount(*d)
	}
	return gc
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (gc *GoodCreate) SetLastBenefitAmount(d decimal.Decimal) *GoodCreate {
	gc.mutation.SetLastBenefitAmount(d)
	return gc
}

// SetNillableLastBenefitAmount sets the "last_benefit_amount" field if the given value is not nil.
func (gc *GoodCreate) SetNillableLastBenefitAmount(d *decimal.Decimal) *GoodCreate {
	if d != nil {
		gc.SetLastBenefitAmount(*d)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GoodCreate) SetID(u uuid.UUID) *GoodCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GoodCreate) SetNillableID(u *uuid.UUID) *GoodCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// Mutation returns the GoodMutation object of the builder.
func (gc *GoodCreate) Mutation() *GoodMutation {
	return gc.mutation
}

// Save creates the Good in the database.
func (gc *GoodCreate) Save(ctx context.Context) (*Good, error) {
	var (
		err  error
		node *Good
	)
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Good)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GoodCreate) SaveX(ctx context.Context) *Good {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GoodCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GoodCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GoodCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if good.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized good.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := good.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if good.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized good.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := good.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.DeletedAt(); !ok {
		if good.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized good.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := good.DefaultDeletedAt()
		gc.mutation.SetDeletedAt(v)
	}
	if _, ok := gc.mutation.DurationDays(); !ok {
		v := good.DefaultDurationDays
		gc.mutation.SetDurationDays(v)
	}
	if _, ok := gc.mutation.InheritFromGoodID(); !ok {
		if good.DefaultInheritFromGoodID == nil {
			return fmt.Errorf("ent: uninitialized good.DefaultInheritFromGoodID (forgotten import ent/runtime?)")
		}
		v := good.DefaultInheritFromGoodID()
		gc.mutation.SetInheritFromGoodID(v)
	}
	if _, ok := gc.mutation.Price(); !ok {
		v := good.DefaultPrice
		gc.mutation.SetPrice(v)
	}
	if _, ok := gc.mutation.BenefitType(); !ok {
		v := good.DefaultBenefitType
		gc.mutation.SetBenefitType(v)
	}
	if _, ok := gc.mutation.GoodType(); !ok {
		v := good.DefaultGoodType
		gc.mutation.SetGoodType(v)
	}
	if _, ok := gc.mutation.Title(); !ok {
		v := good.DefaultTitle
		gc.mutation.SetTitle(v)
	}
	if _, ok := gc.mutation.Unit(); !ok {
		v := good.DefaultUnit
		gc.mutation.SetUnit(v)
	}
	if _, ok := gc.mutation.UnitAmount(); !ok {
		v := good.DefaultUnitAmount
		gc.mutation.SetUnitAmount(v)
	}
	if _, ok := gc.mutation.SupportCoinTypeIds(); !ok {
		v := good.DefaultSupportCoinTypeIds
		gc.mutation.SetSupportCoinTypeIds(v)
	}
	if _, ok := gc.mutation.DeliveryAt(); !ok {
		v := good.DefaultDeliveryAt
		gc.mutation.SetDeliveryAt(v)
	}
	if _, ok := gc.mutation.StartAt(); !ok {
		v := good.DefaultStartAt
		gc.mutation.SetStartAt(v)
	}
	if _, ok := gc.mutation.TestOnly(); !ok {
		v := good.DefaultTestOnly
		gc.mutation.SetTestOnly(v)
	}
	if _, ok := gc.mutation.BenefitIntervalHours(); !ok {
		v := good.DefaultBenefitIntervalHours
		gc.mutation.SetBenefitIntervalHours(v)
	}
	if _, ok := gc.mutation.BenefitState(); !ok {
		v := good.DefaultBenefitState
		gc.mutation.SetBenefitState(v)
	}
	if _, ok := gc.mutation.LastBenefitAt(); !ok {
		v := good.DefaultLastBenefitAt
		gc.mutation.SetLastBenefitAt(v)
	}
	if _, ok := gc.mutation.BenefitTids(); !ok {
		v := good.DefaultBenefitTids
		gc.mutation.SetBenefitTids(v)
	}
	if _, ok := gc.mutation.NextBenefitStartAmount(); !ok {
		v := good.DefaultNextBenefitStartAmount
		gc.mutation.SetNextBenefitStartAmount(v)
	}
	if _, ok := gc.mutation.LastBenefitAmount(); !ok {
		v := good.DefaultLastBenefitAmount
		gc.mutation.SetLastBenefitAmount(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		if good.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized good.DefaultID (forgotten import ent/runtime?)")
		}
		v := good.DefaultID()
		gc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GoodCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Good.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Good.updated_at"`)}
	}
	if _, ok := gc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Good.deleted_at"`)}
	}
	if _, ok := gc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`ent: missing required field "Good.device_info_id"`)}
	}
	if _, ok := gc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "Good.coin_type_id"`)}
	}
	if _, ok := gc.mutation.VendorLocationID(); !ok {
		return &ValidationError{Name: "vendor_location_id", err: errors.New(`ent: missing required field "Good.vendor_location_id"`)}
	}
	return nil
}

func (gc *GoodCreate) sqlSave(ctx context.Context) (*Good, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gc *GoodCreate) createSpec() (*Good, *sqlgraph.CreateSpec) {
	var (
		_node = &Good{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: good.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: good.FieldID,
			},
		}
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gc.mutation.DeviceInfoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldDeviceInfoID,
		})
		_node.DeviceInfoID = value
	}
	if value, ok := gc.mutation.DurationDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldDurationDays,
		})
		_node.DurationDays = value
	}
	if value, ok := gc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := gc.mutation.InheritFromGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldInheritFromGoodID,
		})
		_node.InheritFromGoodID = value
	}
	if value, ok := gc.mutation.VendorLocationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldVendorLocationID,
		})
		_node.VendorLocationID = value
	}
	if value, ok := gc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := gc.mutation.BenefitType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldBenefitType,
		})
		_node.BenefitType = value
	}
	if value, ok := gc.mutation.GoodType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldGoodType,
		})
		_node.GoodType = value
	}
	if value, ok := gc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := gc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := gc.mutation.UnitAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldUnitAmount,
		})
		_node.UnitAmount = value
	}
	if value, ok := gc.mutation.SupportCoinTypeIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: good.FieldSupportCoinTypeIds,
		})
		_node.SupportCoinTypeIds = value
	}
	if value, ok := gc.mutation.DeliveryAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeliveryAt,
		})
		_node.DeliveryAt = value
	}
	if value, ok := gc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := gc.mutation.TestOnly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: good.FieldTestOnly,
		})
		_node.TestOnly = value
	}
	if value, ok := gc.mutation.BenefitIntervalHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldBenefitIntervalHours,
		})
		_node.BenefitIntervalHours = value
	}
	if value, ok := gc.mutation.BenefitState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldBenefitState,
		})
		_node.BenefitState = value
	}
	if value, ok := gc.mutation.LastBenefitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldLastBenefitAt,
		})
		_node.LastBenefitAt = value
	}
	if value, ok := gc.mutation.BenefitTids(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: good.FieldBenefitTids,
		})
		_node.BenefitTids = value
	}
	if value, ok := gc.mutation.NextBenefitStartAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldNextBenefitStartAmount,
		})
		_node.NextBenefitStartAmount = value
	}
	if value, ok := gc.mutation.LastBenefitAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldLastBenefitAmount,
		})
		_node.LastBenefitAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Good.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gc *GoodCreate) OnConflict(opts ...sql.ConflictOption) *GoodUpsertOne {
	gc.conflict = opts
	return &GoodUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gc *GoodCreate) OnConflictColumns(columns ...string) *GoodUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GoodUpsertOne{
		create: gc,
	}
}

type (
	// GoodUpsertOne is the builder for "upsert"-ing
	//  one Good node.
	GoodUpsertOne struct {
		create *GoodCreate
	}

	// GoodUpsert is the "OnConflict" setter.
	GoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodUpsert) SetCreatedAt(v uint32) *GoodUpsert {
	u.Set(good.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateCreatedAt() *GoodUpsert {
	u.SetExcluded(good.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodUpsert) AddCreatedAt(v uint32) *GoodUpsert {
	u.Add(good.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodUpsert) SetUpdatedAt(v uint32) *GoodUpsert {
	u.Set(good.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUpdatedAt() *GoodUpsert {
	u.SetExcluded(good.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodUpsert) AddUpdatedAt(v uint32) *GoodUpsert {
	u.Add(good.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodUpsert) SetDeletedAt(v uint32) *GoodUpsert {
	u.Set(good.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDeletedAt() *GoodUpsert {
	u.SetExcluded(good.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodUpsert) AddDeletedAt(v uint32) *GoodUpsert {
	u.Add(good.FieldDeletedAt, v)
	return u
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsert) SetDeviceInfoID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldDeviceInfoID, v)
	return u
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDeviceInfoID() *GoodUpsert {
	u.SetExcluded(good.FieldDeviceInfoID)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *GoodUpsert) SetDurationDays(v int32) *GoodUpsert {
	u.Set(good.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDurationDays() *GoodUpsert {
	u.SetExcluded(good.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *GoodUpsert) AddDurationDays(v int32) *GoodUpsert {
	u.Add(good.FieldDurationDays, v)
	return u
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *GoodUpsert) ClearDurationDays() *GoodUpsert {
	u.SetNull(good.FieldDurationDays)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsert) SetCoinTypeID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateCoinTypeID() *GoodUpsert {
	u.SetExcluded(good.FieldCoinTypeID)
	return u
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsert) SetInheritFromGoodID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldInheritFromGoodID, v)
	return u
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateInheritFromGoodID() *GoodUpsert {
	u.SetExcluded(good.FieldInheritFromGoodID)
	return u
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsert) ClearInheritFromGoodID() *GoodUpsert {
	u.SetNull(good.FieldInheritFromGoodID)
	return u
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsert) SetVendorLocationID(v uuid.UUID) *GoodUpsert {
	u.Set(good.FieldVendorLocationID, v)
	return u
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsert) UpdateVendorLocationID() *GoodUpsert {
	u.SetExcluded(good.FieldVendorLocationID)
	return u
}

// SetPrice sets the "price" field.
func (u *GoodUpsert) SetPrice(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodUpsert) UpdatePrice() *GoodUpsert {
	u.SetExcluded(good.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *GoodUpsert) ClearPrice() *GoodUpsert {
	u.SetNull(good.FieldPrice)
	return u
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsert) SetBenefitType(v string) *GoodUpsert {
	u.Set(good.FieldBenefitType, v)
	return u
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitType() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitType)
	return u
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsert) ClearBenefitType() *GoodUpsert {
	u.SetNull(good.FieldBenefitType)
	return u
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsert) SetGoodType(v string) *GoodUpsert {
	u.Set(good.FieldGoodType, v)
	return u
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsert) UpdateGoodType() *GoodUpsert {
	u.SetExcluded(good.FieldGoodType)
	return u
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsert) ClearGoodType() *GoodUpsert {
	u.SetNull(good.FieldGoodType)
	return u
}

// SetTitle sets the "title" field.
func (u *GoodUpsert) SetTitle(v string) *GoodUpsert {
	u.Set(good.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsert) UpdateTitle() *GoodUpsert {
	u.SetExcluded(good.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsert) ClearTitle() *GoodUpsert {
	u.SetNull(good.FieldTitle)
	return u
}

// SetUnit sets the "unit" field.
func (u *GoodUpsert) SetUnit(v string) *GoodUpsert {
	u.Set(good.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnit() *GoodUpsert {
	u.SetExcluded(good.FieldUnit)
	return u
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsert) ClearUnit() *GoodUpsert {
	u.SetNull(good.FieldUnit)
	return u
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsert) SetUnitAmount(v int32) *GoodUpsert {
	u.Set(good.FieldUnitAmount, v)
	return u
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsert) UpdateUnitAmount() *GoodUpsert {
	u.SetExcluded(good.FieldUnitAmount)
	return u
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsert) AddUnitAmount(v int32) *GoodUpsert {
	u.Add(good.FieldUnitAmount, v)
	return u
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsert) ClearUnitAmount() *GoodUpsert {
	u.SetNull(good.FieldUnitAmount)
	return u
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (u *GoodUpsert) SetSupportCoinTypeIds(v []uuid.UUID) *GoodUpsert {
	u.Set(good.FieldSupportCoinTypeIds, v)
	return u
}

// UpdateSupportCoinTypeIds sets the "support_coin_type_ids" field to the value that was provided on create.
func (u *GoodUpsert) UpdateSupportCoinTypeIds() *GoodUpsert {
	u.SetExcluded(good.FieldSupportCoinTypeIds)
	return u
}

// ClearSupportCoinTypeIds clears the value of the "support_coin_type_ids" field.
func (u *GoodUpsert) ClearSupportCoinTypeIds() *GoodUpsert {
	u.SetNull(good.FieldSupportCoinTypeIds)
	return u
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsert) SetDeliveryAt(v uint32) *GoodUpsert {
	u.Set(good.FieldDeliveryAt, v)
	return u
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateDeliveryAt() *GoodUpsert {
	u.SetExcluded(good.FieldDeliveryAt)
	return u
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsert) AddDeliveryAt(v uint32) *GoodUpsert {
	u.Add(good.FieldDeliveryAt, v)
	return u
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsert) ClearDeliveryAt() *GoodUpsert {
	u.SetNull(good.FieldDeliveryAt)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsert) SetStartAt(v uint32) *GoodUpsert {
	u.Set(good.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateStartAt() *GoodUpsert {
	u.SetExcluded(good.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsert) AddStartAt(v uint32) *GoodUpsert {
	u.Add(good.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsert) ClearStartAt() *GoodUpsert {
	u.SetNull(good.FieldStartAt)
	return u
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsert) SetTestOnly(v bool) *GoodUpsert {
	u.Set(good.FieldTestOnly, v)
	return u
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsert) UpdateTestOnly() *GoodUpsert {
	u.SetExcluded(good.FieldTestOnly)
	return u
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsert) ClearTestOnly() *GoodUpsert {
	u.SetNull(good.FieldTestOnly)
	return u
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsert) SetBenefitIntervalHours(v uint32) *GoodUpsert {
	u.Set(good.FieldBenefitIntervalHours, v)
	return u
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitIntervalHours() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitIntervalHours)
	return u
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsert) AddBenefitIntervalHours(v uint32) *GoodUpsert {
	u.Add(good.FieldBenefitIntervalHours, v)
	return u
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsert) ClearBenefitIntervalHours() *GoodUpsert {
	u.SetNull(good.FieldBenefitIntervalHours)
	return u
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodUpsert) SetBenefitState(v string) *GoodUpsert {
	u.Set(good.FieldBenefitState, v)
	return u
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitState() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitState)
	return u
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodUpsert) ClearBenefitState() *GoodUpsert {
	u.SetNull(good.FieldBenefitState)
	return u
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodUpsert) SetLastBenefitAt(v uint32) *GoodUpsert {
	u.Set(good.FieldLastBenefitAt, v)
	return u
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodUpsert) UpdateLastBenefitAt() *GoodUpsert {
	u.SetExcluded(good.FieldLastBenefitAt)
	return u
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodUpsert) AddLastBenefitAt(v uint32) *GoodUpsert {
	u.Add(good.FieldLastBenefitAt, v)
	return u
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodUpsert) ClearLastBenefitAt() *GoodUpsert {
	u.SetNull(good.FieldLastBenefitAt)
	return u
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodUpsert) SetBenefitTids(v []uuid.UUID) *GoodUpsert {
	u.Set(good.FieldBenefitTids, v)
	return u
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodUpsert) UpdateBenefitTids() *GoodUpsert {
	u.SetExcluded(good.FieldBenefitTids)
	return u
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodUpsert) ClearBenefitTids() *GoodUpsert {
	u.SetNull(good.FieldBenefitTids)
	return u
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodUpsert) SetNextBenefitStartAmount(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldNextBenefitStartAmount, v)
	return u
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodUpsert) UpdateNextBenefitStartAmount() *GoodUpsert {
	u.SetExcluded(good.FieldNextBenefitStartAmount)
	return u
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodUpsert) ClearNextBenefitStartAmount() *GoodUpsert {
	u.SetNull(good.FieldNextBenefitStartAmount)
	return u
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodUpsert) SetLastBenefitAmount(v decimal.Decimal) *GoodUpsert {
	u.Set(good.FieldLastBenefitAmount, v)
	return u
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodUpsert) UpdateLastBenefitAmount() *GoodUpsert {
	u.SetExcluded(good.FieldLastBenefitAmount)
	return u
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodUpsert) ClearLastBenefitAmount() *GoodUpsert {
	u.SetNull(good.FieldLastBenefitAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(good.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodUpsertOne) UpdateNewValues() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(good.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Good.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodUpsertOne) Ignore() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodUpsertOne) DoNothing() *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCreate.OnConflict
// documentation for more info.
func (u *GoodUpsertOne) Update(set func(*GoodUpsert)) *GoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodUpsertOne) SetCreatedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodUpsertOne) AddCreatedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateCreatedAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodUpsertOne) SetUpdatedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodUpsertOne) AddUpdatedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUpdatedAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodUpsertOne) SetDeletedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodUpsertOne) AddDeletedAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDeletedAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsertOne) SetDeviceInfoID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDeviceInfoID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *GoodUpsertOne) SetDurationDays(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *GoodUpsertOne) AddDurationDays(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDurationDays() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *GoodUpsertOne) ClearDurationDays() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationDays()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateCoinTypeID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsertOne) SetInheritFromGoodID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetInheritFromGoodID(v)
	})
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateInheritFromGoodID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateInheritFromGoodID()
	})
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsertOne) ClearInheritFromGoodID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearInheritFromGoodID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsertOne) SetVendorLocationID(v uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateVendorLocationID() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateVendorLocationID()
	})
}

// SetPrice sets the "price" field.
func (u *GoodUpsertOne) SetPrice(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdatePrice() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *GoodUpsertOne) ClearPrice() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearPrice()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsertOne) SetBenefitType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsertOne) ClearBenefitType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitType()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsertOne) SetGoodType(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateGoodType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsertOne) ClearGoodType() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearGoodType()
	})
}

// SetTitle sets the "title" field.
func (u *GoodUpsertOne) SetTitle(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateTitle() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsertOne) ClearTitle() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTitle()
	})
}

// SetUnit sets the "unit" field.
func (u *GoodUpsertOne) SetUnit(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsertOne) ClearUnit() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnit()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsertOne) SetUnitAmount(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitAmount(v)
	})
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsertOne) AddUnitAmount(v int32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsertOne) ClearUnitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitAmount()
	})
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (u *GoodUpsertOne) SetSupportCoinTypeIds(v []uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetSupportCoinTypeIds(v)
	})
}

// UpdateSupportCoinTypeIds sets the "support_coin_type_ids" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateSupportCoinTypeIds() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateSupportCoinTypeIds()
	})
}

// ClearSupportCoinTypeIds clears the value of the "support_coin_type_ids" field.
func (u *GoodUpsertOne) ClearSupportCoinTypeIds() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearSupportCoinTypeIds()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsertOne) SetDeliveryAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsertOne) AddDeliveryAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateDeliveryAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsertOne) ClearDeliveryAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsertOne) SetStartAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsertOne) AddStartAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateStartAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsertOne) ClearStartAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartAt()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsertOne) SetTestOnly(v bool) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateTestOnly() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsertOne) ClearTestOnly() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsertOne) SetBenefitIntervalHours(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsertOne) AddBenefitIntervalHours(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitIntervalHours() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsertOne) ClearBenefitIntervalHours() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodUpsertOne) SetBenefitState(v string) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitState() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodUpsertOne) ClearBenefitState() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitState()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodUpsertOne) SetLastBenefitAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodUpsertOne) AddLastBenefitAt(v uint32) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateLastBenefitAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodUpsertOne) ClearLastBenefitAt() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodUpsertOne) SetBenefitTids(v []uuid.UUID) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitTids(v)
	})
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateBenefitTids() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitTids()
	})
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodUpsertOne) ClearBenefitTids() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitTids()
	})
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodUpsertOne) SetNextBenefitStartAmount(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetNextBenefitStartAmount(v)
	})
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateNextBenefitStartAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateNextBenefitStartAmount()
	})
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodUpsertOne) ClearNextBenefitStartAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearNextBenefitStartAmount()
	})
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodUpsertOne) SetLastBenefitAmount(v decimal.Decimal) *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.SetLastBenefitAmount(v)
	})
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodUpsertOne) UpdateLastBenefitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateLastBenefitAmount()
	})
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodUpsertOne) ClearLastBenefitAmount() *GoodUpsertOne {
	return u.Update(func(s *GoodUpsert) {
		s.ClearLastBenefitAmount()
	})
}

// Exec executes the query.
func (u *GoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodUpsertOne.ID is not supported by MySQL driver. Use GoodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodCreateBulk is the builder for creating many Good entities in bulk.
type GoodCreateBulk struct {
	config
	builders []*GoodCreate
	conflict []sql.ConflictOption
}

// Save creates the Good entities in the database.
func (gcb *GoodCreateBulk) Save(ctx context.Context) ([]*Good, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Good, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GoodCreateBulk) SaveX(ctx context.Context) []*Good {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GoodCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GoodCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Good.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gcb *GoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodUpsertBulk {
	gcb.conflict = opts
	return &GoodUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gcb *GoodCreateBulk) OnConflictColumns(columns ...string) *GoodUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GoodUpsertBulk{
		create: gcb,
	}
}

// GoodUpsertBulk is the builder for "upsert"-ing
// a bulk of Good nodes.
type GoodUpsertBulk struct {
	create *GoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(good.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodUpsertBulk) UpdateNewValues() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(good.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Good.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodUpsertBulk) Ignore() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodUpsertBulk) DoNothing() *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCreateBulk.OnConflict
// documentation for more info.
func (u *GoodUpsertBulk) Update(set func(*GoodUpsert)) *GoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodUpsertBulk) SetCreatedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodUpsertBulk) AddCreatedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateCreatedAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodUpsertBulk) SetUpdatedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodUpsertBulk) AddUpdatedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUpdatedAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodUpsertBulk) SetDeletedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodUpsertBulk) AddDeletedAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDeletedAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeviceInfoID sets the "device_info_id" field.
func (u *GoodUpsertBulk) SetDeviceInfoID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeviceInfoID(v)
	})
}

// UpdateDeviceInfoID sets the "device_info_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDeviceInfoID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeviceInfoID()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *GoodUpsertBulk) SetDurationDays(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *GoodUpsertBulk) AddDurationDays(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDurationDays() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDurationDays()
	})
}

// ClearDurationDays clears the value of the "duration_days" field.
func (u *GoodUpsertBulk) ClearDurationDays() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDurationDays()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateCoinTypeID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (u *GoodUpsertBulk) SetInheritFromGoodID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetInheritFromGoodID(v)
	})
}

// UpdateInheritFromGoodID sets the "inherit_from_good_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateInheritFromGoodID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateInheritFromGoodID()
	})
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (u *GoodUpsertBulk) ClearInheritFromGoodID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearInheritFromGoodID()
	})
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (u *GoodUpsertBulk) SetVendorLocationID(v uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetVendorLocationID(v)
	})
}

// UpdateVendorLocationID sets the "vendor_location_id" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateVendorLocationID() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateVendorLocationID()
	})
}

// SetPrice sets the "price" field.
func (u *GoodUpsertBulk) SetPrice(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdatePrice() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *GoodUpsertBulk) ClearPrice() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearPrice()
	})
}

// SetBenefitType sets the "benefit_type" field.
func (u *GoodUpsertBulk) SetBenefitType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitType(v)
	})
}

// UpdateBenefitType sets the "benefit_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitType()
	})
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (u *GoodUpsertBulk) ClearBenefitType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitType()
	})
}

// SetGoodType sets the "good_type" field.
func (u *GoodUpsertBulk) SetGoodType(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetGoodType(v)
	})
}

// UpdateGoodType sets the "good_type" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateGoodType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateGoodType()
	})
}

// ClearGoodType clears the value of the "good_type" field.
func (u *GoodUpsertBulk) ClearGoodType() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearGoodType()
	})
}

// SetTitle sets the "title" field.
func (u *GoodUpsertBulk) SetTitle(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateTitle() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *GoodUpsertBulk) ClearTitle() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTitle()
	})
}

// SetUnit sets the "unit" field.
func (u *GoodUpsertBulk) SetUnit(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *GoodUpsertBulk) ClearUnit() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnit()
	})
}

// SetUnitAmount sets the "unit_amount" field.
func (u *GoodUpsertBulk) SetUnitAmount(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetUnitAmount(v)
	})
}

// AddUnitAmount adds v to the "unit_amount" field.
func (u *GoodUpsertBulk) AddUnitAmount(v int32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddUnitAmount(v)
	})
}

// UpdateUnitAmount sets the "unit_amount" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateUnitAmount()
	})
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (u *GoodUpsertBulk) ClearUnitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearUnitAmount()
	})
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (u *GoodUpsertBulk) SetSupportCoinTypeIds(v []uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetSupportCoinTypeIds(v)
	})
}

// UpdateSupportCoinTypeIds sets the "support_coin_type_ids" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateSupportCoinTypeIds() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateSupportCoinTypeIds()
	})
}

// ClearSupportCoinTypeIds clears the value of the "support_coin_type_ids" field.
func (u *GoodUpsertBulk) ClearSupportCoinTypeIds() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearSupportCoinTypeIds()
	})
}

// SetDeliveryAt sets the "delivery_at" field.
func (u *GoodUpsertBulk) SetDeliveryAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetDeliveryAt(v)
	})
}

// AddDeliveryAt adds v to the "delivery_at" field.
func (u *GoodUpsertBulk) AddDeliveryAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddDeliveryAt(v)
	})
}

// UpdateDeliveryAt sets the "delivery_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateDeliveryAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateDeliveryAt()
	})
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (u *GoodUpsertBulk) ClearDeliveryAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearDeliveryAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodUpsertBulk) SetStartAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodUpsertBulk) AddStartAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateStartAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodUpsertBulk) ClearStartAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearStartAt()
	})
}

// SetTestOnly sets the "test_only" field.
func (u *GoodUpsertBulk) SetTestOnly(v bool) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetTestOnly(v)
	})
}

// UpdateTestOnly sets the "test_only" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateTestOnly() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateTestOnly()
	})
}

// ClearTestOnly clears the value of the "test_only" field.
func (u *GoodUpsertBulk) ClearTestOnly() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearTestOnly()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) SetBenefitIntervalHours(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) AddBenefitIntervalHours(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitIntervalHours() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (u *GoodUpsertBulk) ClearBenefitIntervalHours() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitIntervalHours()
	})
}

// SetBenefitState sets the "benefit_state" field.
func (u *GoodUpsertBulk) SetBenefitState(v string) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitState(v)
	})
}

// UpdateBenefitState sets the "benefit_state" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitState() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitState()
	})
}

// ClearBenefitState clears the value of the "benefit_state" field.
func (u *GoodUpsertBulk) ClearBenefitState() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitState()
	})
}

// SetLastBenefitAt sets the "last_benefit_at" field.
func (u *GoodUpsertBulk) SetLastBenefitAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetLastBenefitAt(v)
	})
}

// AddLastBenefitAt adds v to the "last_benefit_at" field.
func (u *GoodUpsertBulk) AddLastBenefitAt(v uint32) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.AddLastBenefitAt(v)
	})
}

// UpdateLastBenefitAt sets the "last_benefit_at" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateLastBenefitAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateLastBenefitAt()
	})
}

// ClearLastBenefitAt clears the value of the "last_benefit_at" field.
func (u *GoodUpsertBulk) ClearLastBenefitAt() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearLastBenefitAt()
	})
}

// SetBenefitTids sets the "benefit_tids" field.
func (u *GoodUpsertBulk) SetBenefitTids(v []uuid.UUID) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetBenefitTids(v)
	})
}

// UpdateBenefitTids sets the "benefit_tids" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateBenefitTids() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateBenefitTids()
	})
}

// ClearBenefitTids clears the value of the "benefit_tids" field.
func (u *GoodUpsertBulk) ClearBenefitTids() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearBenefitTids()
	})
}

// SetNextBenefitStartAmount sets the "next_benefit_start_amount" field.
func (u *GoodUpsertBulk) SetNextBenefitStartAmount(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetNextBenefitStartAmount(v)
	})
}

// UpdateNextBenefitStartAmount sets the "next_benefit_start_amount" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateNextBenefitStartAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateNextBenefitStartAmount()
	})
}

// ClearNextBenefitStartAmount clears the value of the "next_benefit_start_amount" field.
func (u *GoodUpsertBulk) ClearNextBenefitStartAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearNextBenefitStartAmount()
	})
}

// SetLastBenefitAmount sets the "last_benefit_amount" field.
func (u *GoodUpsertBulk) SetLastBenefitAmount(v decimal.Decimal) *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.SetLastBenefitAmount(v)
	})
}

// UpdateLastBenefitAmount sets the "last_benefit_amount" field to the value that was provided on create.
func (u *GoodUpsertBulk) UpdateLastBenefitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.UpdateLastBenefitAmount()
	})
}

// ClearLastBenefitAmount clears the value of the "last_benefit_amount" field.
func (u *GoodUpsertBulk) ClearLastBenefitAmount() *GoodUpsertBulk {
	return u.Update(func(s *GoodUpsert) {
		s.ClearLastBenefitAmount()
	})
}

// Exec executes the query.
func (u *GoodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
