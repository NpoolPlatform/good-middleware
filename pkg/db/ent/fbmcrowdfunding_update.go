// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/fbmcrowdfunding"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FbmCrowdFundingUpdate is the builder for updating FbmCrowdFunding entities.
type FbmCrowdFundingUpdate struct {
	config
	hooks     []Hook
	mutation  *FbmCrowdFundingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FbmCrowdFundingUpdate builder.
func (fcfu *FbmCrowdFundingUpdate) Where(ps ...predicate.FbmCrowdFunding) *FbmCrowdFundingUpdate {
	fcfu.mutation.Where(ps...)
	return fcfu
}

// SetCreatedAt sets the "created_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetCreatedAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetCreatedAt()
	fcfu.mutation.SetCreatedAt(u)
	return fcfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableCreatedAt(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetCreatedAt(*u)
	}
	return fcfu
}

// AddCreatedAt adds u to the "created_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddCreatedAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddCreatedAt(u)
	return fcfu
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetUpdatedAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetUpdatedAt()
	fcfu.mutation.SetUpdatedAt(u)
	return fcfu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddUpdatedAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddUpdatedAt(u)
	return fcfu
}

// SetDeletedAt sets the "deleted_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetDeletedAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetDeletedAt()
	fcfu.mutation.SetDeletedAt(u)
	return fcfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDeletedAt(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetDeletedAt(*u)
	}
	return fcfu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddDeletedAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddDeletedAt(u)
	return fcfu
}

// SetEntID sets the "ent_id" field.
func (fcfu *FbmCrowdFundingUpdate) SetEntID(u uuid.UUID) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetEntID(u)
	return fcfu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableEntID(u *uuid.UUID) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetEntID(*u)
	}
	return fcfu
}

// SetGoodID sets the "good_id" field.
func (fcfu *FbmCrowdFundingUpdate) SetGoodID(u uuid.UUID) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetGoodID(u)
	return fcfu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableGoodID(u *uuid.UUID) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetGoodID(*u)
	}
	return fcfu
}

// ClearGoodID clears the value of the "good_id" field.
func (fcfu *FbmCrowdFundingUpdate) ClearGoodID() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearGoodID()
	return fcfu
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (fcfu *FbmCrowdFundingUpdate) SetMinDepositAmount(d decimal.Decimal) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetMinDepositAmount(d)
	return fcfu
}

// SetNillableMinDepositAmount sets the "min_deposit_amount" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableMinDepositAmount(d *decimal.Decimal) *FbmCrowdFundingUpdate {
	if d != nil {
		fcfu.SetMinDepositAmount(*d)
	}
	return fcfu
}

// ClearMinDepositAmount clears the value of the "min_deposit_amount" field.
func (fcfu *FbmCrowdFundingUpdate) ClearMinDepositAmount() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearMinDepositAmount()
	return fcfu
}

// SetDeliveryAt sets the "delivery_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetDeliveryAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetDeliveryAt()
	fcfu.mutation.SetDeliveryAt(u)
	return fcfu
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDeliveryAt(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetDeliveryAt(*u)
	}
	return fcfu
}

// AddDeliveryAt adds u to the "delivery_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddDeliveryAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddDeliveryAt(u)
	return fcfu
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (fcfu *FbmCrowdFundingUpdate) ClearDeliveryAt() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearDeliveryAt()
	return fcfu
}

// SetTargetAmount sets the "target_amount" field.
func (fcfu *FbmCrowdFundingUpdate) SetTargetAmount(d decimal.Decimal) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetTargetAmount(d)
	return fcfu
}

// SetNillableTargetAmount sets the "target_amount" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableTargetAmount(d *decimal.Decimal) *FbmCrowdFundingUpdate {
	if d != nil {
		fcfu.SetTargetAmount(*d)
	}
	return fcfu
}

// ClearTargetAmount clears the value of the "target_amount" field.
func (fcfu *FbmCrowdFundingUpdate) ClearTargetAmount() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearTargetAmount()
	return fcfu
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetDepositStartAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetDepositStartAt()
	fcfu.mutation.SetDepositStartAt(u)
	return fcfu
}

// SetNillableDepositStartAt sets the "deposit_start_at" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDepositStartAt(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetDepositStartAt(*u)
	}
	return fcfu
}

// AddDepositStartAt adds u to the "deposit_start_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddDepositStartAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddDepositStartAt(u)
	return fcfu
}

// ClearDepositStartAt clears the value of the "deposit_start_at" field.
func (fcfu *FbmCrowdFundingUpdate) ClearDepositStartAt() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearDepositStartAt()
	return fcfu
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (fcfu *FbmCrowdFundingUpdate) SetDepositEndAt(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetDepositEndAt()
	fcfu.mutation.SetDepositEndAt(u)
	return fcfu
}

// SetNillableDepositEndAt sets the "deposit_end_at" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDepositEndAt(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetDepositEndAt(*u)
	}
	return fcfu
}

// AddDepositEndAt adds u to the "deposit_end_at" field.
func (fcfu *FbmCrowdFundingUpdate) AddDepositEndAt(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddDepositEndAt(u)
	return fcfu
}

// ClearDepositEndAt clears the value of the "deposit_end_at" field.
func (fcfu *FbmCrowdFundingUpdate) ClearDepositEndAt() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearDepositEndAt()
	return fcfu
}

// SetContractAddress sets the "contract_address" field.
func (fcfu *FbmCrowdFundingUpdate) SetContractAddress(s string) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetContractAddress(s)
	return fcfu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableContractAddress(s *string) *FbmCrowdFundingUpdate {
	if s != nil {
		fcfu.SetContractAddress(*s)
	}
	return fcfu
}

// ClearContractAddress clears the value of the "contract_address" field.
func (fcfu *FbmCrowdFundingUpdate) ClearContractAddress() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearContractAddress()
	return fcfu
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (fcfu *FbmCrowdFundingUpdate) SetDepositCoinTypeID(u uuid.UUID) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetDepositCoinTypeID(u)
	return fcfu
}

// SetNillableDepositCoinTypeID sets the "deposit_coin_type_id" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDepositCoinTypeID(u *uuid.UUID) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetDepositCoinTypeID(*u)
	}
	return fcfu
}

// ClearDepositCoinTypeID clears the value of the "deposit_coin_type_id" field.
func (fcfu *FbmCrowdFundingUpdate) ClearDepositCoinTypeID() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearDepositCoinTypeID()
	return fcfu
}

// SetRedeemable sets the "redeemable" field.
func (fcfu *FbmCrowdFundingUpdate) SetRedeemable(b bool) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetRedeemable(b)
	return fcfu
}

// SetNillableRedeemable sets the "redeemable" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableRedeemable(b *bool) *FbmCrowdFundingUpdate {
	if b != nil {
		fcfu.SetRedeemable(*b)
	}
	return fcfu
}

// ClearRedeemable clears the value of the "redeemable" field.
func (fcfu *FbmCrowdFundingUpdate) ClearRedeemable() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearRedeemable()
	return fcfu
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (fcfu *FbmCrowdFundingUpdate) SetRedeemDelayHours(u uint32) *FbmCrowdFundingUpdate {
	fcfu.mutation.ResetRedeemDelayHours()
	fcfu.mutation.SetRedeemDelayHours(u)
	return fcfu
}

// SetNillableRedeemDelayHours sets the "redeem_delay_hours" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableRedeemDelayHours(u *uint32) *FbmCrowdFundingUpdate {
	if u != nil {
		fcfu.SetRedeemDelayHours(*u)
	}
	return fcfu
}

// AddRedeemDelayHours adds u to the "redeem_delay_hours" field.
func (fcfu *FbmCrowdFundingUpdate) AddRedeemDelayHours(u int32) *FbmCrowdFundingUpdate {
	fcfu.mutation.AddRedeemDelayHours(u)
	return fcfu
}

// ClearRedeemDelayHours clears the value of the "redeem_delay_hours" field.
func (fcfu *FbmCrowdFundingUpdate) ClearRedeemDelayHours() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearRedeemDelayHours()
	return fcfu
}

// SetDurationType sets the "duration_type" field.
func (fcfu *FbmCrowdFundingUpdate) SetDurationType(s string) *FbmCrowdFundingUpdate {
	fcfu.mutation.SetDurationType(s)
	return fcfu
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (fcfu *FbmCrowdFundingUpdate) SetNillableDurationType(s *string) *FbmCrowdFundingUpdate {
	if s != nil {
		fcfu.SetDurationType(*s)
	}
	return fcfu
}

// ClearDurationType clears the value of the "duration_type" field.
func (fcfu *FbmCrowdFundingUpdate) ClearDurationType() *FbmCrowdFundingUpdate {
	fcfu.mutation.ClearDurationType()
	return fcfu
}

// Mutation returns the FbmCrowdFundingMutation object of the builder.
func (fcfu *FbmCrowdFundingUpdate) Mutation() *FbmCrowdFundingMutation {
	return fcfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcfu *FbmCrowdFundingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fcfu.defaults(); err != nil {
		return 0, err
	}
	if len(fcfu.hooks) == 0 {
		affected, err = fcfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FbmCrowdFundingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fcfu.mutation = mutation
			affected, err = fcfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fcfu.hooks) - 1; i >= 0; i-- {
			if fcfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fcfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcfu *FbmCrowdFundingUpdate) SaveX(ctx context.Context) int {
	affected, err := fcfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcfu *FbmCrowdFundingUpdate) Exec(ctx context.Context) error {
	_, err := fcfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfu *FbmCrowdFundingUpdate) ExecX(ctx context.Context) {
	if err := fcfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcfu *FbmCrowdFundingUpdate) defaults() error {
	if _, ok := fcfu.mutation.UpdatedAt(); !ok {
		if fbmcrowdfunding.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fbmcrowdfunding.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fbmcrowdfunding.UpdateDefaultUpdatedAt()
		fcfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcfu *FbmCrowdFundingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FbmCrowdFundingUpdate {
	fcfu.modifiers = append(fcfu.modifiers, modifiers...)
	return fcfu
}

func (fcfu *FbmCrowdFundingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fbmcrowdfunding.Table,
			Columns: fbmcrowdfunding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fbmcrowdfunding.FieldID,
			},
		},
	}
	if ps := fcfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldCreatedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldCreatedAt,
		})
	}
	if value, ok := fcfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldUpdatedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldUpdatedAt,
		})
	}
	if value, ok := fcfu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeletedAt,
		})
	}
	if value, ok := fcfu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeletedAt,
		})
	}
	if value, ok := fcfu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldEntID,
		})
	}
	if value, ok := fcfu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldGoodID,
		})
	}
	if fcfu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fbmcrowdfunding.FieldGoodID,
		})
	}
	if value, ok := fcfu.mutation.MinDepositAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fbmcrowdfunding.FieldMinDepositAmount,
		})
	}
	if fcfu.mutation.MinDepositAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fbmcrowdfunding.FieldMinDepositAmount,
		})
	}
	if value, ok := fcfu.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if value, ok := fcfu.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if fcfu.mutation.DeliveryAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if value, ok := fcfu.mutation.TargetAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fbmcrowdfunding.FieldTargetAmount,
		})
	}
	if fcfu.mutation.TargetAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fbmcrowdfunding.FieldTargetAmount,
		})
	}
	if value, ok := fcfu.mutation.DepositStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if value, ok := fcfu.mutation.AddedDepositStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if fcfu.mutation.DepositStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if value, ok := fcfu.mutation.DepositEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if value, ok := fcfu.mutation.AddedDepositEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if fcfu.mutation.DepositEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if value, ok := fcfu.mutation.ContractAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fbmcrowdfunding.FieldContractAddress,
		})
	}
	if fcfu.mutation.ContractAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fbmcrowdfunding.FieldContractAddress,
		})
	}
	if value, ok := fcfu.mutation.DepositCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositCoinTypeID,
		})
	}
	if fcfu.mutation.DepositCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fbmcrowdfunding.FieldDepositCoinTypeID,
		})
	}
	if value, ok := fcfu.mutation.Redeemable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemable,
		})
	}
	if fcfu.mutation.RedeemableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fbmcrowdfunding.FieldRedeemable,
		})
	}
	if value, ok := fcfu.mutation.RedeemDelayHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if value, ok := fcfu.mutation.AddedRedeemDelayHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if fcfu.mutation.RedeemDelayHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if value, ok := fcfu.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fbmcrowdfunding.FieldDurationType,
		})
	}
	if fcfu.mutation.DurationTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fbmcrowdfunding.FieldDurationType,
		})
	}
	_spec.Modifiers = fcfu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fcfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fbmcrowdfunding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FbmCrowdFundingUpdateOne is the builder for updating a single FbmCrowdFunding entity.
type FbmCrowdFundingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FbmCrowdFundingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetCreatedAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetCreatedAt()
	fcfuo.mutation.SetCreatedAt(u)
	return fcfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableCreatedAt(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetCreatedAt(*u)
	}
	return fcfuo
}

// AddCreatedAt adds u to the "created_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddCreatedAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddCreatedAt(u)
	return fcfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetUpdatedAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetUpdatedAt()
	fcfuo.mutation.SetUpdatedAt(u)
	return fcfuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddUpdatedAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddUpdatedAt(u)
	return fcfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDeletedAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetDeletedAt()
	fcfuo.mutation.SetDeletedAt(u)
	return fcfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDeletedAt(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetDeletedAt(*u)
	}
	return fcfuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddDeletedAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddDeletedAt(u)
	return fcfuo
}

// SetEntID sets the "ent_id" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetEntID(u uuid.UUID) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetEntID(u)
	return fcfuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableEntID(u *uuid.UUID) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetEntID(*u)
	}
	return fcfuo
}

// SetGoodID sets the "good_id" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetGoodID(u uuid.UUID) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetGoodID(u)
	return fcfuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableGoodID(u *uuid.UUID) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetGoodID(*u)
	}
	return fcfuo
}

// ClearGoodID clears the value of the "good_id" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearGoodID() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearGoodID()
	return fcfuo
}

// SetMinDepositAmount sets the "min_deposit_amount" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetMinDepositAmount(d decimal.Decimal) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetMinDepositAmount(d)
	return fcfuo
}

// SetNillableMinDepositAmount sets the "min_deposit_amount" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableMinDepositAmount(d *decimal.Decimal) *FbmCrowdFundingUpdateOne {
	if d != nil {
		fcfuo.SetMinDepositAmount(*d)
	}
	return fcfuo
}

// ClearMinDepositAmount clears the value of the "min_deposit_amount" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearMinDepositAmount() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearMinDepositAmount()
	return fcfuo
}

// SetDeliveryAt sets the "delivery_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDeliveryAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetDeliveryAt()
	fcfuo.mutation.SetDeliveryAt(u)
	return fcfuo
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDeliveryAt(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetDeliveryAt(*u)
	}
	return fcfuo
}

// AddDeliveryAt adds u to the "delivery_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddDeliveryAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddDeliveryAt(u)
	return fcfuo
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearDeliveryAt() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearDeliveryAt()
	return fcfuo
}

// SetTargetAmount sets the "target_amount" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetTargetAmount(d decimal.Decimal) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetTargetAmount(d)
	return fcfuo
}

// SetNillableTargetAmount sets the "target_amount" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableTargetAmount(d *decimal.Decimal) *FbmCrowdFundingUpdateOne {
	if d != nil {
		fcfuo.SetTargetAmount(*d)
	}
	return fcfuo
}

// ClearTargetAmount clears the value of the "target_amount" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearTargetAmount() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearTargetAmount()
	return fcfuo
}

// SetDepositStartAt sets the "deposit_start_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDepositStartAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetDepositStartAt()
	fcfuo.mutation.SetDepositStartAt(u)
	return fcfuo
}

// SetNillableDepositStartAt sets the "deposit_start_at" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDepositStartAt(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetDepositStartAt(*u)
	}
	return fcfuo
}

// AddDepositStartAt adds u to the "deposit_start_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddDepositStartAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddDepositStartAt(u)
	return fcfuo
}

// ClearDepositStartAt clears the value of the "deposit_start_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearDepositStartAt() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearDepositStartAt()
	return fcfuo
}

// SetDepositEndAt sets the "deposit_end_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDepositEndAt(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetDepositEndAt()
	fcfuo.mutation.SetDepositEndAt(u)
	return fcfuo
}

// SetNillableDepositEndAt sets the "deposit_end_at" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDepositEndAt(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetDepositEndAt(*u)
	}
	return fcfuo
}

// AddDepositEndAt adds u to the "deposit_end_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddDepositEndAt(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddDepositEndAt(u)
	return fcfuo
}

// ClearDepositEndAt clears the value of the "deposit_end_at" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearDepositEndAt() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearDepositEndAt()
	return fcfuo
}

// SetContractAddress sets the "contract_address" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetContractAddress(s string) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetContractAddress(s)
	return fcfuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableContractAddress(s *string) *FbmCrowdFundingUpdateOne {
	if s != nil {
		fcfuo.SetContractAddress(*s)
	}
	return fcfuo
}

// ClearContractAddress clears the value of the "contract_address" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearContractAddress() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearContractAddress()
	return fcfuo
}

// SetDepositCoinTypeID sets the "deposit_coin_type_id" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDepositCoinTypeID(u uuid.UUID) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetDepositCoinTypeID(u)
	return fcfuo
}

// SetNillableDepositCoinTypeID sets the "deposit_coin_type_id" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDepositCoinTypeID(u *uuid.UUID) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetDepositCoinTypeID(*u)
	}
	return fcfuo
}

// ClearDepositCoinTypeID clears the value of the "deposit_coin_type_id" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearDepositCoinTypeID() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearDepositCoinTypeID()
	return fcfuo
}

// SetRedeemable sets the "redeemable" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetRedeemable(b bool) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetRedeemable(b)
	return fcfuo
}

// SetNillableRedeemable sets the "redeemable" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableRedeemable(b *bool) *FbmCrowdFundingUpdateOne {
	if b != nil {
		fcfuo.SetRedeemable(*b)
	}
	return fcfuo
}

// ClearRedeemable clears the value of the "redeemable" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearRedeemable() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearRedeemable()
	return fcfuo
}

// SetRedeemDelayHours sets the "redeem_delay_hours" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetRedeemDelayHours(u uint32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ResetRedeemDelayHours()
	fcfuo.mutation.SetRedeemDelayHours(u)
	return fcfuo
}

// SetNillableRedeemDelayHours sets the "redeem_delay_hours" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableRedeemDelayHours(u *uint32) *FbmCrowdFundingUpdateOne {
	if u != nil {
		fcfuo.SetRedeemDelayHours(*u)
	}
	return fcfuo
}

// AddRedeemDelayHours adds u to the "redeem_delay_hours" field.
func (fcfuo *FbmCrowdFundingUpdateOne) AddRedeemDelayHours(u int32) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.AddRedeemDelayHours(u)
	return fcfuo
}

// ClearRedeemDelayHours clears the value of the "redeem_delay_hours" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearRedeemDelayHours() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearRedeemDelayHours()
	return fcfuo
}

// SetDurationType sets the "duration_type" field.
func (fcfuo *FbmCrowdFundingUpdateOne) SetDurationType(s string) *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.SetDurationType(s)
	return fcfuo
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (fcfuo *FbmCrowdFundingUpdateOne) SetNillableDurationType(s *string) *FbmCrowdFundingUpdateOne {
	if s != nil {
		fcfuo.SetDurationType(*s)
	}
	return fcfuo
}

// ClearDurationType clears the value of the "duration_type" field.
func (fcfuo *FbmCrowdFundingUpdateOne) ClearDurationType() *FbmCrowdFundingUpdateOne {
	fcfuo.mutation.ClearDurationType()
	return fcfuo
}

// Mutation returns the FbmCrowdFundingMutation object of the builder.
func (fcfuo *FbmCrowdFundingUpdateOne) Mutation() *FbmCrowdFundingMutation {
	return fcfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcfuo *FbmCrowdFundingUpdateOne) Select(field string, fields ...string) *FbmCrowdFundingUpdateOne {
	fcfuo.fields = append([]string{field}, fields...)
	return fcfuo
}

// Save executes the query and returns the updated FbmCrowdFunding entity.
func (fcfuo *FbmCrowdFundingUpdateOne) Save(ctx context.Context) (*FbmCrowdFunding, error) {
	var (
		err  error
		node *FbmCrowdFunding
	)
	if err := fcfuo.defaults(); err != nil {
		return nil, err
	}
	if len(fcfuo.hooks) == 0 {
		node, err = fcfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FbmCrowdFundingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fcfuo.mutation = mutation
			node, err = fcfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fcfuo.hooks) - 1; i >= 0; i-- {
			if fcfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fcfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FbmCrowdFunding)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FbmCrowdFundingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcfuo *FbmCrowdFundingUpdateOne) SaveX(ctx context.Context) *FbmCrowdFunding {
	node, err := fcfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcfuo *FbmCrowdFundingUpdateOne) Exec(ctx context.Context) error {
	_, err := fcfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfuo *FbmCrowdFundingUpdateOne) ExecX(ctx context.Context) {
	if err := fcfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcfuo *FbmCrowdFundingUpdateOne) defaults() error {
	if _, ok := fcfuo.mutation.UpdatedAt(); !ok {
		if fbmcrowdfunding.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fbmcrowdfunding.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fbmcrowdfunding.UpdateDefaultUpdatedAt()
		fcfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fcfuo *FbmCrowdFundingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FbmCrowdFundingUpdateOne {
	fcfuo.modifiers = append(fcfuo.modifiers, modifiers...)
	return fcfuo
}

func (fcfuo *FbmCrowdFundingUpdateOne) sqlSave(ctx context.Context) (_node *FbmCrowdFunding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fbmcrowdfunding.Table,
			Columns: fbmcrowdfunding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fbmcrowdfunding.FieldID,
			},
		},
	}
	id, ok := fcfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FbmCrowdFunding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fbmcrowdfunding.FieldID)
		for _, f := range fields {
			if !fbmcrowdfunding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fbmcrowdfunding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldCreatedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldCreatedAt,
		})
	}
	if value, ok := fcfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldUpdatedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldUpdatedAt,
		})
	}
	if value, ok := fcfuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeletedAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeletedAt,
		})
	}
	if value, ok := fcfuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldEntID,
		})
	}
	if value, ok := fcfuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldGoodID,
		})
	}
	if fcfuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fbmcrowdfunding.FieldGoodID,
		})
	}
	if value, ok := fcfuo.mutation.MinDepositAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fbmcrowdfunding.FieldMinDepositAmount,
		})
	}
	if fcfuo.mutation.MinDepositAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fbmcrowdfunding.FieldMinDepositAmount,
		})
	}
	if value, ok := fcfuo.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if fcfuo.mutation.DeliveryAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDeliveryAt,
		})
	}
	if value, ok := fcfuo.mutation.TargetAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fbmcrowdfunding.FieldTargetAmount,
		})
	}
	if fcfuo.mutation.TargetAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fbmcrowdfunding.FieldTargetAmount,
		})
	}
	if value, ok := fcfuo.mutation.DepositStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedDepositStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if fcfuo.mutation.DepositStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDepositStartAt,
		})
	}
	if value, ok := fcfuo.mutation.DepositEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if value, ok := fcfuo.mutation.AddedDepositEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if fcfuo.mutation.DepositEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldDepositEndAt,
		})
	}
	if value, ok := fcfuo.mutation.ContractAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fbmcrowdfunding.FieldContractAddress,
		})
	}
	if fcfuo.mutation.ContractAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fbmcrowdfunding.FieldContractAddress,
		})
	}
	if value, ok := fcfuo.mutation.DepositCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fbmcrowdfunding.FieldDepositCoinTypeID,
		})
	}
	if fcfuo.mutation.DepositCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fbmcrowdfunding.FieldDepositCoinTypeID,
		})
	}
	if value, ok := fcfuo.mutation.Redeemable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemable,
		})
	}
	if fcfuo.mutation.RedeemableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fbmcrowdfunding.FieldRedeemable,
		})
	}
	if value, ok := fcfuo.mutation.RedeemDelayHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if value, ok := fcfuo.mutation.AddedRedeemDelayHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if fcfuo.mutation.RedeemDelayHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fbmcrowdfunding.FieldRedeemDelayHours,
		})
	}
	if value, ok := fcfuo.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fbmcrowdfunding.FieldDurationType,
		})
	}
	if fcfuo.mutation.DurationTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fbmcrowdfunding.FieldDurationType,
		})
	}
	_spec.Modifiers = fcfuo.modifiers
	_node = &FbmCrowdFunding{config: fcfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fbmcrowdfunding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
