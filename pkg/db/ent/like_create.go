// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/like"
	"github.com/google/uuid"
)

// LikeCreate is the builder for creating a Like entity.
type LikeCreate struct {
	config
	mutation *LikeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lc *LikeCreate) SetCreatedAt(u uint32) *LikeCreate {
	lc.mutation.SetCreatedAt(u)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LikeCreate) SetNillableCreatedAt(u *uint32) *LikeCreate {
	if u != nil {
		lc.SetCreatedAt(*u)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LikeCreate) SetUpdatedAt(u uint32) *LikeCreate {
	lc.mutation.SetUpdatedAt(u)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LikeCreate) SetNillableUpdatedAt(u *uint32) *LikeCreate {
	if u != nil {
		lc.SetUpdatedAt(*u)
	}
	return lc
}

// SetDeletedAt sets the "deleted_at" field.
func (lc *LikeCreate) SetDeletedAt(u uint32) *LikeCreate {
	lc.mutation.SetDeletedAt(u)
	return lc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lc *LikeCreate) SetNillableDeletedAt(u *uint32) *LikeCreate {
	if u != nil {
		lc.SetDeletedAt(*u)
	}
	return lc
}

// SetAppID sets the "app_id" field.
func (lc *LikeCreate) SetAppID(u uuid.UUID) *LikeCreate {
	lc.mutation.SetAppID(u)
	return lc
}

// SetUserID sets the "user_id" field.
func (lc *LikeCreate) SetUserID(u uuid.UUID) *LikeCreate {
	lc.mutation.SetUserID(u)
	return lc
}

// SetGoodID sets the "good_id" field.
func (lc *LikeCreate) SetGoodID(u uuid.UUID) *LikeCreate {
	lc.mutation.SetGoodID(u)
	return lc
}

// SetAppGoodID sets the "app_good_id" field.
func (lc *LikeCreate) SetAppGoodID(u uuid.UUID) *LikeCreate {
	lc.mutation.SetAppGoodID(u)
	return lc
}

// SetLike sets the "like" field.
func (lc *LikeCreate) SetLike(b bool) *LikeCreate {
	lc.mutation.SetLike(b)
	return lc
}

// SetID sets the "id" field.
func (lc *LikeCreate) SetID(u uuid.UUID) *LikeCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LikeCreate) SetNillableID(u *uuid.UUID) *LikeCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// Mutation returns the LikeMutation object of the builder.
func (lc *LikeCreate) Mutation() *LikeMutation {
	return lc.mutation
}

// Save creates the Like in the database.
func (lc *LikeCreate) Save(ctx context.Context) (*Like, error) {
	var (
		err  error
		node *Like
	)
	if err := lc.defaults(); err != nil {
		return nil, err
	}
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Like)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LikeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LikeCreate) SaveX(ctx context.Context) *Like {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LikeCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LikeCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LikeCreate) defaults() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		if like.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized like.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := like.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		if like.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized like.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := like.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		if like.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized like.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := like.DefaultDeletedAt()
		lc.mutation.SetDeletedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		if like.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized like.DefaultID (forgotten import ent/runtime?)")
		}
		v := like.DefaultID()
		lc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lc *LikeCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Like.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Like.updated_at"`)}
	}
	if _, ok := lc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Like.deleted_at"`)}
	}
	if _, ok := lc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Like.app_id"`)}
	}
	if _, ok := lc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Like.user_id"`)}
	}
	if _, ok := lc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "Like.good_id"`)}
	}
	if _, ok := lc.mutation.AppGoodID(); !ok {
		return &ValidationError{Name: "app_good_id", err: errors.New(`ent: missing required field "Like.app_good_id"`)}
	}
	if _, ok := lc.mutation.Like(); !ok {
		return &ValidationError{Name: "like", err: errors.New(`ent: missing required field "Like.like"`)}
	}
	return nil
}

func (lc *LikeCreate) sqlSave(ctx context.Context) (*Like, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lc *LikeCreate) createSpec() (*Like, *sqlgraph.CreateSpec) {
	var (
		_node = &Like{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: like.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: like.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: like.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: like.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: like.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := lc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: like.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := lc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: like.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := lc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: like.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := lc.mutation.AppGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: like.FieldAppGoodID,
		})
		_node.AppGoodID = value
	}
	if value, ok := lc.mutation.Like(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: like.FieldLike,
		})
		_node.Like = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Like.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LikeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lc *LikeCreate) OnConflict(opts ...sql.ConflictOption) *LikeUpsertOne {
	lc.conflict = opts
	return &LikeUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Like.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lc *LikeCreate) OnConflictColumns(columns ...string) *LikeUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LikeUpsertOne{
		create: lc,
	}
}

type (
	// LikeUpsertOne is the builder for "upsert"-ing
	//  one Like node.
	LikeUpsertOne struct {
		create *LikeCreate
	}

	// LikeUpsert is the "OnConflict" setter.
	LikeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LikeUpsert) SetCreatedAt(v uint32) *LikeUpsert {
	u.Set(like.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LikeUpsert) UpdateCreatedAt() *LikeUpsert {
	u.SetExcluded(like.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LikeUpsert) AddCreatedAt(v uint32) *LikeUpsert {
	u.Add(like.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LikeUpsert) SetUpdatedAt(v uint32) *LikeUpsert {
	u.Set(like.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LikeUpsert) UpdateUpdatedAt() *LikeUpsert {
	u.SetExcluded(like.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LikeUpsert) AddUpdatedAt(v uint32) *LikeUpsert {
	u.Add(like.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LikeUpsert) SetDeletedAt(v uint32) *LikeUpsert {
	u.Set(like.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LikeUpsert) UpdateDeletedAt() *LikeUpsert {
	u.SetExcluded(like.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LikeUpsert) AddDeletedAt(v uint32) *LikeUpsert {
	u.Add(like.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *LikeUpsert) SetAppID(v uuid.UUID) *LikeUpsert {
	u.Set(like.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LikeUpsert) UpdateAppID() *LikeUpsert {
	u.SetExcluded(like.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *LikeUpsert) SetUserID(v uuid.UUID) *LikeUpsert {
	u.Set(like.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LikeUpsert) UpdateUserID() *LikeUpsert {
	u.SetExcluded(like.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *LikeUpsert) SetGoodID(v uuid.UUID) *LikeUpsert {
	u.Set(like.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *LikeUpsert) UpdateGoodID() *LikeUpsert {
	u.SetExcluded(like.FieldGoodID)
	return u
}

// SetAppGoodID sets the "app_good_id" field.
func (u *LikeUpsert) SetAppGoodID(v uuid.UUID) *LikeUpsert {
	u.Set(like.FieldAppGoodID, v)
	return u
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *LikeUpsert) UpdateAppGoodID() *LikeUpsert {
	u.SetExcluded(like.FieldAppGoodID)
	return u
}

// SetLike sets the "like" field.
func (u *LikeUpsert) SetLike(v bool) *LikeUpsert {
	u.Set(like.FieldLike, v)
	return u
}

// UpdateLike sets the "like" field to the value that was provided on create.
func (u *LikeUpsert) UpdateLike() *LikeUpsert {
	u.SetExcluded(like.FieldLike)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Like.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(like.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LikeUpsertOne) UpdateNewValues() *LikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(like.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Like.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LikeUpsertOne) Ignore() *LikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LikeUpsertOne) DoNothing() *LikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LikeCreate.OnConflict
// documentation for more info.
func (u *LikeUpsertOne) Update(set func(*LikeUpsert)) *LikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LikeUpsertOne) SetCreatedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LikeUpsertOne) AddCreatedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateCreatedAt() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LikeUpsertOne) SetUpdatedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LikeUpsertOne) AddUpdatedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateUpdatedAt() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LikeUpsertOne) SetDeletedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LikeUpsertOne) AddDeletedAt(v uint32) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateDeletedAt() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *LikeUpsertOne) SetAppID(v uuid.UUID) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateAppID() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LikeUpsertOne) SetUserID(v uuid.UUID) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateUserID() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *LikeUpsertOne) SetGoodID(v uuid.UUID) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateGoodID() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *LikeUpsertOne) SetAppGoodID(v uuid.UUID) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateAppGoodID() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateAppGoodID()
	})
}

// SetLike sets the "like" field.
func (u *LikeUpsertOne) SetLike(v bool) *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.SetLike(v)
	})
}

// UpdateLike sets the "like" field to the value that was provided on create.
func (u *LikeUpsertOne) UpdateLike() *LikeUpsertOne {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateLike()
	})
}

// Exec executes the query.
func (u *LikeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LikeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LikeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LikeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LikeUpsertOne.ID is not supported by MySQL driver. Use LikeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LikeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LikeCreateBulk is the builder for creating many Like entities in bulk.
type LikeCreateBulk struct {
	config
	builders []*LikeCreate
	conflict []sql.ConflictOption
}

// Save creates the Like entities in the database.
func (lcb *LikeCreateBulk) Save(ctx context.Context) ([]*Like, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Like, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LikeCreateBulk) SaveX(ctx context.Context) []*Like {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LikeCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LikeCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Like.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LikeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lcb *LikeCreateBulk) OnConflict(opts ...sql.ConflictOption) *LikeUpsertBulk {
	lcb.conflict = opts
	return &LikeUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Like.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcb *LikeCreateBulk) OnConflictColumns(columns ...string) *LikeUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LikeUpsertBulk{
		create: lcb,
	}
}

// LikeUpsertBulk is the builder for "upsert"-ing
// a bulk of Like nodes.
type LikeUpsertBulk struct {
	create *LikeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Like.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(like.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LikeUpsertBulk) UpdateNewValues() *LikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(like.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Like.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LikeUpsertBulk) Ignore() *LikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LikeUpsertBulk) DoNothing() *LikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LikeCreateBulk.OnConflict
// documentation for more info.
func (u *LikeUpsertBulk) Update(set func(*LikeUpsert)) *LikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LikeUpsertBulk) SetCreatedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LikeUpsertBulk) AddCreatedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateCreatedAt() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LikeUpsertBulk) SetUpdatedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LikeUpsertBulk) AddUpdatedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateUpdatedAt() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LikeUpsertBulk) SetDeletedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LikeUpsertBulk) AddDeletedAt(v uint32) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateDeletedAt() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *LikeUpsertBulk) SetAppID(v uuid.UUID) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateAppID() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *LikeUpsertBulk) SetUserID(v uuid.UUID) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateUserID() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *LikeUpsertBulk) SetGoodID(v uuid.UUID) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateGoodID() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppGoodID sets the "app_good_id" field.
func (u *LikeUpsertBulk) SetAppGoodID(v uuid.UUID) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetAppGoodID(v)
	})
}

// UpdateAppGoodID sets the "app_good_id" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateAppGoodID() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateAppGoodID()
	})
}

// SetLike sets the "like" field.
func (u *LikeUpsertBulk) SetLike(v bool) *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.SetLike(v)
	})
}

// UpdateLike sets the "like" field to the value that was provided on create.
func (u *LikeUpsertBulk) UpdateLike() *LikeUpsertBulk {
	return u.Update(func(s *LikeUpsert) {
		s.UpdateLike()
	})
}

// Exec executes the query.
func (u *LikeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LikeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LikeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LikeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
