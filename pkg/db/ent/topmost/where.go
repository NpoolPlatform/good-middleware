// Code generated by ent, DO NOT EDIT.

package topmost

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// TopMostType applies equality check predicate on the "top_most_type" field. It's identical to TopMostTypeEQ.
func TopMostType(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopMostType), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// ThresholdCredits applies equality check predicate on the "threshold_credits" field. It's identical to ThresholdCreditsEQ.
func ThresholdCredits(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdCredits), v))
	})
}

// RegisterElapsedSeconds applies equality check predicate on the "register_elapsed_seconds" field. It's identical to RegisterElapsedSecondsEQ.
func RegisterElapsedSeconds(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// ThresholdPurchases applies equality check predicate on the "threshold_purchases" field. It's identical to ThresholdPurchasesEQ.
func ThresholdPurchases(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPaymentAmount applies equality check predicate on the "threshold_payment_amount" field. It's identical to ThresholdPaymentAmountEQ.
func ThresholdPaymentAmount(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdPaymentAmount), v))
	})
}

// KycMust applies equality check predicate on the "kyc_must" field. It's identical to KycMustEQ.
func KycMust(v bool) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycMust), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// TopMostTypeEQ applies the EQ predicate on the "top_most_type" field.
func TopMostTypeEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeNEQ applies the NEQ predicate on the "top_most_type" field.
func TopMostTypeNEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeIn applies the In predicate on the "top_most_type" field.
func TopMostTypeIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTopMostType), v...))
	})
}

// TopMostTypeNotIn applies the NotIn predicate on the "top_most_type" field.
func TopMostTypeNotIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTopMostType), v...))
	})
}

// TopMostTypeGT applies the GT predicate on the "top_most_type" field.
func TopMostTypeGT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeGTE applies the GTE predicate on the "top_most_type" field.
func TopMostTypeGTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeLT applies the LT predicate on the "top_most_type" field.
func TopMostTypeLT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeLTE applies the LTE predicate on the "top_most_type" field.
func TopMostTypeLTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeContains applies the Contains predicate on the "top_most_type" field.
func TopMostTypeContains(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeHasPrefix applies the HasPrefix predicate on the "top_most_type" field.
func TopMostTypeHasPrefix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeHasSuffix applies the HasSuffix predicate on the "top_most_type" field.
func TopMostTypeHasSuffix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeIsNil applies the IsNil predicate on the "top_most_type" field.
func TopMostTypeIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTopMostType)))
	})
}

// TopMostTypeNotNil applies the NotNil predicate on the "top_most_type" field.
func TopMostTypeNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTopMostType)))
	})
}

// TopMostTypeEqualFold applies the EqualFold predicate on the "top_most_type" field.
func TopMostTypeEqualFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopMostType), v))
	})
}

// TopMostTypeContainsFold applies the ContainsFold predicate on the "top_most_type" field.
func TopMostTypeContainsFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopMostType), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMessage)))
	})
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMessage)))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// PostersIsNil applies the IsNil predicate on the "posters" field.
func PostersIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPosters)))
	})
}

// PostersNotNil applies the NotNil predicate on the "posters" field.
func PostersNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPosters)))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// ThresholdCreditsEQ applies the EQ predicate on the "threshold_credits" field.
func ThresholdCreditsEQ(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsNEQ applies the NEQ predicate on the "threshold_credits" field.
func ThresholdCreditsNEQ(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsIn applies the In predicate on the "threshold_credits" field.
func ThresholdCreditsIn(vs ...decimal.Decimal) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThresholdCredits), v...))
	})
}

// ThresholdCreditsNotIn applies the NotIn predicate on the "threshold_credits" field.
func ThresholdCreditsNotIn(vs ...decimal.Decimal) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThresholdCredits), v...))
	})
}

// ThresholdCreditsGT applies the GT predicate on the "threshold_credits" field.
func ThresholdCreditsGT(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsGTE applies the GTE predicate on the "threshold_credits" field.
func ThresholdCreditsGTE(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsLT applies the LT predicate on the "threshold_credits" field.
func ThresholdCreditsLT(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsLTE applies the LTE predicate on the "threshold_credits" field.
func ThresholdCreditsLTE(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThresholdCredits), v))
	})
}

// ThresholdCreditsIsNil applies the IsNil predicate on the "threshold_credits" field.
func ThresholdCreditsIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThresholdCredits)))
	})
}

// ThresholdCreditsNotNil applies the NotNil predicate on the "threshold_credits" field.
func ThresholdCreditsNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThresholdCredits)))
	})
}

// RegisterElapsedSecondsEQ applies the EQ predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsNEQ applies the NEQ predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsIn applies the In predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegisterElapsedSeconds), v...))
	})
}

// RegisterElapsedSecondsNotIn applies the NotIn predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegisterElapsedSeconds), v...))
	})
}

// RegisterElapsedSecondsGT applies the GT predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsGTE applies the GTE predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsLT applies the LT predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsLTE applies the LTE predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisterElapsedSeconds), v))
	})
}

// RegisterElapsedSecondsIsNil applies the IsNil predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegisterElapsedSeconds)))
	})
}

// RegisterElapsedSecondsNotNil applies the NotNil predicate on the "register_elapsed_seconds" field.
func RegisterElapsedSecondsNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegisterElapsedSeconds)))
	})
}

// ThresholdPurchasesEQ applies the EQ predicate on the "threshold_purchases" field.
func ThresholdPurchasesEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesNEQ applies the NEQ predicate on the "threshold_purchases" field.
func ThresholdPurchasesNEQ(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesIn applies the In predicate on the "threshold_purchases" field.
func ThresholdPurchasesIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThresholdPurchases), v...))
	})
}

// ThresholdPurchasesNotIn applies the NotIn predicate on the "threshold_purchases" field.
func ThresholdPurchasesNotIn(vs ...uint32) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThresholdPurchases), v...))
	})
}

// ThresholdPurchasesGT applies the GT predicate on the "threshold_purchases" field.
func ThresholdPurchasesGT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesGTE applies the GTE predicate on the "threshold_purchases" field.
func ThresholdPurchasesGTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesLT applies the LT predicate on the "threshold_purchases" field.
func ThresholdPurchasesLT(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesLTE applies the LTE predicate on the "threshold_purchases" field.
func ThresholdPurchasesLTE(v uint32) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThresholdPurchases), v))
	})
}

// ThresholdPurchasesIsNil applies the IsNil predicate on the "threshold_purchases" field.
func ThresholdPurchasesIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThresholdPurchases)))
	})
}

// ThresholdPurchasesNotNil applies the NotNil predicate on the "threshold_purchases" field.
func ThresholdPurchasesNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThresholdPurchases)))
	})
}

// ThresholdPaymentAmountEQ applies the EQ predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountEQ(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountNEQ applies the NEQ predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountNEQ(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountIn applies the In predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountIn(vs ...decimal.Decimal) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThresholdPaymentAmount), v...))
	})
}

// ThresholdPaymentAmountNotIn applies the NotIn predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountNotIn(vs ...decimal.Decimal) predicate.TopMost {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThresholdPaymentAmount), v...))
	})
}

// ThresholdPaymentAmountGT applies the GT predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountGT(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountGTE applies the GTE predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountGTE(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountLT applies the LT predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountLT(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountLTE applies the LTE predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountLTE(v decimal.Decimal) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThresholdPaymentAmount), v))
	})
}

// ThresholdPaymentAmountIsNil applies the IsNil predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThresholdPaymentAmount)))
	})
}

// ThresholdPaymentAmountNotNil applies the NotNil predicate on the "threshold_payment_amount" field.
func ThresholdPaymentAmountNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThresholdPaymentAmount)))
	})
}

// KycMustEQ applies the EQ predicate on the "kyc_must" field.
func KycMustEQ(v bool) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycMust), v))
	})
}

// KycMustNEQ applies the NEQ predicate on the "kyc_must" field.
func KycMustNEQ(v bool) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKycMust), v))
	})
}

// KycMustIsNil applies the IsNil predicate on the "kyc_must" field.
func KycMustIsNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKycMust)))
	})
}

// KycMustNotNil applies the NotNil predicate on the "kyc_must" field.
func KycMustNotNil() predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKycMust)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TopMost) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TopMost) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TopMost) predicate.TopMost {
	return predicate.TopMost(func(s *sql.Selector) {
		p(s.Not())
	})
}
