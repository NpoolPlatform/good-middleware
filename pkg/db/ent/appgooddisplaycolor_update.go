// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgooddisplaycolor"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppGoodDisplayColorUpdate is the builder for updating AppGoodDisplayColor entities.
type AppGoodDisplayColorUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodDisplayColorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodDisplayColorUpdate builder.
func (agdcu *AppGoodDisplayColorUpdate) Where(ps ...predicate.AppGoodDisplayColor) *AppGoodDisplayColorUpdate {
	agdcu.mutation.Where(ps...)
	return agdcu
}

// SetCreatedAt sets the "created_at" field.
func (agdcu *AppGoodDisplayColorUpdate) SetCreatedAt(u uint32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.ResetCreatedAt()
	agdcu.mutation.SetCreatedAt(u)
	return agdcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableCreatedAt(u *uint32) *AppGoodDisplayColorUpdate {
	if u != nil {
		agdcu.SetCreatedAt(*u)
	}
	return agdcu
}

// AddCreatedAt adds u to the "created_at" field.
func (agdcu *AppGoodDisplayColorUpdate) AddCreatedAt(u int32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.AddCreatedAt(u)
	return agdcu
}

// SetUpdatedAt sets the "updated_at" field.
func (agdcu *AppGoodDisplayColorUpdate) SetUpdatedAt(u uint32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.ResetUpdatedAt()
	agdcu.mutation.SetUpdatedAt(u)
	return agdcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agdcu *AppGoodDisplayColorUpdate) AddUpdatedAt(u int32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.AddUpdatedAt(u)
	return agdcu
}

// SetDeletedAt sets the "deleted_at" field.
func (agdcu *AppGoodDisplayColorUpdate) SetDeletedAt(u uint32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.ResetDeletedAt()
	agdcu.mutation.SetDeletedAt(u)
	return agdcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableDeletedAt(u *uint32) *AppGoodDisplayColorUpdate {
	if u != nil {
		agdcu.SetDeletedAt(*u)
	}
	return agdcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agdcu *AppGoodDisplayColorUpdate) AddDeletedAt(u int32) *AppGoodDisplayColorUpdate {
	agdcu.mutation.AddDeletedAt(u)
	return agdcu
}

// SetEntID sets the "ent_id" field.
func (agdcu *AppGoodDisplayColorUpdate) SetEntID(u uuid.UUID) *AppGoodDisplayColorUpdate {
	agdcu.mutation.SetEntID(u)
	return agdcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayColorUpdate {
	if u != nil {
		agdcu.SetEntID(*u)
	}
	return agdcu
}

// SetAppGoodID sets the "app_good_id" field.
func (agdcu *AppGoodDisplayColorUpdate) SetAppGoodID(u uuid.UUID) *AppGoodDisplayColorUpdate {
	agdcu.mutation.SetAppGoodID(u)
	return agdcu
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayColorUpdate {
	if u != nil {
		agdcu.SetAppGoodID(*u)
	}
	return agdcu
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdcu *AppGoodDisplayColorUpdate) ClearAppGoodID() *AppGoodDisplayColorUpdate {
	agdcu.mutation.ClearAppGoodID()
	return agdcu
}

// SetColor sets the "color" field.
func (agdcu *AppGoodDisplayColorUpdate) SetColor(s string) *AppGoodDisplayColorUpdate {
	agdcu.mutation.SetColor(s)
	return agdcu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableColor(s *string) *AppGoodDisplayColorUpdate {
	if s != nil {
		agdcu.SetColor(*s)
	}
	return agdcu
}

// ClearColor clears the value of the "color" field.
func (agdcu *AppGoodDisplayColorUpdate) ClearColor() *AppGoodDisplayColorUpdate {
	agdcu.mutation.ClearColor()
	return agdcu
}

// SetIndex sets the "index" field.
func (agdcu *AppGoodDisplayColorUpdate) SetIndex(u uint8) *AppGoodDisplayColorUpdate {
	agdcu.mutation.ResetIndex()
	agdcu.mutation.SetIndex(u)
	return agdcu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdcu *AppGoodDisplayColorUpdate) SetNillableIndex(u *uint8) *AppGoodDisplayColorUpdate {
	if u != nil {
		agdcu.SetIndex(*u)
	}
	return agdcu
}

// AddIndex adds u to the "index" field.
func (agdcu *AppGoodDisplayColorUpdate) AddIndex(u int8) *AppGoodDisplayColorUpdate {
	agdcu.mutation.AddIndex(u)
	return agdcu
}

// ClearIndex clears the value of the "index" field.
func (agdcu *AppGoodDisplayColorUpdate) ClearIndex() *AppGoodDisplayColorUpdate {
	agdcu.mutation.ClearIndex()
	return agdcu
}

// Mutation returns the AppGoodDisplayColorMutation object of the builder.
func (agdcu *AppGoodDisplayColorUpdate) Mutation() *AppGoodDisplayColorMutation {
	return agdcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agdcu *AppGoodDisplayColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := agdcu.defaults(); err != nil {
		return 0, err
	}
	if len(agdcu.hooks) == 0 {
		affected, err = agdcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodDisplayColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agdcu.mutation = mutation
			affected, err = agdcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agdcu.hooks) - 1; i >= 0; i-- {
			if agdcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agdcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agdcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agdcu *AppGoodDisplayColorUpdate) SaveX(ctx context.Context) int {
	affected, err := agdcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agdcu *AppGoodDisplayColorUpdate) Exec(ctx context.Context) error {
	_, err := agdcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdcu *AppGoodDisplayColorUpdate) ExecX(ctx context.Context) {
	if err := agdcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdcu *AppGoodDisplayColorUpdate) defaults() error {
	if _, ok := agdcu.mutation.UpdatedAt(); !ok {
		if appgooddisplaycolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgooddisplaycolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgooddisplaycolor.UpdateDefaultUpdatedAt()
		agdcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdcu *AppGoodDisplayColorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayColorUpdate {
	agdcu.modifiers = append(agdcu.modifiers, modifiers...)
	return agdcu
}

func (agdcu *AppGoodDisplayColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgooddisplaycolor.Table,
			Columns: appgooddisplaycolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplaycolor.FieldID,
			},
		},
	}
	if ps := agdcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldCreatedAt,
		})
	}
	if value, ok := agdcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldCreatedAt,
		})
	}
	if value, ok := agdcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldUpdatedAt,
		})
	}
	if value, ok := agdcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldUpdatedAt,
		})
	}
	if value, ok := agdcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldDeletedAt,
		})
	}
	if value, ok := agdcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldDeletedAt,
		})
	}
	if value, ok := agdcu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplaycolor.FieldEntID,
		})
	}
	if value, ok := agdcu.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplaycolor.FieldAppGoodID,
		})
	}
	if agdcu.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgooddisplaycolor.FieldAppGoodID,
		})
	}
	if value, ok := agdcu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgooddisplaycolor.FieldColor,
		})
	}
	if agdcu.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgooddisplaycolor.FieldColor,
		})
	}
	if value, ok := agdcu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	if value, ok := agdcu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	if agdcu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	_spec.Modifiers = agdcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, agdcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplaycolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodDisplayColorUpdateOne is the builder for updating a single AppGoodDisplayColor entity.
type AppGoodDisplayColorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodDisplayColorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetCreatedAt(u uint32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ResetCreatedAt()
	agdcuo.mutation.SetCreatedAt(u)
	return agdcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodDisplayColorUpdateOne {
	if u != nil {
		agdcuo.SetCreatedAt(*u)
	}
	return agdcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) AddCreatedAt(u int32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.AddCreatedAt(u)
	return agdcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetUpdatedAt(u uint32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ResetUpdatedAt()
	agdcuo.mutation.SetUpdatedAt(u)
	return agdcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) AddUpdatedAt(u int32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.AddUpdatedAt(u)
	return agdcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetDeletedAt(u uint32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ResetDeletedAt()
	agdcuo.mutation.SetDeletedAt(u)
	return agdcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodDisplayColorUpdateOne {
	if u != nil {
		agdcuo.SetDeletedAt(*u)
	}
	return agdcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) AddDeletedAt(u int32) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.AddDeletedAt(u)
	return agdcuo
}

// SetEntID sets the "ent_id" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetEntID(u uuid.UUID) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.SetEntID(u)
	return agdcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodDisplayColorUpdateOne {
	if u != nil {
		agdcuo.SetEntID(*u)
	}
	return agdcuo
}

// SetAppGoodID sets the "app_good_id" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetAppGoodID(u uuid.UUID) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.SetAppGoodID(u)
	return agdcuo
}

// SetNillableAppGoodID sets the "app_good_id" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableAppGoodID(u *uuid.UUID) *AppGoodDisplayColorUpdateOne {
	if u != nil {
		agdcuo.SetAppGoodID(*u)
	}
	return agdcuo
}

// ClearAppGoodID clears the value of the "app_good_id" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) ClearAppGoodID() *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ClearAppGoodID()
	return agdcuo
}

// SetColor sets the "color" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetColor(s string) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.SetColor(s)
	return agdcuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableColor(s *string) *AppGoodDisplayColorUpdateOne {
	if s != nil {
		agdcuo.SetColor(*s)
	}
	return agdcuo
}

// ClearColor clears the value of the "color" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) ClearColor() *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ClearColor()
	return agdcuo
}

// SetIndex sets the "index" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetIndex(u uint8) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ResetIndex()
	agdcuo.mutation.SetIndex(u)
	return agdcuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (agdcuo *AppGoodDisplayColorUpdateOne) SetNillableIndex(u *uint8) *AppGoodDisplayColorUpdateOne {
	if u != nil {
		agdcuo.SetIndex(*u)
	}
	return agdcuo
}

// AddIndex adds u to the "index" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) AddIndex(u int8) *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.AddIndex(u)
	return agdcuo
}

// ClearIndex clears the value of the "index" field.
func (agdcuo *AppGoodDisplayColorUpdateOne) ClearIndex() *AppGoodDisplayColorUpdateOne {
	agdcuo.mutation.ClearIndex()
	return agdcuo
}

// Mutation returns the AppGoodDisplayColorMutation object of the builder.
func (agdcuo *AppGoodDisplayColorUpdateOne) Mutation() *AppGoodDisplayColorMutation {
	return agdcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agdcuo *AppGoodDisplayColorUpdateOne) Select(field string, fields ...string) *AppGoodDisplayColorUpdateOne {
	agdcuo.fields = append([]string{field}, fields...)
	return agdcuo
}

// Save executes the query and returns the updated AppGoodDisplayColor entity.
func (agdcuo *AppGoodDisplayColorUpdateOne) Save(ctx context.Context) (*AppGoodDisplayColor, error) {
	var (
		err  error
		node *AppGoodDisplayColor
	)
	if err := agdcuo.defaults(); err != nil {
		return nil, err
	}
	if len(agdcuo.hooks) == 0 {
		node, err = agdcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodDisplayColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agdcuo.mutation = mutation
			node, err = agdcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agdcuo.hooks) - 1; i >= 0; i-- {
			if agdcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agdcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, agdcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppGoodDisplayColor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppGoodDisplayColorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (agdcuo *AppGoodDisplayColorUpdateOne) SaveX(ctx context.Context) *AppGoodDisplayColor {
	node, err := agdcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agdcuo *AppGoodDisplayColorUpdateOne) Exec(ctx context.Context) error {
	_, err := agdcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agdcuo *AppGoodDisplayColorUpdateOne) ExecX(ctx context.Context) {
	if err := agdcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agdcuo *AppGoodDisplayColorUpdateOne) defaults() error {
	if _, ok := agdcuo.mutation.UpdatedAt(); !ok {
		if appgooddisplaycolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgooddisplaycolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgooddisplaycolor.UpdateDefaultUpdatedAt()
		agdcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agdcuo *AppGoodDisplayColorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodDisplayColorUpdateOne {
	agdcuo.modifiers = append(agdcuo.modifiers, modifiers...)
	return agdcuo
}

func (agdcuo *AppGoodDisplayColorUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodDisplayColor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgooddisplaycolor.Table,
			Columns: appgooddisplaycolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgooddisplaycolor.FieldID,
			},
		},
	}
	id, ok := agdcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGoodDisplayColor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agdcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgooddisplaycolor.FieldID)
		for _, f := range fields {
			if !appgooddisplaycolor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgooddisplaycolor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agdcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agdcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldCreatedAt,
		})
	}
	if value, ok := agdcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldCreatedAt,
		})
	}
	if value, ok := agdcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldUpdatedAt,
		})
	}
	if value, ok := agdcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldUpdatedAt,
		})
	}
	if value, ok := agdcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldDeletedAt,
		})
	}
	if value, ok := agdcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgooddisplaycolor.FieldDeletedAt,
		})
	}
	if value, ok := agdcuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplaycolor.FieldEntID,
		})
	}
	if value, ok := agdcuo.mutation.AppGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgooddisplaycolor.FieldAppGoodID,
		})
	}
	if agdcuo.mutation.AppGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: appgooddisplaycolor.FieldAppGoodID,
		})
	}
	if value, ok := agdcuo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgooddisplaycolor.FieldColor,
		})
	}
	if agdcuo.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgooddisplaycolor.FieldColor,
		})
	}
	if value, ok := agdcuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	if value, ok := agdcuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	if agdcuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: appgooddisplaycolor.FieldIndex,
		})
	}
	_spec.Modifiers = agdcuo.modifiers
	_node = &AppGoodDisplayColor{config: agdcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agdcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgooddisplaycolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
