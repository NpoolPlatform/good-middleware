// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/apppowerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppPowerRental is the model entity for the AppPowerRental schema.
type AppPowerRental struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppGoodID holds the value of the "app_good_id" field.
	AppGoodID uuid.UUID `json:"app_good_id,omitempty"`
	// ServiceStartAt holds the value of the "service_start_at" field.
	ServiceStartAt uint32 `json:"service_start_at,omitempty"`
	// CancelMode holds the value of the "cancel_mode" field.
	CancelMode string `json:"cancel_mode,omitempty"`
	// CancelableBeforeStartSeconds holds the value of the "cancelable_before_start_seconds" field.
	CancelableBeforeStartSeconds uint32 `json:"cancelable_before_start_seconds,omitempty"`
	// EnableSetCommission holds the value of the "enable_set_commission" field.
	EnableSetCommission bool `json:"enable_set_commission,omitempty"`
	// MinOrderAmount holds the value of the "min_order_amount" field.
	MinOrderAmount decimal.Decimal `json:"min_order_amount,omitempty"`
	// MaxOrderAmount holds the value of the "max_order_amount" field.
	MaxOrderAmount decimal.Decimal `json:"max_order_amount,omitempty"`
	// MaxUserAmount holds the value of the "max_user_amount" field.
	MaxUserAmount decimal.Decimal `json:"max_user_amount,omitempty"`
	// MinOrderDuration holds the value of the "min_order_duration" field.
	MinOrderDuration uint32 `json:"min_order_duration,omitempty"`
	// MaxOrderDuration holds the value of the "max_order_duration" field.
	MaxOrderDuration uint32 `json:"max_order_duration,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice decimal.Decimal `json:"unit_price,omitempty"`
	// SaleStartAt holds the value of the "sale_start_at" field.
	SaleStartAt uint32 `json:"sale_start_at,omitempty"`
	// SaleEndAt holds the value of the "sale_end_at" field.
	SaleEndAt uint32 `json:"sale_end_at,omitempty"`
	// SaleMode holds the value of the "sale_mode" field.
	SaleMode string `json:"sale_mode,omitempty"`
	// FixDuration holds the value of the "fix_duration" field.
	FixDuration bool `json:"fix_duration,omitempty"`
	// PackageWithRequireds holds the value of the "package_with_requireds" field.
	PackageWithRequireds bool `json:"package_with_requireds,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppPowerRental) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case apppowerrental.FieldMinOrderAmount, apppowerrental.FieldMaxOrderAmount, apppowerrental.FieldMaxUserAmount, apppowerrental.FieldUnitPrice:
			values[i] = new(decimal.Decimal)
		case apppowerrental.FieldEnableSetCommission, apppowerrental.FieldFixDuration, apppowerrental.FieldPackageWithRequireds:
			values[i] = new(sql.NullBool)
		case apppowerrental.FieldID, apppowerrental.FieldCreatedAt, apppowerrental.FieldUpdatedAt, apppowerrental.FieldDeletedAt, apppowerrental.FieldServiceStartAt, apppowerrental.FieldCancelableBeforeStartSeconds, apppowerrental.FieldMinOrderDuration, apppowerrental.FieldMaxOrderDuration, apppowerrental.FieldSaleStartAt, apppowerrental.FieldSaleEndAt:
			values[i] = new(sql.NullInt64)
		case apppowerrental.FieldCancelMode, apppowerrental.FieldSaleMode:
			values[i] = new(sql.NullString)
		case apppowerrental.FieldEntID, apppowerrental.FieldAppGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppPowerRental", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppPowerRental fields.
func (apr *AppPowerRental) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apppowerrental.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			apr.ID = uint32(value.Int64)
		case apppowerrental.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				apr.CreatedAt = uint32(value.Int64)
			}
		case apppowerrental.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				apr.UpdatedAt = uint32(value.Int64)
			}
		case apppowerrental.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				apr.DeletedAt = uint32(value.Int64)
			}
		case apppowerrental.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				apr.EntID = *value
			}
		case apppowerrental.FieldAppGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_good_id", values[i])
			} else if value != nil {
				apr.AppGoodID = *value
			}
		case apppowerrental.FieldServiceStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_start_at", values[i])
			} else if value.Valid {
				apr.ServiceStartAt = uint32(value.Int64)
			}
		case apppowerrental.FieldCancelMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_mode", values[i])
			} else if value.Valid {
				apr.CancelMode = value.String
			}
		case apppowerrental.FieldCancelableBeforeStartSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cancelable_before_start_seconds", values[i])
			} else if value.Valid {
				apr.CancelableBeforeStartSeconds = uint32(value.Int64)
			}
		case apppowerrental.FieldEnableSetCommission:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_set_commission", values[i])
			} else if value.Valid {
				apr.EnableSetCommission = value.Bool
			}
		case apppowerrental.FieldMinOrderAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_amount", values[i])
			} else if value != nil {
				apr.MinOrderAmount = *value
			}
		case apppowerrental.FieldMaxOrderAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field max_order_amount", values[i])
			} else if value != nil {
				apr.MaxOrderAmount = *value
			}
		case apppowerrental.FieldMaxUserAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field max_user_amount", values[i])
			} else if value != nil {
				apr.MaxUserAmount = *value
			}
		case apppowerrental.FieldMinOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_duration", values[i])
			} else if value.Valid {
				apr.MinOrderDuration = uint32(value.Int64)
			}
		case apppowerrental.FieldMaxOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_order_duration", values[i])
			} else if value.Valid {
				apr.MaxOrderDuration = uint32(value.Int64)
			}
		case apppowerrental.FieldUnitPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value != nil {
				apr.UnitPrice = *value
			}
		case apppowerrental.FieldSaleStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_start_at", values[i])
			} else if value.Valid {
				apr.SaleStartAt = uint32(value.Int64)
			}
		case apppowerrental.FieldSaleEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_end_at", values[i])
			} else if value.Valid {
				apr.SaleEndAt = uint32(value.Int64)
			}
		case apppowerrental.FieldSaleMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sale_mode", values[i])
			} else if value.Valid {
				apr.SaleMode = value.String
			}
		case apppowerrental.FieldFixDuration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fix_duration", values[i])
			} else if value.Valid {
				apr.FixDuration = value.Bool
			}
		case apppowerrental.FieldPackageWithRequireds:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field package_with_requireds", values[i])
			} else if value.Valid {
				apr.PackageWithRequireds = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppPowerRental.
// Note that you need to call AppPowerRental.Unwrap() before calling this method if this AppPowerRental
// was returned from a transaction, and the transaction was committed or rolled back.
func (apr *AppPowerRental) Update() *AppPowerRentalUpdateOne {
	return (&AppPowerRentalClient{config: apr.config}).UpdateOne(apr)
}

// Unwrap unwraps the AppPowerRental entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (apr *AppPowerRental) Unwrap() *AppPowerRental {
	_tx, ok := apr.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppPowerRental is not a transactional entity")
	}
	apr.config.driver = _tx.drv
	return apr
}

// String implements the fmt.Stringer.
func (apr *AppPowerRental) String() string {
	var builder strings.Builder
	builder.WriteString("AppPowerRental(")
	builder.WriteString(fmt.Sprintf("id=%v, ", apr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", apr.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_good_id=")
	builder.WriteString(fmt.Sprintf("%v", apr.AppGoodID))
	builder.WriteString(", ")
	builder.WriteString("service_start_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.ServiceStartAt))
	builder.WriteString(", ")
	builder.WriteString("cancel_mode=")
	builder.WriteString(apr.CancelMode)
	builder.WriteString(", ")
	builder.WriteString("cancelable_before_start_seconds=")
	builder.WriteString(fmt.Sprintf("%v", apr.CancelableBeforeStartSeconds))
	builder.WriteString(", ")
	builder.WriteString("enable_set_commission=")
	builder.WriteString(fmt.Sprintf("%v", apr.EnableSetCommission))
	builder.WriteString(", ")
	builder.WriteString("min_order_amount=")
	builder.WriteString(fmt.Sprintf("%v", apr.MinOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("max_order_amount=")
	builder.WriteString(fmt.Sprintf("%v", apr.MaxOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("max_user_amount=")
	builder.WriteString(fmt.Sprintf("%v", apr.MaxUserAmount))
	builder.WriteString(", ")
	builder.WriteString("min_order_duration=")
	builder.WriteString(fmt.Sprintf("%v", apr.MinOrderDuration))
	builder.WriteString(", ")
	builder.WriteString("max_order_duration=")
	builder.WriteString(fmt.Sprintf("%v", apr.MaxOrderDuration))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", apr.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("sale_start_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.SaleStartAt))
	builder.WriteString(", ")
	builder.WriteString("sale_end_at=")
	builder.WriteString(fmt.Sprintf("%v", apr.SaleEndAt))
	builder.WriteString(", ")
	builder.WriteString("sale_mode=")
	builder.WriteString(apr.SaleMode)
	builder.WriteString(", ")
	builder.WriteString("fix_duration=")
	builder.WriteString(fmt.Sprintf("%v", apr.FixDuration))
	builder.WriteString(", ")
	builder.WriteString("package_with_requireds=")
	builder.WriteString(fmt.Sprintf("%v", apr.PackageWithRequireds))
	builder.WriteByte(')')
	return builder.String()
}

// AppPowerRentals is a parsable slice of AppPowerRental.
type AppPowerRentals []*AppPowerRental

func (apr AppPowerRentals) config(cfg config) {
	for _i := range apr {
		apr[_i].config = cfg
	}
}
