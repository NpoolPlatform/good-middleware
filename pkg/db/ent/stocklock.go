// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stocklock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StockLock is the model entity for the StockLock schema.
type StockLock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// StockID holds the value of the "stock_id" field.
	StockID uuid.UUID `json:"stock_id,omitempty"`
	// Units holds the value of the "units" field.
	Units decimal.Decimal `json:"units,omitempty"`
	// LockState holds the value of the "lock_state" field.
	LockState string `json:"lock_state,omitempty"`
	// ChargeBackState holds the value of the "charge_back_state" field.
	ChargeBackState string `json:"charge_back_state,omitempty"`
	// ExLockID holds the value of the "ex_lock_id" field.
	ExLockID uuid.UUID `json:"ex_lock_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StockLock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stocklock.FieldUnits:
			values[i] = new(decimal.Decimal)
		case stocklock.FieldID, stocklock.FieldCreatedAt, stocklock.FieldUpdatedAt, stocklock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case stocklock.FieldLockState, stocklock.FieldChargeBackState:
			values[i] = new(sql.NullString)
		case stocklock.FieldEntID, stocklock.FieldStockID, stocklock.FieldExLockID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StockLock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StockLock fields.
func (sl *StockLock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stocklock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = uint32(value.Int64)
		case stocklock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = uint32(value.Int64)
			}
		case stocklock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sl.UpdatedAt = uint32(value.Int64)
			}
		case stocklock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sl.DeletedAt = uint32(value.Int64)
			}
		case stocklock.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				sl.EntID = *value
			}
		case stocklock.FieldStockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field stock_id", values[i])
			} else if value != nil {
				sl.StockID = *value
			}
		case stocklock.FieldUnits:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value != nil {
				sl.Units = *value
			}
		case stocklock.FieldLockState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lock_state", values[i])
			} else if value.Valid {
				sl.LockState = value.String
			}
		case stocklock.FieldChargeBackState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_back_state", values[i])
			} else if value.Valid {
				sl.ChargeBackState = value.String
			}
		case stocklock.FieldExLockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ex_lock_id", values[i])
			} else if value != nil {
				sl.ExLockID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StockLock.
// Note that you need to call StockLock.Unwrap() before calling this method if this StockLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *StockLock) Update() *StockLockUpdateOne {
	return (&StockLockClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the StockLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *StockLock) Unwrap() *StockLock {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: StockLock is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *StockLock) String() string {
	var builder strings.Builder
	builder.WriteString("StockLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", sl.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.EntID))
	builder.WriteString(", ")
	builder.WriteString("stock_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.StockID))
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", sl.Units))
	builder.WriteString(", ")
	builder.WriteString("lock_state=")
	builder.WriteString(sl.LockState)
	builder.WriteString(", ")
	builder.WriteString("charge_back_state=")
	builder.WriteString(sl.ChargeBackState)
	builder.WriteString(", ")
	builder.WriteString("ex_lock_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.ExLockID))
	builder.WriteByte(')')
	return builder.String()
}

// StockLocks is a parsable slice of StockLock.
type StockLocks []*StockLock

func (sl StockLocks) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
