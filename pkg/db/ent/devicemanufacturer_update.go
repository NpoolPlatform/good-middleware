// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/devicemanufacturer"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DeviceManufacturerUpdate is the builder for updating DeviceManufacturer entities.
type DeviceManufacturerUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceManufacturerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceManufacturerUpdate builder.
func (dmu *DeviceManufacturerUpdate) Where(ps ...predicate.DeviceManufacturer) *DeviceManufacturerUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetCreatedAt sets the "created_at" field.
func (dmu *DeviceManufacturerUpdate) SetCreatedAt(u uint32) *DeviceManufacturerUpdate {
	dmu.mutation.ResetCreatedAt()
	dmu.mutation.SetCreatedAt(u)
	return dmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmu *DeviceManufacturerUpdate) SetNillableCreatedAt(u *uint32) *DeviceManufacturerUpdate {
	if u != nil {
		dmu.SetCreatedAt(*u)
	}
	return dmu
}

// AddCreatedAt adds u to the "created_at" field.
func (dmu *DeviceManufacturerUpdate) AddCreatedAt(u int32) *DeviceManufacturerUpdate {
	dmu.mutation.AddCreatedAt(u)
	return dmu
}

// SetUpdatedAt sets the "updated_at" field.
func (dmu *DeviceManufacturerUpdate) SetUpdatedAt(u uint32) *DeviceManufacturerUpdate {
	dmu.mutation.ResetUpdatedAt()
	dmu.mutation.SetUpdatedAt(u)
	return dmu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dmu *DeviceManufacturerUpdate) AddUpdatedAt(u int32) *DeviceManufacturerUpdate {
	dmu.mutation.AddUpdatedAt(u)
	return dmu
}

// SetDeletedAt sets the "deleted_at" field.
func (dmu *DeviceManufacturerUpdate) SetDeletedAt(u uint32) *DeviceManufacturerUpdate {
	dmu.mutation.ResetDeletedAt()
	dmu.mutation.SetDeletedAt(u)
	return dmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dmu *DeviceManufacturerUpdate) SetNillableDeletedAt(u *uint32) *DeviceManufacturerUpdate {
	if u != nil {
		dmu.SetDeletedAt(*u)
	}
	return dmu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dmu *DeviceManufacturerUpdate) AddDeletedAt(u int32) *DeviceManufacturerUpdate {
	dmu.mutation.AddDeletedAt(u)
	return dmu
}

// SetEntID sets the "ent_id" field.
func (dmu *DeviceManufacturerUpdate) SetEntID(u uuid.UUID) *DeviceManufacturerUpdate {
	dmu.mutation.SetEntID(u)
	return dmu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dmu *DeviceManufacturerUpdate) SetNillableEntID(u *uuid.UUID) *DeviceManufacturerUpdate {
	if u != nil {
		dmu.SetEntID(*u)
	}
	return dmu
}

// SetName sets the "name" field.
func (dmu *DeviceManufacturerUpdate) SetName(s string) *DeviceManufacturerUpdate {
	dmu.mutation.SetName(s)
	return dmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dmu *DeviceManufacturerUpdate) SetNillableName(s *string) *DeviceManufacturerUpdate {
	if s != nil {
		dmu.SetName(*s)
	}
	return dmu
}

// ClearName clears the value of the "name" field.
func (dmu *DeviceManufacturerUpdate) ClearName() *DeviceManufacturerUpdate {
	dmu.mutation.ClearName()
	return dmu
}

// SetLogo sets the "logo" field.
func (dmu *DeviceManufacturerUpdate) SetLogo(s string) *DeviceManufacturerUpdate {
	dmu.mutation.SetLogo(s)
	return dmu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (dmu *DeviceManufacturerUpdate) SetNillableLogo(s *string) *DeviceManufacturerUpdate {
	if s != nil {
		dmu.SetLogo(*s)
	}
	return dmu
}

// ClearLogo clears the value of the "logo" field.
func (dmu *DeviceManufacturerUpdate) ClearLogo() *DeviceManufacturerUpdate {
	dmu.mutation.ClearLogo()
	return dmu
}

// Mutation returns the DeviceManufacturerMutation object of the builder.
func (dmu *DeviceManufacturerUpdate) Mutation() *DeviceManufacturerMutation {
	return dmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DeviceManufacturerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dmu.defaults(); err != nil {
		return 0, err
	}
	if len(dmu.hooks) == 0 {
		if err = dmu.check(); err != nil {
			return 0, err
		}
		affected, err = dmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceManufacturerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dmu.check(); err != nil {
				return 0, err
			}
			dmu.mutation = mutation
			affected, err = dmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dmu.hooks) - 1; i >= 0; i-- {
			if dmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DeviceManufacturerUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DeviceManufacturerUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DeviceManufacturerUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmu *DeviceManufacturerUpdate) defaults() error {
	if _, ok := dmu.mutation.UpdatedAt(); !ok {
		if devicemanufacturer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized devicemanufacturer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := devicemanufacturer.UpdateDefaultUpdatedAt()
		dmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dmu *DeviceManufacturerUpdate) check() error {
	if v, ok := dmu.mutation.Name(); ok {
		if err := devicemanufacturer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DeviceManufacturer.name": %w`, err)}
		}
	}
	if v, ok := dmu.mutation.Logo(); ok {
		if err := devicemanufacturer.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`ent: validator failed for field "DeviceManufacturer.logo": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dmu *DeviceManufacturerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceManufacturerUpdate {
	dmu.modifiers = append(dmu.modifiers, modifiers...)
	return dmu
}

func (dmu *DeviceManufacturerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   devicemanufacturer.Table,
			Columns: devicemanufacturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: devicemanufacturer.FieldID,
			},
		},
	}
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldCreatedAt,
		})
	}
	if value, ok := dmu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldCreatedAt,
		})
	}
	if value, ok := dmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldUpdatedAt,
		})
	}
	if value, ok := dmu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldUpdatedAt,
		})
	}
	if value, ok := dmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldDeletedAt,
		})
	}
	if value, ok := dmu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldDeletedAt,
		})
	}
	if value, ok := dmu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: devicemanufacturer.FieldEntID,
		})
	}
	if value, ok := dmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: devicemanufacturer.FieldName,
		})
	}
	if dmu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: devicemanufacturer.FieldName,
		})
	}
	if value, ok := dmu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: devicemanufacturer.FieldLogo,
		})
	}
	if dmu.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: devicemanufacturer.FieldLogo,
		})
	}
	_spec.Modifiers = dmu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicemanufacturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DeviceManufacturerUpdateOne is the builder for updating a single DeviceManufacturer entity.
type DeviceManufacturerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceManufacturerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (dmuo *DeviceManufacturerUpdateOne) SetCreatedAt(u uint32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.ResetCreatedAt()
	dmuo.mutation.SetCreatedAt(u)
	return dmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dmuo *DeviceManufacturerUpdateOne) SetNillableCreatedAt(u *uint32) *DeviceManufacturerUpdateOne {
	if u != nil {
		dmuo.SetCreatedAt(*u)
	}
	return dmuo
}

// AddCreatedAt adds u to the "created_at" field.
func (dmuo *DeviceManufacturerUpdateOne) AddCreatedAt(u int32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.AddCreatedAt(u)
	return dmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dmuo *DeviceManufacturerUpdateOne) SetUpdatedAt(u uint32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.ResetUpdatedAt()
	dmuo.mutation.SetUpdatedAt(u)
	return dmuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dmuo *DeviceManufacturerUpdateOne) AddUpdatedAt(u int32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.AddUpdatedAt(u)
	return dmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dmuo *DeviceManufacturerUpdateOne) SetDeletedAt(u uint32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.ResetDeletedAt()
	dmuo.mutation.SetDeletedAt(u)
	return dmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dmuo *DeviceManufacturerUpdateOne) SetNillableDeletedAt(u *uint32) *DeviceManufacturerUpdateOne {
	if u != nil {
		dmuo.SetDeletedAt(*u)
	}
	return dmuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dmuo *DeviceManufacturerUpdateOne) AddDeletedAt(u int32) *DeviceManufacturerUpdateOne {
	dmuo.mutation.AddDeletedAt(u)
	return dmuo
}

// SetEntID sets the "ent_id" field.
func (dmuo *DeviceManufacturerUpdateOne) SetEntID(u uuid.UUID) *DeviceManufacturerUpdateOne {
	dmuo.mutation.SetEntID(u)
	return dmuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dmuo *DeviceManufacturerUpdateOne) SetNillableEntID(u *uuid.UUID) *DeviceManufacturerUpdateOne {
	if u != nil {
		dmuo.SetEntID(*u)
	}
	return dmuo
}

// SetName sets the "name" field.
func (dmuo *DeviceManufacturerUpdateOne) SetName(s string) *DeviceManufacturerUpdateOne {
	dmuo.mutation.SetName(s)
	return dmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dmuo *DeviceManufacturerUpdateOne) SetNillableName(s *string) *DeviceManufacturerUpdateOne {
	if s != nil {
		dmuo.SetName(*s)
	}
	return dmuo
}

// ClearName clears the value of the "name" field.
func (dmuo *DeviceManufacturerUpdateOne) ClearName() *DeviceManufacturerUpdateOne {
	dmuo.mutation.ClearName()
	return dmuo
}

// SetLogo sets the "logo" field.
func (dmuo *DeviceManufacturerUpdateOne) SetLogo(s string) *DeviceManufacturerUpdateOne {
	dmuo.mutation.SetLogo(s)
	return dmuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (dmuo *DeviceManufacturerUpdateOne) SetNillableLogo(s *string) *DeviceManufacturerUpdateOne {
	if s != nil {
		dmuo.SetLogo(*s)
	}
	return dmuo
}

// ClearLogo clears the value of the "logo" field.
func (dmuo *DeviceManufacturerUpdateOne) ClearLogo() *DeviceManufacturerUpdateOne {
	dmuo.mutation.ClearLogo()
	return dmuo
}

// Mutation returns the DeviceManufacturerMutation object of the builder.
func (dmuo *DeviceManufacturerUpdateOne) Mutation() *DeviceManufacturerMutation {
	return dmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DeviceManufacturerUpdateOne) Select(field string, fields ...string) *DeviceManufacturerUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DeviceManufacturer entity.
func (dmuo *DeviceManufacturerUpdateOne) Save(ctx context.Context) (*DeviceManufacturer, error) {
	var (
		err  error
		node *DeviceManufacturer
	)
	if err := dmuo.defaults(); err != nil {
		return nil, err
	}
	if len(dmuo.hooks) == 0 {
		if err = dmuo.check(); err != nil {
			return nil, err
		}
		node, err = dmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceManufacturerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dmuo.check(); err != nil {
				return nil, err
			}
			dmuo.mutation = mutation
			node, err = dmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dmuo.hooks) - 1; i >= 0; i-- {
			if dmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DeviceManufacturer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DeviceManufacturerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DeviceManufacturerUpdateOne) SaveX(ctx context.Context) *DeviceManufacturer {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DeviceManufacturerUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DeviceManufacturerUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmuo *DeviceManufacturerUpdateOne) defaults() error {
	if _, ok := dmuo.mutation.UpdatedAt(); !ok {
		if devicemanufacturer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized devicemanufacturer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := devicemanufacturer.UpdateDefaultUpdatedAt()
		dmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dmuo *DeviceManufacturerUpdateOne) check() error {
	if v, ok := dmuo.mutation.Name(); ok {
		if err := devicemanufacturer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DeviceManufacturer.name": %w`, err)}
		}
	}
	if v, ok := dmuo.mutation.Logo(); ok {
		if err := devicemanufacturer.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`ent: validator failed for field "DeviceManufacturer.logo": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dmuo *DeviceManufacturerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceManufacturerUpdateOne {
	dmuo.modifiers = append(dmuo.modifiers, modifiers...)
	return dmuo
}

func (dmuo *DeviceManufacturerUpdateOne) sqlSave(ctx context.Context) (_node *DeviceManufacturer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   devicemanufacturer.Table,
			Columns: devicemanufacturer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: devicemanufacturer.FieldID,
			},
		},
	}
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceManufacturer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicemanufacturer.FieldID)
		for _, f := range fields {
			if !devicemanufacturer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicemanufacturer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldCreatedAt,
		})
	}
	if value, ok := dmuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldCreatedAt,
		})
	}
	if value, ok := dmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldUpdatedAt,
		})
	}
	if value, ok := dmuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldUpdatedAt,
		})
	}
	if value, ok := dmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldDeletedAt,
		})
	}
	if value, ok := dmuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: devicemanufacturer.FieldDeletedAt,
		})
	}
	if value, ok := dmuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: devicemanufacturer.FieldEntID,
		})
	}
	if value, ok := dmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: devicemanufacturer.FieldName,
		})
	}
	if dmuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: devicemanufacturer.FieldName,
		})
	}
	if value, ok := dmuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: devicemanufacturer.FieldLogo,
		})
	}
	if dmuo.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: devicemanufacturer.FieldLogo,
		})
	}
	_spec.Modifiers = dmuo.modifiers
	_node = &DeviceManufacturer{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicemanufacturer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
