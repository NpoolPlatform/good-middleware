// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppGoodUpdate is the builder for updating AppGood entities.
type AppGoodUpdate struct {
	config
	hooks     []Hook
	mutation  *AppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppGoodUpdate builder.
func (agu *AppGoodUpdate) Where(ps ...predicate.AppGood) *AppGoodUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetCreatedAt sets the "created_at" field.
func (agu *AppGoodUpdate) SetCreatedAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetCreatedAt()
	agu.mutation.SetCreatedAt(u)
	return agu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCreatedAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetCreatedAt(*u)
	}
	return agu
}

// AddCreatedAt adds u to the "created_at" field.
func (agu *AppGoodUpdate) AddCreatedAt(u int32) *AppGoodUpdate {
	agu.mutation.AddCreatedAt(u)
	return agu
}

// SetUpdatedAt sets the "updated_at" field.
func (agu *AppGoodUpdate) SetUpdatedAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetUpdatedAt()
	agu.mutation.SetUpdatedAt(u)
	return agu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (agu *AppGoodUpdate) AddUpdatedAt(u int32) *AppGoodUpdate {
	agu.mutation.AddUpdatedAt(u)
	return agu
}

// SetDeletedAt sets the "deleted_at" field.
func (agu *AppGoodUpdate) SetDeletedAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetDeletedAt()
	agu.mutation.SetDeletedAt(u)
	return agu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableDeletedAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetDeletedAt(*u)
	}
	return agu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (agu *AppGoodUpdate) AddDeletedAt(u int32) *AppGoodUpdate {
	agu.mutation.AddDeletedAt(u)
	return agu
}

// SetEntID sets the "ent_id" field.
func (agu *AppGoodUpdate) SetEntID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetEntID(u)
	return agu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEntID(u *uuid.UUID) *AppGoodUpdate {
	if u != nil {
		agu.SetEntID(*u)
	}
	return agu
}

// SetAppID sets the "app_id" field.
func (agu *AppGoodUpdate) SetAppID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetAppID(u)
	return agu
}

// SetGoodID sets the "good_id" field.
func (agu *AppGoodUpdate) SetGoodID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetGoodID(u)
	return agu
}

// SetOnline sets the "online" field.
func (agu *AppGoodUpdate) SetOnline(b bool) *AppGoodUpdate {
	agu.mutation.SetOnline(b)
	return agu
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableOnline(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetOnline(*b)
	}
	return agu
}

// ClearOnline clears the value of the "online" field.
func (agu *AppGoodUpdate) ClearOnline() *AppGoodUpdate {
	agu.mutation.ClearOnline()
	return agu
}

// SetVisible sets the "visible" field.
func (agu *AppGoodUpdate) SetVisible(b bool) *AppGoodUpdate {
	agu.mutation.SetVisible(b)
	return agu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableVisible(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetVisible(*b)
	}
	return agu
}

// ClearVisible clears the value of the "visible" field.
func (agu *AppGoodUpdate) ClearVisible() *AppGoodUpdate {
	agu.mutation.ClearVisible()
	return agu
}

// SetGoodName sets the "good_name" field.
func (agu *AppGoodUpdate) SetGoodName(s string) *AppGoodUpdate {
	agu.mutation.SetGoodName(s)
	return agu
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableGoodName(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetGoodName(*s)
	}
	return agu
}

// ClearGoodName clears the value of the "good_name" field.
func (agu *AppGoodUpdate) ClearGoodName() *AppGoodUpdate {
	agu.mutation.ClearGoodName()
	return agu
}

// SetPrice sets the "price" field.
func (agu *AppGoodUpdate) SetPrice(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetPrice(d)
	return agu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillablePrice(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetPrice(*d)
	}
	return agu
}

// ClearPrice clears the value of the "price" field.
func (agu *AppGoodUpdate) ClearPrice() *AppGoodUpdate {
	agu.mutation.ClearPrice()
	return agu
}

// SetDisplayIndex sets the "display_index" field.
func (agu *AppGoodUpdate) SetDisplayIndex(i int32) *AppGoodUpdate {
	agu.mutation.ResetDisplayIndex()
	agu.mutation.SetDisplayIndex(i)
	return agu
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableDisplayIndex(i *int32) *AppGoodUpdate {
	if i != nil {
		agu.SetDisplayIndex(*i)
	}
	return agu
}

// AddDisplayIndex adds i to the "display_index" field.
func (agu *AppGoodUpdate) AddDisplayIndex(i int32) *AppGoodUpdate {
	agu.mutation.AddDisplayIndex(i)
	return agu
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (agu *AppGoodUpdate) ClearDisplayIndex() *AppGoodUpdate {
	agu.mutation.ClearDisplayIndex()
	return agu
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (agu *AppGoodUpdate) SetPurchaseLimit(i int32) *AppGoodUpdate {
	agu.mutation.ResetPurchaseLimit()
	agu.mutation.SetPurchaseLimit(i)
	return agu
}

// SetNillablePurchaseLimit sets the "purchase_limit" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillablePurchaseLimit(i *int32) *AppGoodUpdate {
	if i != nil {
		agu.SetPurchaseLimit(*i)
	}
	return agu
}

// AddPurchaseLimit adds i to the "purchase_limit" field.
func (agu *AppGoodUpdate) AddPurchaseLimit(i int32) *AppGoodUpdate {
	agu.mutation.AddPurchaseLimit(i)
	return agu
}

// ClearPurchaseLimit clears the value of the "purchase_limit" field.
func (agu *AppGoodUpdate) ClearPurchaseLimit() *AppGoodUpdate {
	agu.mutation.ClearPurchaseLimit()
	return agu
}

// SetSaleStartAt sets the "sale_start_at" field.
func (agu *AppGoodUpdate) SetSaleStartAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetSaleStartAt()
	agu.mutation.SetSaleStartAt(u)
	return agu
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableSaleStartAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetSaleStartAt(*u)
	}
	return agu
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (agu *AppGoodUpdate) AddSaleStartAt(u int32) *AppGoodUpdate {
	agu.mutation.AddSaleStartAt(u)
	return agu
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (agu *AppGoodUpdate) ClearSaleStartAt() *AppGoodUpdate {
	agu.mutation.ClearSaleStartAt()
	return agu
}

// SetSaleEndAt sets the "sale_end_at" field.
func (agu *AppGoodUpdate) SetSaleEndAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetSaleEndAt()
	agu.mutation.SetSaleEndAt(u)
	return agu
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableSaleEndAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetSaleEndAt(*u)
	}
	return agu
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (agu *AppGoodUpdate) AddSaleEndAt(u int32) *AppGoodUpdate {
	agu.mutation.AddSaleEndAt(u)
	return agu
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (agu *AppGoodUpdate) ClearSaleEndAt() *AppGoodUpdate {
	agu.mutation.ClearSaleEndAt()
	return agu
}

// SetServiceStartAt sets the "service_start_at" field.
func (agu *AppGoodUpdate) SetServiceStartAt(u uint32) *AppGoodUpdate {
	agu.mutation.ResetServiceStartAt()
	agu.mutation.SetServiceStartAt(u)
	return agu
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableServiceStartAt(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetServiceStartAt(*u)
	}
	return agu
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (agu *AppGoodUpdate) AddServiceStartAt(u int32) *AppGoodUpdate {
	agu.mutation.AddServiceStartAt(u)
	return agu
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (agu *AppGoodUpdate) ClearServiceStartAt() *AppGoodUpdate {
	agu.mutation.ClearServiceStartAt()
	return agu
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (agu *AppGoodUpdate) SetTechnicalFeeRatio(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetTechnicalFeeRatio(d)
	return agu
}

// SetNillableTechnicalFeeRatio sets the "technical_fee_ratio" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableTechnicalFeeRatio(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetTechnicalFeeRatio(*d)
	}
	return agu
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (agu *AppGoodUpdate) ClearTechnicalFeeRatio() *AppGoodUpdate {
	agu.mutation.ClearTechnicalFeeRatio()
	return agu
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (agu *AppGoodUpdate) SetElectricityFeeRatio(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetElectricityFeeRatio(d)
	return agu
}

// SetNillableElectricityFeeRatio sets the "electricity_fee_ratio" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableElectricityFeeRatio(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetElectricityFeeRatio(*d)
	}
	return agu
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (agu *AppGoodUpdate) ClearElectricityFeeRatio() *AppGoodUpdate {
	agu.mutation.ClearElectricityFeeRatio()
	return agu
}

// SetDescriptions sets the "descriptions" field.
func (agu *AppGoodUpdate) SetDescriptions(s []string) *AppGoodUpdate {
	agu.mutation.SetDescriptions(s)
	return agu
}

// ClearDescriptions clears the value of the "descriptions" field.
func (agu *AppGoodUpdate) ClearDescriptions() *AppGoodUpdate {
	agu.mutation.ClearDescriptions()
	return agu
}

// SetGoodBanner sets the "good_banner" field.
func (agu *AppGoodUpdate) SetGoodBanner(s string) *AppGoodUpdate {
	agu.mutation.SetGoodBanner(s)
	return agu
}

// SetNillableGoodBanner sets the "good_banner" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableGoodBanner(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetGoodBanner(*s)
	}
	return agu
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (agu *AppGoodUpdate) ClearGoodBanner() *AppGoodUpdate {
	agu.mutation.ClearGoodBanner()
	return agu
}

// SetDisplayNames sets the "display_names" field.
func (agu *AppGoodUpdate) SetDisplayNames(s []string) *AppGoodUpdate {
	agu.mutation.SetDisplayNames(s)
	return agu
}

// ClearDisplayNames clears the value of the "display_names" field.
func (agu *AppGoodUpdate) ClearDisplayNames() *AppGoodUpdate {
	agu.mutation.ClearDisplayNames()
	return agu
}

// SetEnablePurchase sets the "enable_purchase" field.
func (agu *AppGoodUpdate) SetEnablePurchase(b bool) *AppGoodUpdate {
	agu.mutation.SetEnablePurchase(b)
	return agu
}

// SetNillableEnablePurchase sets the "enable_purchase" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnablePurchase(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnablePurchase(*b)
	}
	return agu
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (agu *AppGoodUpdate) ClearEnablePurchase() *AppGoodUpdate {
	agu.mutation.ClearEnablePurchase()
	return agu
}

// SetEnableProductPage sets the "enable_product_page" field.
func (agu *AppGoodUpdate) SetEnableProductPage(b bool) *AppGoodUpdate {
	agu.mutation.SetEnableProductPage(b)
	return agu
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnableProductPage(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnableProductPage(*b)
	}
	return agu
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (agu *AppGoodUpdate) ClearEnableProductPage() *AppGoodUpdate {
	agu.mutation.ClearEnableProductPage()
	return agu
}

// SetCancelMode sets the "cancel_mode" field.
func (agu *AppGoodUpdate) SetCancelMode(s string) *AppGoodUpdate {
	agu.mutation.SetCancelMode(s)
	return agu
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCancelMode(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetCancelMode(*s)
	}
	return agu
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (agu *AppGoodUpdate) ClearCancelMode() *AppGoodUpdate {
	agu.mutation.ClearCancelMode()
	return agu
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (agu *AppGoodUpdate) SetUserPurchaseLimit(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetUserPurchaseLimit(d)
	return agu
}

// SetNillableUserPurchaseLimit sets the "user_purchase_limit" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableUserPurchaseLimit(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetUserPurchaseLimit(*d)
	}
	return agu
}

// ClearUserPurchaseLimit clears the value of the "user_purchase_limit" field.
func (agu *AppGoodUpdate) ClearUserPurchaseLimit() *AppGoodUpdate {
	agu.mutation.ClearUserPurchaseLimit()
	return agu
}

// SetDisplayColors sets the "display_colors" field.
func (agu *AppGoodUpdate) SetDisplayColors(s []string) *AppGoodUpdate {
	agu.mutation.SetDisplayColors(s)
	return agu
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (agu *AppGoodUpdate) ClearDisplayColors() *AppGoodUpdate {
	agu.mutation.ClearDisplayColors()
	return agu
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (agu *AppGoodUpdate) SetCancellableBeforeStart(u uint32) *AppGoodUpdate {
	agu.mutation.ResetCancellableBeforeStart()
	agu.mutation.SetCancellableBeforeStart(u)
	return agu
}

// SetNillableCancellableBeforeStart sets the "cancellable_before_start" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCancellableBeforeStart(u *uint32) *AppGoodUpdate {
	if u != nil {
		agu.SetCancellableBeforeStart(*u)
	}
	return agu
}

// AddCancellableBeforeStart adds u to the "cancellable_before_start" field.
func (agu *AppGoodUpdate) AddCancellableBeforeStart(u int32) *AppGoodUpdate {
	agu.mutation.AddCancellableBeforeStart(u)
	return agu
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (agu *AppGoodUpdate) ClearCancellableBeforeStart() *AppGoodUpdate {
	agu.mutation.ClearCancellableBeforeStart()
	return agu
}

// SetProductPage sets the "product_page" field.
func (agu *AppGoodUpdate) SetProductPage(s string) *AppGoodUpdate {
	agu.mutation.SetProductPage(s)
	return agu
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableProductPage(s *string) *AppGoodUpdate {
	if s != nil {
		agu.SetProductPage(*s)
	}
	return agu
}

// ClearProductPage clears the value of the "product_page" field.
func (agu *AppGoodUpdate) ClearProductPage() *AppGoodUpdate {
	agu.mutation.ClearProductPage()
	return agu
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (agu *AppGoodUpdate) SetEnableSetCommission(b bool) *AppGoodUpdate {
	agu.mutation.SetEnableSetCommission(b)
	return agu
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableEnableSetCommission(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetEnableSetCommission(*b)
	}
	return agu
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (agu *AppGoodUpdate) ClearEnableSetCommission() *AppGoodUpdate {
	agu.mutation.ClearEnableSetCommission()
	return agu
}

// SetPosters sets the "posters" field.
func (agu *AppGoodUpdate) SetPosters(s []string) *AppGoodUpdate {
	agu.mutation.SetPosters(s)
	return agu
}

// ClearPosters clears the value of the "posters" field.
func (agu *AppGoodUpdate) ClearPosters() *AppGoodUpdate {
	agu.mutation.ClearPosters()
	return agu
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (agu *AppGoodUpdate) SetMinOrderAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMinOrderAmount(d)
	return agu
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMinOrderAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMinOrderAmount(*d)
	}
	return agu
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (agu *AppGoodUpdate) ClearMinOrderAmount() *AppGoodUpdate {
	agu.mutation.ClearMinOrderAmount()
	return agu
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (agu *AppGoodUpdate) SetMaxOrderAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMaxOrderAmount(d)
	return agu
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMaxOrderAmount(*d)
	}
	return agu
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (agu *AppGoodUpdate) ClearMaxOrderAmount() *AppGoodUpdate {
	agu.mutation.ClearMaxOrderAmount()
	return agu
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (agu *AppGoodUpdate) SetMaxUserAmount(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMaxUserAmount(d)
	return agu
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxUserAmount(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMaxUserAmount(*d)
	}
	return agu
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (agu *AppGoodUpdate) ClearMaxUserAmount() *AppGoodUpdate {
	agu.mutation.ClearMaxUserAmount()
	return agu
}

// SetMinOrderDuration sets the "min_order_duration" field.
func (agu *AppGoodUpdate) SetMinOrderDuration(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMinOrderDuration(d)
	return agu
}

// SetNillableMinOrderDuration sets the "min_order_duration" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMinOrderDuration(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMinOrderDuration(*d)
	}
	return agu
}

// ClearMinOrderDuration clears the value of the "min_order_duration" field.
func (agu *AppGoodUpdate) ClearMinOrderDuration() *AppGoodUpdate {
	agu.mutation.ClearMinOrderDuration()
	return agu
}

// SetMaxOrderDuration sets the "max_order_duration" field.
func (agu *AppGoodUpdate) SetMaxOrderDuration(d decimal.Decimal) *AppGoodUpdate {
	agu.mutation.SetMaxOrderDuration(d)
	return agu
}

// SetNillableMaxOrderDuration sets the "max_order_duration" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableMaxOrderDuration(d *decimal.Decimal) *AppGoodUpdate {
	if d != nil {
		agu.SetMaxOrderDuration(*d)
	}
	return agu
}

// ClearMaxOrderDuration clears the value of the "max_order_duration" field.
func (agu *AppGoodUpdate) ClearMaxOrderDuration() *AppGoodUpdate {
	agu.mutation.ClearMaxOrderDuration()
	return agu
}

// Mutation returns the AppGoodMutation object of the builder.
func (agu *AppGoodUpdate) Mutation() *AppGoodMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AppGoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := agu.defaults(); err != nil {
		return 0, err
	}
	if len(agu.hooks) == 0 {
		affected, err = agu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agu.mutation = mutation
			affected, err = agu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agu.hooks) - 1; i >= 0; i-- {
			if agu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AppGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AppGoodUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AppGoodUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agu *AppGoodUpdate) defaults() error {
	if _, ok := agu.mutation.UpdatedAt(); !ok {
		if appgood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgood.UpdateDefaultUpdatedAt()
		agu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (agu *AppGoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodUpdate {
	agu.modifiers = append(agu.modifiers, modifiers...)
	return agu
}

func (agu *AppGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgood.FieldID,
			},
		},
	}
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCreatedAt,
		})
	}
	if value, ok := agu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCreatedAt,
		})
	}
	if value, ok := agu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldUpdatedAt,
		})
	}
	if value, ok := agu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldUpdatedAt,
		})
	}
	if value, ok := agu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldDeletedAt,
		})
	}
	if value, ok := agu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldDeletedAt,
		})
	}
	if value, ok := agu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldEntID,
		})
	}
	if value, ok := agu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
	}
	if value, ok := agu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
	}
	if value, ok := agu.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
	}
	if agu.mutation.OnlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldOnline,
		})
	}
	if value, ok := agu.mutation.Visible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldVisible,
		})
	}
	if agu.mutation.VisibleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldVisible,
		})
	}
	if value, ok := agu.mutation.GoodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodName,
		})
	}
	if agu.mutation.GoodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldGoodName,
		})
	}
	if value, ok := agu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if agu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := agu.mutation.DisplayIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if value, ok := agu.mutation.AddedDisplayIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if agu.mutation.DisplayIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if value, ok := agu.mutation.PurchaseLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if value, ok := agu.mutation.AddedPurchaseLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if agu.mutation.PurchaseLimitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if value, ok := agu.mutation.SaleStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if value, ok := agu.mutation.AddedSaleStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if agu.mutation.SaleStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if value, ok := agu.mutation.SaleEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if value, ok := agu.mutation.AddedSaleEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if agu.mutation.SaleEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if value, ok := agu.mutation.ServiceStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if value, ok := agu.mutation.AddedServiceStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if agu.mutation.ServiceStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if value, ok := agu.mutation.TechnicalFeeRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldTechnicalFeeRatio,
		})
	}
	if agu.mutation.TechnicalFeeRatioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldTechnicalFeeRatio,
		})
	}
	if value, ok := agu.mutation.ElectricityFeeRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldElectricityFeeRatio,
		})
	}
	if agu.mutation.ElectricityFeeRatioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldElectricityFeeRatio,
		})
	}
	if value, ok := agu.mutation.Descriptions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDescriptions,
		})
	}
	if agu.mutation.DescriptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDescriptions,
		})
	}
	if value, ok := agu.mutation.GoodBanner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodBanner,
		})
	}
	if agu.mutation.GoodBannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldGoodBanner,
		})
	}
	if value, ok := agu.mutation.DisplayNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayNames,
		})
	}
	if agu.mutation.DisplayNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDisplayNames,
		})
	}
	if value, ok := agu.mutation.EnablePurchase(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnablePurchase,
		})
	}
	if agu.mutation.EnablePurchaseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnablePurchase,
		})
	}
	if value, ok := agu.mutation.EnableProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableProductPage,
		})
	}
	if agu.mutation.EnableProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnableProductPage,
		})
	}
	if value, ok := agu.mutation.CancelMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldCancelMode,
		})
	}
	if agu.mutation.CancelModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldCancelMode,
		})
	}
	if value, ok := agu.mutation.UserPurchaseLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldUserPurchaseLimit,
		})
	}
	if agu.mutation.UserPurchaseLimitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldUserPurchaseLimit,
		})
	}
	if value, ok := agu.mutation.DisplayColors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayColors,
		})
	}
	if agu.mutation.DisplayColorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDisplayColors,
		})
	}
	if value, ok := agu.mutation.CancellableBeforeStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if value, ok := agu.mutation.AddedCancellableBeforeStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if agu.mutation.CancellableBeforeStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if value, ok := agu.mutation.ProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldProductPage,
		})
	}
	if agu.mutation.ProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldProductPage,
		})
	}
	if value, ok := agu.mutation.EnableSetCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableSetCommission,
		})
	}
	if agu.mutation.EnableSetCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnableSetCommission,
		})
	}
	if value, ok := agu.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldPosters,
		})
	}
	if agu.mutation.PostersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldPosters,
		})
	}
	if value, ok := agu.mutation.MinOrderAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMinOrderAmount,
		})
	}
	if agu.mutation.MinOrderAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMinOrderAmount,
		})
	}
	if value, ok := agu.mutation.MaxOrderAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxOrderAmount,
		})
	}
	if agu.mutation.MaxOrderAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxOrderAmount,
		})
	}
	if value, ok := agu.mutation.MaxUserAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxUserAmount,
		})
	}
	if agu.mutation.MaxUserAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxUserAmount,
		})
	}
	if value, ok := agu.mutation.MinOrderDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMinOrderDuration,
		})
	}
	if agu.mutation.MinOrderDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMinOrderDuration,
		})
	}
	if value, ok := agu.mutation.MaxOrderDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxOrderDuration,
		})
	}
	if agu.mutation.MaxOrderDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxOrderDuration,
		})
	}
	_spec.Modifiers = agu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodUpdateOne is the builder for updating a single AppGood entity.
type AppGoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppGoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (aguo *AppGoodUpdateOne) SetCreatedAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetCreatedAt()
	aguo.mutation.SetCreatedAt(u)
	return aguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCreatedAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetCreatedAt(*u)
	}
	return aguo
}

// AddCreatedAt adds u to the "created_at" field.
func (aguo *AppGoodUpdateOne) AddCreatedAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddCreatedAt(u)
	return aguo
}

// SetUpdatedAt sets the "updated_at" field.
func (aguo *AppGoodUpdateOne) SetUpdatedAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetUpdatedAt()
	aguo.mutation.SetUpdatedAt(u)
	return aguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (aguo *AppGoodUpdateOne) AddUpdatedAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddUpdatedAt(u)
	return aguo
}

// SetDeletedAt sets the "deleted_at" field.
func (aguo *AppGoodUpdateOne) SetDeletedAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetDeletedAt()
	aguo.mutation.SetDeletedAt(u)
	return aguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableDeletedAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetDeletedAt(*u)
	}
	return aguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (aguo *AppGoodUpdateOne) AddDeletedAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddDeletedAt(u)
	return aguo
}

// SetEntID sets the "ent_id" field.
func (aguo *AppGoodUpdateOne) SetEntID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetEntID(u)
	return aguo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEntID(u *uuid.UUID) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetEntID(*u)
	}
	return aguo
}

// SetAppID sets the "app_id" field.
func (aguo *AppGoodUpdateOne) SetAppID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetAppID(u)
	return aguo
}

// SetGoodID sets the "good_id" field.
func (aguo *AppGoodUpdateOne) SetGoodID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetGoodID(u)
	return aguo
}

// SetOnline sets the "online" field.
func (aguo *AppGoodUpdateOne) SetOnline(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetOnline(b)
	return aguo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableOnline(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetOnline(*b)
	}
	return aguo
}

// ClearOnline clears the value of the "online" field.
func (aguo *AppGoodUpdateOne) ClearOnline() *AppGoodUpdateOne {
	aguo.mutation.ClearOnline()
	return aguo
}

// SetVisible sets the "visible" field.
func (aguo *AppGoodUpdateOne) SetVisible(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetVisible(b)
	return aguo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableVisible(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetVisible(*b)
	}
	return aguo
}

// ClearVisible clears the value of the "visible" field.
func (aguo *AppGoodUpdateOne) ClearVisible() *AppGoodUpdateOne {
	aguo.mutation.ClearVisible()
	return aguo
}

// SetGoodName sets the "good_name" field.
func (aguo *AppGoodUpdateOne) SetGoodName(s string) *AppGoodUpdateOne {
	aguo.mutation.SetGoodName(s)
	return aguo
}

// SetNillableGoodName sets the "good_name" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableGoodName(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetGoodName(*s)
	}
	return aguo
}

// ClearGoodName clears the value of the "good_name" field.
func (aguo *AppGoodUpdateOne) ClearGoodName() *AppGoodUpdateOne {
	aguo.mutation.ClearGoodName()
	return aguo
}

// SetPrice sets the "price" field.
func (aguo *AppGoodUpdateOne) SetPrice(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetPrice(d)
	return aguo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillablePrice(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetPrice(*d)
	}
	return aguo
}

// ClearPrice clears the value of the "price" field.
func (aguo *AppGoodUpdateOne) ClearPrice() *AppGoodUpdateOne {
	aguo.mutation.ClearPrice()
	return aguo
}

// SetDisplayIndex sets the "display_index" field.
func (aguo *AppGoodUpdateOne) SetDisplayIndex(i int32) *AppGoodUpdateOne {
	aguo.mutation.ResetDisplayIndex()
	aguo.mutation.SetDisplayIndex(i)
	return aguo
}

// SetNillableDisplayIndex sets the "display_index" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableDisplayIndex(i *int32) *AppGoodUpdateOne {
	if i != nil {
		aguo.SetDisplayIndex(*i)
	}
	return aguo
}

// AddDisplayIndex adds i to the "display_index" field.
func (aguo *AppGoodUpdateOne) AddDisplayIndex(i int32) *AppGoodUpdateOne {
	aguo.mutation.AddDisplayIndex(i)
	return aguo
}

// ClearDisplayIndex clears the value of the "display_index" field.
func (aguo *AppGoodUpdateOne) ClearDisplayIndex() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayIndex()
	return aguo
}

// SetPurchaseLimit sets the "purchase_limit" field.
func (aguo *AppGoodUpdateOne) SetPurchaseLimit(i int32) *AppGoodUpdateOne {
	aguo.mutation.ResetPurchaseLimit()
	aguo.mutation.SetPurchaseLimit(i)
	return aguo
}

// SetNillablePurchaseLimit sets the "purchase_limit" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillablePurchaseLimit(i *int32) *AppGoodUpdateOne {
	if i != nil {
		aguo.SetPurchaseLimit(*i)
	}
	return aguo
}

// AddPurchaseLimit adds i to the "purchase_limit" field.
func (aguo *AppGoodUpdateOne) AddPurchaseLimit(i int32) *AppGoodUpdateOne {
	aguo.mutation.AddPurchaseLimit(i)
	return aguo
}

// ClearPurchaseLimit clears the value of the "purchase_limit" field.
func (aguo *AppGoodUpdateOne) ClearPurchaseLimit() *AppGoodUpdateOne {
	aguo.mutation.ClearPurchaseLimit()
	return aguo
}

// SetSaleStartAt sets the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) SetSaleStartAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetSaleStartAt()
	aguo.mutation.SetSaleStartAt(u)
	return aguo
}

// SetNillableSaleStartAt sets the "sale_start_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableSaleStartAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetSaleStartAt(*u)
	}
	return aguo
}

// AddSaleStartAt adds u to the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) AddSaleStartAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddSaleStartAt(u)
	return aguo
}

// ClearSaleStartAt clears the value of the "sale_start_at" field.
func (aguo *AppGoodUpdateOne) ClearSaleStartAt() *AppGoodUpdateOne {
	aguo.mutation.ClearSaleStartAt()
	return aguo
}

// SetSaleEndAt sets the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) SetSaleEndAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetSaleEndAt()
	aguo.mutation.SetSaleEndAt(u)
	return aguo
}

// SetNillableSaleEndAt sets the "sale_end_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableSaleEndAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetSaleEndAt(*u)
	}
	return aguo
}

// AddSaleEndAt adds u to the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) AddSaleEndAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddSaleEndAt(u)
	return aguo
}

// ClearSaleEndAt clears the value of the "sale_end_at" field.
func (aguo *AppGoodUpdateOne) ClearSaleEndAt() *AppGoodUpdateOne {
	aguo.mutation.ClearSaleEndAt()
	return aguo
}

// SetServiceStartAt sets the "service_start_at" field.
func (aguo *AppGoodUpdateOne) SetServiceStartAt(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetServiceStartAt()
	aguo.mutation.SetServiceStartAt(u)
	return aguo
}

// SetNillableServiceStartAt sets the "service_start_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableServiceStartAt(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetServiceStartAt(*u)
	}
	return aguo
}

// AddServiceStartAt adds u to the "service_start_at" field.
func (aguo *AppGoodUpdateOne) AddServiceStartAt(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddServiceStartAt(u)
	return aguo
}

// ClearServiceStartAt clears the value of the "service_start_at" field.
func (aguo *AppGoodUpdateOne) ClearServiceStartAt() *AppGoodUpdateOne {
	aguo.mutation.ClearServiceStartAt()
	return aguo
}

// SetTechnicalFeeRatio sets the "technical_fee_ratio" field.
func (aguo *AppGoodUpdateOne) SetTechnicalFeeRatio(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetTechnicalFeeRatio(d)
	return aguo
}

// SetNillableTechnicalFeeRatio sets the "technical_fee_ratio" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableTechnicalFeeRatio(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetTechnicalFeeRatio(*d)
	}
	return aguo
}

// ClearTechnicalFeeRatio clears the value of the "technical_fee_ratio" field.
func (aguo *AppGoodUpdateOne) ClearTechnicalFeeRatio() *AppGoodUpdateOne {
	aguo.mutation.ClearTechnicalFeeRatio()
	return aguo
}

// SetElectricityFeeRatio sets the "electricity_fee_ratio" field.
func (aguo *AppGoodUpdateOne) SetElectricityFeeRatio(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetElectricityFeeRatio(d)
	return aguo
}

// SetNillableElectricityFeeRatio sets the "electricity_fee_ratio" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableElectricityFeeRatio(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetElectricityFeeRatio(*d)
	}
	return aguo
}

// ClearElectricityFeeRatio clears the value of the "electricity_fee_ratio" field.
func (aguo *AppGoodUpdateOne) ClearElectricityFeeRatio() *AppGoodUpdateOne {
	aguo.mutation.ClearElectricityFeeRatio()
	return aguo
}

// SetDescriptions sets the "descriptions" field.
func (aguo *AppGoodUpdateOne) SetDescriptions(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDescriptions(s)
	return aguo
}

// ClearDescriptions clears the value of the "descriptions" field.
func (aguo *AppGoodUpdateOne) ClearDescriptions() *AppGoodUpdateOne {
	aguo.mutation.ClearDescriptions()
	return aguo
}

// SetGoodBanner sets the "good_banner" field.
func (aguo *AppGoodUpdateOne) SetGoodBanner(s string) *AppGoodUpdateOne {
	aguo.mutation.SetGoodBanner(s)
	return aguo
}

// SetNillableGoodBanner sets the "good_banner" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableGoodBanner(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetGoodBanner(*s)
	}
	return aguo
}

// ClearGoodBanner clears the value of the "good_banner" field.
func (aguo *AppGoodUpdateOne) ClearGoodBanner() *AppGoodUpdateOne {
	aguo.mutation.ClearGoodBanner()
	return aguo
}

// SetDisplayNames sets the "display_names" field.
func (aguo *AppGoodUpdateOne) SetDisplayNames(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDisplayNames(s)
	return aguo
}

// ClearDisplayNames clears the value of the "display_names" field.
func (aguo *AppGoodUpdateOne) ClearDisplayNames() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayNames()
	return aguo
}

// SetEnablePurchase sets the "enable_purchase" field.
func (aguo *AppGoodUpdateOne) SetEnablePurchase(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnablePurchase(b)
	return aguo
}

// SetNillableEnablePurchase sets the "enable_purchase" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnablePurchase(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnablePurchase(*b)
	}
	return aguo
}

// ClearEnablePurchase clears the value of the "enable_purchase" field.
func (aguo *AppGoodUpdateOne) ClearEnablePurchase() *AppGoodUpdateOne {
	aguo.mutation.ClearEnablePurchase()
	return aguo
}

// SetEnableProductPage sets the "enable_product_page" field.
func (aguo *AppGoodUpdateOne) SetEnableProductPage(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnableProductPage(b)
	return aguo
}

// SetNillableEnableProductPage sets the "enable_product_page" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnableProductPage(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnableProductPage(*b)
	}
	return aguo
}

// ClearEnableProductPage clears the value of the "enable_product_page" field.
func (aguo *AppGoodUpdateOne) ClearEnableProductPage() *AppGoodUpdateOne {
	aguo.mutation.ClearEnableProductPage()
	return aguo
}

// SetCancelMode sets the "cancel_mode" field.
func (aguo *AppGoodUpdateOne) SetCancelMode(s string) *AppGoodUpdateOne {
	aguo.mutation.SetCancelMode(s)
	return aguo
}

// SetNillableCancelMode sets the "cancel_mode" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCancelMode(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetCancelMode(*s)
	}
	return aguo
}

// ClearCancelMode clears the value of the "cancel_mode" field.
func (aguo *AppGoodUpdateOne) ClearCancelMode() *AppGoodUpdateOne {
	aguo.mutation.ClearCancelMode()
	return aguo
}

// SetUserPurchaseLimit sets the "user_purchase_limit" field.
func (aguo *AppGoodUpdateOne) SetUserPurchaseLimit(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetUserPurchaseLimit(d)
	return aguo
}

// SetNillableUserPurchaseLimit sets the "user_purchase_limit" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableUserPurchaseLimit(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetUserPurchaseLimit(*d)
	}
	return aguo
}

// ClearUserPurchaseLimit clears the value of the "user_purchase_limit" field.
func (aguo *AppGoodUpdateOne) ClearUserPurchaseLimit() *AppGoodUpdateOne {
	aguo.mutation.ClearUserPurchaseLimit()
	return aguo
}

// SetDisplayColors sets the "display_colors" field.
func (aguo *AppGoodUpdateOne) SetDisplayColors(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetDisplayColors(s)
	return aguo
}

// ClearDisplayColors clears the value of the "display_colors" field.
func (aguo *AppGoodUpdateOne) ClearDisplayColors() *AppGoodUpdateOne {
	aguo.mutation.ClearDisplayColors()
	return aguo
}

// SetCancellableBeforeStart sets the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) SetCancellableBeforeStart(u uint32) *AppGoodUpdateOne {
	aguo.mutation.ResetCancellableBeforeStart()
	aguo.mutation.SetCancellableBeforeStart(u)
	return aguo
}

// SetNillableCancellableBeforeStart sets the "cancellable_before_start" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCancellableBeforeStart(u *uint32) *AppGoodUpdateOne {
	if u != nil {
		aguo.SetCancellableBeforeStart(*u)
	}
	return aguo
}

// AddCancellableBeforeStart adds u to the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) AddCancellableBeforeStart(u int32) *AppGoodUpdateOne {
	aguo.mutation.AddCancellableBeforeStart(u)
	return aguo
}

// ClearCancellableBeforeStart clears the value of the "cancellable_before_start" field.
func (aguo *AppGoodUpdateOne) ClearCancellableBeforeStart() *AppGoodUpdateOne {
	aguo.mutation.ClearCancellableBeforeStart()
	return aguo
}

// SetProductPage sets the "product_page" field.
func (aguo *AppGoodUpdateOne) SetProductPage(s string) *AppGoodUpdateOne {
	aguo.mutation.SetProductPage(s)
	return aguo
}

// SetNillableProductPage sets the "product_page" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableProductPage(s *string) *AppGoodUpdateOne {
	if s != nil {
		aguo.SetProductPage(*s)
	}
	return aguo
}

// ClearProductPage clears the value of the "product_page" field.
func (aguo *AppGoodUpdateOne) ClearProductPage() *AppGoodUpdateOne {
	aguo.mutation.ClearProductPage()
	return aguo
}

// SetEnableSetCommission sets the "enable_set_commission" field.
func (aguo *AppGoodUpdateOne) SetEnableSetCommission(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetEnableSetCommission(b)
	return aguo
}

// SetNillableEnableSetCommission sets the "enable_set_commission" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableEnableSetCommission(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetEnableSetCommission(*b)
	}
	return aguo
}

// ClearEnableSetCommission clears the value of the "enable_set_commission" field.
func (aguo *AppGoodUpdateOne) ClearEnableSetCommission() *AppGoodUpdateOne {
	aguo.mutation.ClearEnableSetCommission()
	return aguo
}

// SetPosters sets the "posters" field.
func (aguo *AppGoodUpdateOne) SetPosters(s []string) *AppGoodUpdateOne {
	aguo.mutation.SetPosters(s)
	return aguo
}

// ClearPosters clears the value of the "posters" field.
func (aguo *AppGoodUpdateOne) ClearPosters() *AppGoodUpdateOne {
	aguo.mutation.ClearPosters()
	return aguo
}

// SetMinOrderAmount sets the "min_order_amount" field.
func (aguo *AppGoodUpdateOne) SetMinOrderAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMinOrderAmount(d)
	return aguo
}

// SetNillableMinOrderAmount sets the "min_order_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMinOrderAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMinOrderAmount(*d)
	}
	return aguo
}

// ClearMinOrderAmount clears the value of the "min_order_amount" field.
func (aguo *AppGoodUpdateOne) ClearMinOrderAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMinOrderAmount()
	return aguo
}

// SetMaxOrderAmount sets the "max_order_amount" field.
func (aguo *AppGoodUpdateOne) SetMaxOrderAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMaxOrderAmount(d)
	return aguo
}

// SetNillableMaxOrderAmount sets the "max_order_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxOrderAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMaxOrderAmount(*d)
	}
	return aguo
}

// ClearMaxOrderAmount clears the value of the "max_order_amount" field.
func (aguo *AppGoodUpdateOne) ClearMaxOrderAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxOrderAmount()
	return aguo
}

// SetMaxUserAmount sets the "max_user_amount" field.
func (aguo *AppGoodUpdateOne) SetMaxUserAmount(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMaxUserAmount(d)
	return aguo
}

// SetNillableMaxUserAmount sets the "max_user_amount" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxUserAmount(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMaxUserAmount(*d)
	}
	return aguo
}

// ClearMaxUserAmount clears the value of the "max_user_amount" field.
func (aguo *AppGoodUpdateOne) ClearMaxUserAmount() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxUserAmount()
	return aguo
}

// SetMinOrderDuration sets the "min_order_duration" field.
func (aguo *AppGoodUpdateOne) SetMinOrderDuration(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMinOrderDuration(d)
	return aguo
}

// SetNillableMinOrderDuration sets the "min_order_duration" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMinOrderDuration(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMinOrderDuration(*d)
	}
	return aguo
}

// ClearMinOrderDuration clears the value of the "min_order_duration" field.
func (aguo *AppGoodUpdateOne) ClearMinOrderDuration() *AppGoodUpdateOne {
	aguo.mutation.ClearMinOrderDuration()
	return aguo
}

// SetMaxOrderDuration sets the "max_order_duration" field.
func (aguo *AppGoodUpdateOne) SetMaxOrderDuration(d decimal.Decimal) *AppGoodUpdateOne {
	aguo.mutation.SetMaxOrderDuration(d)
	return aguo
}

// SetNillableMaxOrderDuration sets the "max_order_duration" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableMaxOrderDuration(d *decimal.Decimal) *AppGoodUpdateOne {
	if d != nil {
		aguo.SetMaxOrderDuration(*d)
	}
	return aguo
}

// ClearMaxOrderDuration clears the value of the "max_order_duration" field.
func (aguo *AppGoodUpdateOne) ClearMaxOrderDuration() *AppGoodUpdateOne {
	aguo.mutation.ClearMaxOrderDuration()
	return aguo
}

// Mutation returns the AppGoodMutation object of the builder.
func (aguo *AppGoodUpdateOne) Mutation() *AppGoodMutation {
	return aguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AppGoodUpdateOne) Select(field string, fields ...string) *AppGoodUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AppGood entity.
func (aguo *AppGoodUpdateOne) Save(ctx context.Context) (*AppGood, error) {
	var (
		err  error
		node *AppGood
	)
	if err := aguo.defaults(); err != nil {
		return nil, err
	}
	if len(aguo.hooks) == 0 {
		node, err = aguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aguo.mutation = mutation
			node, err = aguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aguo.hooks) - 1; i >= 0; i-- {
			if aguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) SaveX(ctx context.Context) *AppGood {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AppGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aguo *AppGoodUpdateOne) defaults() error {
	if _, ok := aguo.mutation.UpdatedAt(); !ok {
		if appgood.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appgood.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appgood.UpdateDefaultUpdatedAt()
		aguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aguo *AppGoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppGoodUpdateOne {
	aguo.modifiers = append(aguo.modifiers, modifiers...)
	return aguo
}

func (aguo *AppGoodUpdateOne) sqlSave(ctx context.Context) (_node *AppGood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: appgood.FieldID,
			},
		},
	}
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgood.FieldID)
		for _, f := range fields {
			if !appgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCreatedAt,
		})
	}
	if value, ok := aguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCreatedAt,
		})
	}
	if value, ok := aguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldUpdatedAt,
		})
	}
	if value, ok := aguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldUpdatedAt,
		})
	}
	if value, ok := aguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldDeletedAt,
		})
	}
	if value, ok := aguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldDeletedAt,
		})
	}
	if value, ok := aguo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldEntID,
		})
	}
	if value, ok := aguo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
	}
	if value, ok := aguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
	}
	if value, ok := aguo.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
	}
	if aguo.mutation.OnlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldOnline,
		})
	}
	if value, ok := aguo.mutation.Visible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldVisible,
		})
	}
	if aguo.mutation.VisibleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldVisible,
		})
	}
	if value, ok := aguo.mutation.GoodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodName,
		})
	}
	if aguo.mutation.GoodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldGoodName,
		})
	}
	if value, ok := aguo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if aguo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := aguo.mutation.DisplayIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if value, ok := aguo.mutation.AddedDisplayIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if aguo.mutation.DisplayIndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appgood.FieldDisplayIndex,
		})
	}
	if value, ok := aguo.mutation.PurchaseLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if value, ok := aguo.mutation.AddedPurchaseLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if aguo.mutation.PurchaseLimitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appgood.FieldPurchaseLimit,
		})
	}
	if value, ok := aguo.mutation.SaleStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if value, ok := aguo.mutation.AddedSaleStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if aguo.mutation.SaleStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldSaleStartAt,
		})
	}
	if value, ok := aguo.mutation.SaleEndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if value, ok := aguo.mutation.AddedSaleEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if aguo.mutation.SaleEndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldSaleEndAt,
		})
	}
	if value, ok := aguo.mutation.ServiceStartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if value, ok := aguo.mutation.AddedServiceStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if aguo.mutation.ServiceStartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldServiceStartAt,
		})
	}
	if value, ok := aguo.mutation.TechnicalFeeRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldTechnicalFeeRatio,
		})
	}
	if aguo.mutation.TechnicalFeeRatioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldTechnicalFeeRatio,
		})
	}
	if value, ok := aguo.mutation.ElectricityFeeRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldElectricityFeeRatio,
		})
	}
	if aguo.mutation.ElectricityFeeRatioCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldElectricityFeeRatio,
		})
	}
	if value, ok := aguo.mutation.Descriptions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDescriptions,
		})
	}
	if aguo.mutation.DescriptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDescriptions,
		})
	}
	if value, ok := aguo.mutation.GoodBanner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldGoodBanner,
		})
	}
	if aguo.mutation.GoodBannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldGoodBanner,
		})
	}
	if value, ok := aguo.mutation.DisplayNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayNames,
		})
	}
	if aguo.mutation.DisplayNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDisplayNames,
		})
	}
	if value, ok := aguo.mutation.EnablePurchase(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnablePurchase,
		})
	}
	if aguo.mutation.EnablePurchaseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnablePurchase,
		})
	}
	if value, ok := aguo.mutation.EnableProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableProductPage,
		})
	}
	if aguo.mutation.EnableProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnableProductPage,
		})
	}
	if value, ok := aguo.mutation.CancelMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldCancelMode,
		})
	}
	if aguo.mutation.CancelModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldCancelMode,
		})
	}
	if value, ok := aguo.mutation.UserPurchaseLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldUserPurchaseLimit,
		})
	}
	if aguo.mutation.UserPurchaseLimitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldUserPurchaseLimit,
		})
	}
	if value, ok := aguo.mutation.DisplayColors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldDisplayColors,
		})
	}
	if aguo.mutation.DisplayColorsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldDisplayColors,
		})
	}
	if value, ok := aguo.mutation.CancellableBeforeStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if value, ok := aguo.mutation.AddedCancellableBeforeStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if aguo.mutation.CancellableBeforeStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: appgood.FieldCancellableBeforeStart,
		})
	}
	if value, ok := aguo.mutation.ProductPage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgood.FieldProductPage,
		})
	}
	if aguo.mutation.ProductPageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appgood.FieldProductPage,
		})
	}
	if value, ok := aguo.mutation.EnableSetCommission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldEnableSetCommission,
		})
	}
	if aguo.mutation.EnableSetCommissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: appgood.FieldEnableSetCommission,
		})
	}
	if value, ok := aguo.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appgood.FieldPosters,
		})
	}
	if aguo.mutation.PostersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: appgood.FieldPosters,
		})
	}
	if value, ok := aguo.mutation.MinOrderAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMinOrderAmount,
		})
	}
	if aguo.mutation.MinOrderAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMinOrderAmount,
		})
	}
	if value, ok := aguo.mutation.MaxOrderAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxOrderAmount,
		})
	}
	if aguo.mutation.MaxOrderAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxOrderAmount,
		})
	}
	if value, ok := aguo.mutation.MaxUserAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxUserAmount,
		})
	}
	if aguo.mutation.MaxUserAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxUserAmount,
		})
	}
	if value, ok := aguo.mutation.MinOrderDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMinOrderDuration,
		})
	}
	if aguo.mutation.MinOrderDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMinOrderDuration,
		})
	}
	if value, ok := aguo.mutation.MaxOrderDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: appgood.FieldMaxOrderDuration,
		})
	}
	if aguo.mutation.MaxOrderDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: appgood.FieldMaxOrderDuration,
		})
	}
	_spec.Modifiers = aguo.modifiers
	_node = &AppGood{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
