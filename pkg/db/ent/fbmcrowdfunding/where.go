// Code generated by ent, DO NOT EDIT.

package fbmcrowdfunding

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// MinDepositAmount applies equality check predicate on the "min_deposit_amount" field. It's identical to MinDepositAmountEQ.
func MinDepositAmount(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinDepositAmount), v))
	})
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// TargetAmount applies equality check predicate on the "target_amount" field. It's identical to TargetAmountEQ.
func TargetAmount(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetAmount), v))
	})
}

// DepositStartAt applies equality check predicate on the "deposit_start_at" field. It's identical to DepositStartAtEQ.
func DepositStartAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositStartAt), v))
	})
}

// DepositEndAt applies equality check predicate on the "deposit_end_at" field. It's identical to DepositEndAtEQ.
func DepositEndAt(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositEndAt), v))
	})
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractAddress), v))
	})
}

// DepositCoinTypeID applies equality check predicate on the "deposit_coin_type_id" field. It's identical to DepositCoinTypeIDEQ.
func DepositCoinTypeID(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositCoinTypeID), v))
	})
}

// Redeemable applies equality check predicate on the "redeemable" field. It's identical to RedeemableEQ.
func Redeemable(v bool) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedeemable), v))
	})
}

// RedeemDelayHours applies equality check predicate on the "redeem_delay_hours" field. It's identical to RedeemDelayHoursEQ.
func RedeemDelayHours(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedeemDelayHours), v))
	})
}

// DurationType applies equality check predicate on the "duration_type" field. It's identical to DurationTypeEQ.
func DurationType(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// MinDepositAmountEQ applies the EQ predicate on the "min_deposit_amount" field.
func MinDepositAmountEQ(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountNEQ applies the NEQ predicate on the "min_deposit_amount" field.
func MinDepositAmountNEQ(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountIn applies the In predicate on the "min_deposit_amount" field.
func MinDepositAmountIn(vs ...decimal.Decimal) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinDepositAmount), v...))
	})
}

// MinDepositAmountNotIn applies the NotIn predicate on the "min_deposit_amount" field.
func MinDepositAmountNotIn(vs ...decimal.Decimal) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinDepositAmount), v...))
	})
}

// MinDepositAmountGT applies the GT predicate on the "min_deposit_amount" field.
func MinDepositAmountGT(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountGTE applies the GTE predicate on the "min_deposit_amount" field.
func MinDepositAmountGTE(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountLT applies the LT predicate on the "min_deposit_amount" field.
func MinDepositAmountLT(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountLTE applies the LTE predicate on the "min_deposit_amount" field.
func MinDepositAmountLTE(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinDepositAmount), v))
	})
}

// MinDepositAmountIsNil applies the IsNil predicate on the "min_deposit_amount" field.
func MinDepositAmountIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinDepositAmount)))
	})
}

// MinDepositAmountNotNil applies the NotNil predicate on the "min_deposit_amount" field.
func MinDepositAmountNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinDepositAmount)))
	})
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIsNil applies the IsNil predicate on the "delivery_at" field.
func DeliveryAtIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeliveryAt)))
	})
}

// DeliveryAtNotNil applies the NotNil predicate on the "delivery_at" field.
func DeliveryAtNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeliveryAt)))
	})
}

// TargetAmountEQ applies the EQ predicate on the "target_amount" field.
func TargetAmountEQ(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountNEQ applies the NEQ predicate on the "target_amount" field.
func TargetAmountNEQ(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountIn applies the In predicate on the "target_amount" field.
func TargetAmountIn(vs ...decimal.Decimal) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTargetAmount), v...))
	})
}

// TargetAmountNotIn applies the NotIn predicate on the "target_amount" field.
func TargetAmountNotIn(vs ...decimal.Decimal) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTargetAmount), v...))
	})
}

// TargetAmountGT applies the GT predicate on the "target_amount" field.
func TargetAmountGT(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountGTE applies the GTE predicate on the "target_amount" field.
func TargetAmountGTE(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountLT applies the LT predicate on the "target_amount" field.
func TargetAmountLT(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountLTE applies the LTE predicate on the "target_amount" field.
func TargetAmountLTE(v decimal.Decimal) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountIsNil applies the IsNil predicate on the "target_amount" field.
func TargetAmountIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetAmount)))
	})
}

// TargetAmountNotNil applies the NotNil predicate on the "target_amount" field.
func TargetAmountNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetAmount)))
	})
}

// DepositStartAtEQ applies the EQ predicate on the "deposit_start_at" field.
func DepositStartAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtNEQ applies the NEQ predicate on the "deposit_start_at" field.
func DepositStartAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtIn applies the In predicate on the "deposit_start_at" field.
func DepositStartAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepositStartAt), v...))
	})
}

// DepositStartAtNotIn applies the NotIn predicate on the "deposit_start_at" field.
func DepositStartAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepositStartAt), v...))
	})
}

// DepositStartAtGT applies the GT predicate on the "deposit_start_at" field.
func DepositStartAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtGTE applies the GTE predicate on the "deposit_start_at" field.
func DepositStartAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtLT applies the LT predicate on the "deposit_start_at" field.
func DepositStartAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtLTE applies the LTE predicate on the "deposit_start_at" field.
func DepositStartAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositStartAt), v))
	})
}

// DepositStartAtIsNil applies the IsNil predicate on the "deposit_start_at" field.
func DepositStartAtIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepositStartAt)))
	})
}

// DepositStartAtNotNil applies the NotNil predicate on the "deposit_start_at" field.
func DepositStartAtNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepositStartAt)))
	})
}

// DepositEndAtEQ applies the EQ predicate on the "deposit_end_at" field.
func DepositEndAtEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtNEQ applies the NEQ predicate on the "deposit_end_at" field.
func DepositEndAtNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtIn applies the In predicate on the "deposit_end_at" field.
func DepositEndAtIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepositEndAt), v...))
	})
}

// DepositEndAtNotIn applies the NotIn predicate on the "deposit_end_at" field.
func DepositEndAtNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepositEndAt), v...))
	})
}

// DepositEndAtGT applies the GT predicate on the "deposit_end_at" field.
func DepositEndAtGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtGTE applies the GTE predicate on the "deposit_end_at" field.
func DepositEndAtGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtLT applies the LT predicate on the "deposit_end_at" field.
func DepositEndAtLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtLTE applies the LTE predicate on the "deposit_end_at" field.
func DepositEndAtLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositEndAt), v))
	})
}

// DepositEndAtIsNil applies the IsNil predicate on the "deposit_end_at" field.
func DepositEndAtIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepositEndAt)))
	})
}

// DepositEndAtNotNil applies the NotNil predicate on the "deposit_end_at" field.
func DepositEndAtNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepositEndAt)))
	})
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContractAddress), v))
	})
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContractAddress), v))
	})
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContractAddress), v...))
	})
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContractAddress), v...))
	})
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContractAddress), v))
	})
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContractAddress), v))
	})
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContractAddress), v))
	})
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContractAddress), v))
	})
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContractAddress), v))
	})
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContractAddress), v))
	})
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContractAddress), v))
	})
}

// ContractAddressIsNil applies the IsNil predicate on the "contract_address" field.
func ContractAddressIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContractAddress)))
	})
}

// ContractAddressNotNil applies the NotNil predicate on the "contract_address" field.
func ContractAddressNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContractAddress)))
	})
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContractAddress), v))
	})
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContractAddress), v))
	})
}

// DepositCoinTypeIDEQ applies the EQ predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDNEQ applies the NEQ predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDNEQ(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDIn applies the In predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepositCoinTypeID), v...))
	})
}

// DepositCoinTypeIDNotIn applies the NotIn predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDNotIn(vs ...uuid.UUID) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepositCoinTypeID), v...))
	})
}

// DepositCoinTypeIDGT applies the GT predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDGT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDGTE applies the GTE predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDGTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDLT applies the LT predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDLT(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDLTE applies the LTE predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDLTE(v uuid.UUID) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositCoinTypeID), v))
	})
}

// DepositCoinTypeIDIsNil applies the IsNil predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepositCoinTypeID)))
	})
}

// DepositCoinTypeIDNotNil applies the NotNil predicate on the "deposit_coin_type_id" field.
func DepositCoinTypeIDNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepositCoinTypeID)))
	})
}

// RedeemableEQ applies the EQ predicate on the "redeemable" field.
func RedeemableEQ(v bool) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedeemable), v))
	})
}

// RedeemableNEQ applies the NEQ predicate on the "redeemable" field.
func RedeemableNEQ(v bool) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedeemable), v))
	})
}

// RedeemableIsNil applies the IsNil predicate on the "redeemable" field.
func RedeemableIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRedeemable)))
	})
}

// RedeemableNotNil applies the NotNil predicate on the "redeemable" field.
func RedeemableNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRedeemable)))
	})
}

// RedeemDelayHoursEQ applies the EQ predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursNEQ applies the NEQ predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursNEQ(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursIn applies the In predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRedeemDelayHours), v...))
	})
}

// RedeemDelayHoursNotIn applies the NotIn predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursNotIn(vs ...uint32) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRedeemDelayHours), v...))
	})
}

// RedeemDelayHoursGT applies the GT predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursGT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursGTE applies the GTE predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursGTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursLT applies the LT predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursLT(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursLTE applies the LTE predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursLTE(v uint32) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedeemDelayHours), v))
	})
}

// RedeemDelayHoursIsNil applies the IsNil predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRedeemDelayHours)))
	})
}

// RedeemDelayHoursNotNil applies the NotNil predicate on the "redeem_delay_hours" field.
func RedeemDelayHoursNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRedeemDelayHours)))
	})
}

// DurationTypeEQ applies the EQ predicate on the "duration_type" field.
func DurationTypeEQ(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeNEQ applies the NEQ predicate on the "duration_type" field.
func DurationTypeNEQ(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeIn applies the In predicate on the "duration_type" field.
func DurationTypeIn(vs ...string) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDurationType), v...))
	})
}

// DurationTypeNotIn applies the NotIn predicate on the "duration_type" field.
func DurationTypeNotIn(vs ...string) predicate.FbmCrowdFunding {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDurationType), v...))
	})
}

// DurationTypeGT applies the GT predicate on the "duration_type" field.
func DurationTypeGT(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationType), v))
	})
}

// DurationTypeGTE applies the GTE predicate on the "duration_type" field.
func DurationTypeGTE(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationType), v))
	})
}

// DurationTypeLT applies the LT predicate on the "duration_type" field.
func DurationTypeLT(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationType), v))
	})
}

// DurationTypeLTE applies the LTE predicate on the "duration_type" field.
func DurationTypeLTE(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationType), v))
	})
}

// DurationTypeContains applies the Contains predicate on the "duration_type" field.
func DurationTypeContains(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDurationType), v))
	})
}

// DurationTypeHasPrefix applies the HasPrefix predicate on the "duration_type" field.
func DurationTypeHasPrefix(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDurationType), v))
	})
}

// DurationTypeHasSuffix applies the HasSuffix predicate on the "duration_type" field.
func DurationTypeHasSuffix(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDurationType), v))
	})
}

// DurationTypeIsNil applies the IsNil predicate on the "duration_type" field.
func DurationTypeIsNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDurationType)))
	})
}

// DurationTypeNotNil applies the NotNil predicate on the "duration_type" field.
func DurationTypeNotNil() predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDurationType)))
	})
}

// DurationTypeEqualFold applies the EqualFold predicate on the "duration_type" field.
func DurationTypeEqualFold(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDurationType), v))
	})
}

// DurationTypeContainsFold applies the ContainsFold predicate on the "duration_type" field.
func DurationTypeContainsFold(v string) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDurationType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FbmCrowdFunding) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FbmCrowdFunding) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FbmCrowdFunding) predicate.FbmCrowdFunding {
	return predicate.FbmCrowdFunding(func(s *sql.Selector) {
		p(s.Not())
	})
}
