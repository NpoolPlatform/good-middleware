// Code generated by ent, DO NOT EDIT.

package extrainfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLikes), v))
	})
}

// Dislikes applies equality check predicate on the "dislikes" field. It's identical to DislikesEQ.
func Dislikes(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDislikes), v))
	})
}

// RecommendCount applies equality check predicate on the "recommend_count" field. It's identical to RecommendCountEQ.
func RecommendCount(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommendCount), v))
	})
}

// CommentCount applies equality check predicate on the "comment_count" field. It's identical to CommentCountEQ.
func CommentCount(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentCount), v))
	})
}

// ScoreCount applies equality check predicate on the "score_count" field. It's identical to ScoreCountEQ.
func ScoreCount(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScoreCount), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// PostersIsNil applies the IsNil predicate on the "posters" field.
func PostersIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPosters)))
	})
}

// PostersNotNil applies the NotNil predicate on the "posters" field.
func PostersNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPosters)))
	})
}

// LabelsIsNil applies the IsNil predicate on the "labels" field.
func LabelsIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLabels)))
	})
}

// LabelsNotNil applies the NotNil predicate on the "labels" field.
func LabelsNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLabels)))
	})
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLikes), v))
	})
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLikes), v))
	})
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLikes), v...))
	})
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLikes), v...))
	})
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLikes), v))
	})
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLikes), v))
	})
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLikes), v))
	})
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLikes), v))
	})
}

// LikesIsNil applies the IsNil predicate on the "likes" field.
func LikesIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLikes)))
	})
}

// LikesNotNil applies the NotNil predicate on the "likes" field.
func LikesNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLikes)))
	})
}

// DislikesEQ applies the EQ predicate on the "dislikes" field.
func DislikesEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDislikes), v))
	})
}

// DislikesNEQ applies the NEQ predicate on the "dislikes" field.
func DislikesNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDislikes), v))
	})
}

// DislikesIn applies the In predicate on the "dislikes" field.
func DislikesIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDislikes), v...))
	})
}

// DislikesNotIn applies the NotIn predicate on the "dislikes" field.
func DislikesNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDislikes), v...))
	})
}

// DislikesGT applies the GT predicate on the "dislikes" field.
func DislikesGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDislikes), v))
	})
}

// DislikesGTE applies the GTE predicate on the "dislikes" field.
func DislikesGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDislikes), v))
	})
}

// DislikesLT applies the LT predicate on the "dislikes" field.
func DislikesLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDislikes), v))
	})
}

// DislikesLTE applies the LTE predicate on the "dislikes" field.
func DislikesLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDislikes), v))
	})
}

// DislikesIsNil applies the IsNil predicate on the "dislikes" field.
func DislikesIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDislikes)))
	})
}

// DislikesNotNil applies the NotNil predicate on the "dislikes" field.
func DislikesNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDislikes)))
	})
}

// RecommendCountEQ applies the EQ predicate on the "recommend_count" field.
func RecommendCountEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountNEQ applies the NEQ predicate on the "recommend_count" field.
func RecommendCountNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountIn applies the In predicate on the "recommend_count" field.
func RecommendCountIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecommendCount), v...))
	})
}

// RecommendCountNotIn applies the NotIn predicate on the "recommend_count" field.
func RecommendCountNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecommendCount), v...))
	})
}

// RecommendCountGT applies the GT predicate on the "recommend_count" field.
func RecommendCountGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountGTE applies the GTE predicate on the "recommend_count" field.
func RecommendCountGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountLT applies the LT predicate on the "recommend_count" field.
func RecommendCountLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountLTE applies the LTE predicate on the "recommend_count" field.
func RecommendCountLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecommendCount), v))
	})
}

// RecommendCountIsNil applies the IsNil predicate on the "recommend_count" field.
func RecommendCountIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecommendCount)))
	})
}

// RecommendCountNotNil applies the NotNil predicate on the "recommend_count" field.
func RecommendCountNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecommendCount)))
	})
}

// CommentCountEQ applies the EQ predicate on the "comment_count" field.
func CommentCountEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentCount), v))
	})
}

// CommentCountNEQ applies the NEQ predicate on the "comment_count" field.
func CommentCountNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommentCount), v))
	})
}

// CommentCountIn applies the In predicate on the "comment_count" field.
func CommentCountIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommentCount), v...))
	})
}

// CommentCountNotIn applies the NotIn predicate on the "comment_count" field.
func CommentCountNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommentCount), v...))
	})
}

// CommentCountGT applies the GT predicate on the "comment_count" field.
func CommentCountGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommentCount), v))
	})
}

// CommentCountGTE applies the GTE predicate on the "comment_count" field.
func CommentCountGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommentCount), v))
	})
}

// CommentCountLT applies the LT predicate on the "comment_count" field.
func CommentCountLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommentCount), v))
	})
}

// CommentCountLTE applies the LTE predicate on the "comment_count" field.
func CommentCountLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommentCount), v))
	})
}

// CommentCountIsNil applies the IsNil predicate on the "comment_count" field.
func CommentCountIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommentCount)))
	})
}

// CommentCountNotNil applies the NotNil predicate on the "comment_count" field.
func CommentCountNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommentCount)))
	})
}

// ScoreCountEQ applies the EQ predicate on the "score_count" field.
func ScoreCountEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScoreCount), v))
	})
}

// ScoreCountNEQ applies the NEQ predicate on the "score_count" field.
func ScoreCountNEQ(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScoreCount), v))
	})
}

// ScoreCountIn applies the In predicate on the "score_count" field.
func ScoreCountIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScoreCount), v...))
	})
}

// ScoreCountNotIn applies the NotIn predicate on the "score_count" field.
func ScoreCountNotIn(vs ...uint32) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScoreCount), v...))
	})
}

// ScoreCountGT applies the GT predicate on the "score_count" field.
func ScoreCountGT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScoreCount), v))
	})
}

// ScoreCountGTE applies the GTE predicate on the "score_count" field.
func ScoreCountGTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScoreCount), v))
	})
}

// ScoreCountLT applies the LT predicate on the "score_count" field.
func ScoreCountLT(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScoreCount), v))
	})
}

// ScoreCountLTE applies the LTE predicate on the "score_count" field.
func ScoreCountLTE(v uint32) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScoreCount), v))
	})
}

// ScoreCountIsNil applies the IsNil predicate on the "score_count" field.
func ScoreCountIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScoreCount)))
	})
}

// ScoreCountNotNil applies the NotNil predicate on the "score_count" field.
func ScoreCountNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScoreCount)))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...decimal.Decimal) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...decimal.Decimal) predicate.ExtraInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v decimal.Decimal) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScore)))
	})
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScore)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExtraInfo) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExtraInfo) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExtraInfo) predicate.ExtraInfo {
	return predicate.ExtraInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
