// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/applegacypowerrental"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppLegacyPowerRentalCreate is the builder for creating a AppLegacyPowerRental entity.
type AppLegacyPowerRentalCreate struct {
	config
	mutation *AppLegacyPowerRentalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (alprc *AppLegacyPowerRentalCreate) SetCreatedAt(u uint32) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetCreatedAt(u)
	return alprc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableCreatedAt(u *uint32) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetCreatedAt(*u)
	}
	return alprc
}

// SetUpdatedAt sets the "updated_at" field.
func (alprc *AppLegacyPowerRentalCreate) SetUpdatedAt(u uint32) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetUpdatedAt(u)
	return alprc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableUpdatedAt(u *uint32) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetUpdatedAt(*u)
	}
	return alprc
}

// SetDeletedAt sets the "deleted_at" field.
func (alprc *AppLegacyPowerRentalCreate) SetDeletedAt(u uint32) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetDeletedAt(u)
	return alprc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableDeletedAt(u *uint32) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetDeletedAt(*u)
	}
	return alprc
}

// SetEntID sets the "ent_id" field.
func (alprc *AppLegacyPowerRentalCreate) SetEntID(u uuid.UUID) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetEntID(u)
	return alprc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableEntID(u *uuid.UUID) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetEntID(*u)
	}
	return alprc
}

// SetAppID sets the "app_id" field.
func (alprc *AppLegacyPowerRentalCreate) SetAppID(u uuid.UUID) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetAppID(u)
	return alprc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableAppID(u *uuid.UUID) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetAppID(*u)
	}
	return alprc
}

// SetGoodID sets the "good_id" field.
func (alprc *AppLegacyPowerRentalCreate) SetGoodID(u uuid.UUID) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetGoodID(u)
	return alprc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableGoodID(u *uuid.UUID) *AppLegacyPowerRentalCreate {
	if u != nil {
		alprc.SetGoodID(*u)
	}
	return alprc
}

// SetTechniqueFeeRatio sets the "technique_fee_ratio" field.
func (alprc *AppLegacyPowerRentalCreate) SetTechniqueFeeRatio(d decimal.Decimal) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetTechniqueFeeRatio(d)
	return alprc
}

// SetNillableTechniqueFeeRatio sets the "technique_fee_ratio" field if the given value is not nil.
func (alprc *AppLegacyPowerRentalCreate) SetNillableTechniqueFeeRatio(d *decimal.Decimal) *AppLegacyPowerRentalCreate {
	if d != nil {
		alprc.SetTechniqueFeeRatio(*d)
	}
	return alprc
}

// SetID sets the "id" field.
func (alprc *AppLegacyPowerRentalCreate) SetID(u uint32) *AppLegacyPowerRentalCreate {
	alprc.mutation.SetID(u)
	return alprc
}

// Mutation returns the AppLegacyPowerRentalMutation object of the builder.
func (alprc *AppLegacyPowerRentalCreate) Mutation() *AppLegacyPowerRentalMutation {
	return alprc.mutation
}

// Save creates the AppLegacyPowerRental in the database.
func (alprc *AppLegacyPowerRentalCreate) Save(ctx context.Context) (*AppLegacyPowerRental, error) {
	var (
		err  error
		node *AppLegacyPowerRental
	)
	if err := alprc.defaults(); err != nil {
		return nil, err
	}
	if len(alprc.hooks) == 0 {
		if err = alprc.check(); err != nil {
			return nil, err
		}
		node, err = alprc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppLegacyPowerRentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = alprc.check(); err != nil {
				return nil, err
			}
			alprc.mutation = mutation
			if node, err = alprc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(alprc.hooks) - 1; i >= 0; i-- {
			if alprc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alprc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, alprc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppLegacyPowerRental)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppLegacyPowerRentalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (alprc *AppLegacyPowerRentalCreate) SaveX(ctx context.Context) *AppLegacyPowerRental {
	v, err := alprc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alprc *AppLegacyPowerRentalCreate) Exec(ctx context.Context) error {
	_, err := alprc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alprc *AppLegacyPowerRentalCreate) ExecX(ctx context.Context) {
	if err := alprc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alprc *AppLegacyPowerRentalCreate) defaults() error {
	if _, ok := alprc.mutation.CreatedAt(); !ok {
		if applegacypowerrental.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultCreatedAt()
		alprc.mutation.SetCreatedAt(v)
	}
	if _, ok := alprc.mutation.UpdatedAt(); !ok {
		if applegacypowerrental.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultUpdatedAt()
		alprc.mutation.SetUpdatedAt(v)
	}
	if _, ok := alprc.mutation.DeletedAt(); !ok {
		if applegacypowerrental.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultDeletedAt()
		alprc.mutation.SetDeletedAt(v)
	}
	if _, ok := alprc.mutation.EntID(); !ok {
		if applegacypowerrental.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultEntID()
		alprc.mutation.SetEntID(v)
	}
	if _, ok := alprc.mutation.AppID(); !ok {
		if applegacypowerrental.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultAppID()
		alprc.mutation.SetAppID(v)
	}
	if _, ok := alprc.mutation.GoodID(); !ok {
		if applegacypowerrental.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized applegacypowerrental.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := applegacypowerrental.DefaultGoodID()
		alprc.mutation.SetGoodID(v)
	}
	if _, ok := alprc.mutation.TechniqueFeeRatio(); !ok {
		v := applegacypowerrental.DefaultTechniqueFeeRatio
		alprc.mutation.SetTechniqueFeeRatio(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (alprc *AppLegacyPowerRentalCreate) check() error {
	if _, ok := alprc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppLegacyPowerRental.created_at"`)}
	}
	if _, ok := alprc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppLegacyPowerRental.updated_at"`)}
	}
	if _, ok := alprc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AppLegacyPowerRental.deleted_at"`)}
	}
	if _, ok := alprc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "AppLegacyPowerRental.ent_id"`)}
	}
	return nil
}

func (alprc *AppLegacyPowerRentalCreate) sqlSave(ctx context.Context) (*AppLegacyPowerRental, error) {
	_node, _spec := alprc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alprc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (alprc *AppLegacyPowerRentalCreate) createSpec() (*AppLegacyPowerRental, *sqlgraph.CreateSpec) {
	var (
		_node = &AppLegacyPowerRental{config: alprc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: applegacypowerrental.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: applegacypowerrental.FieldID,
			},
		}
	)
	_spec.OnConflict = alprc.conflict
	if id, ok := alprc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alprc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applegacypowerrental.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := alprc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applegacypowerrental.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := alprc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applegacypowerrental.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := alprc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applegacypowerrental.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := alprc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applegacypowerrental.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := alprc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applegacypowerrental.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := alprc.mutation.TechniqueFeeRatio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: applegacypowerrental.FieldTechniqueFeeRatio,
		})
		_node.TechniqueFeeRatio = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppLegacyPowerRental.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppLegacyPowerRentalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (alprc *AppLegacyPowerRentalCreate) OnConflict(opts ...sql.ConflictOption) *AppLegacyPowerRentalUpsertOne {
	alprc.conflict = opts
	return &AppLegacyPowerRentalUpsertOne{
		create: alprc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppLegacyPowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alprc *AppLegacyPowerRentalCreate) OnConflictColumns(columns ...string) *AppLegacyPowerRentalUpsertOne {
	alprc.conflict = append(alprc.conflict, sql.ConflictColumns(columns...))
	return &AppLegacyPowerRentalUpsertOne{
		create: alprc,
	}
}

type (
	// AppLegacyPowerRentalUpsertOne is the builder for "upsert"-ing
	//  one AppLegacyPowerRental node.
	AppLegacyPowerRentalUpsertOne struct {
		create *AppLegacyPowerRentalCreate
	}

	// AppLegacyPowerRentalUpsert is the "OnConflict" setter.
	AppLegacyPowerRentalUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AppLegacyPowerRentalUpsert) SetCreatedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateCreatedAt() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppLegacyPowerRentalUpsert) AddCreatedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Add(applegacypowerrental.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppLegacyPowerRentalUpsert) SetUpdatedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateUpdatedAt() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppLegacyPowerRentalUpsert) AddUpdatedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Add(applegacypowerrental.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsert) SetDeletedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateDeletedAt() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsert) AddDeletedAt(v uint32) *AppLegacyPowerRentalUpsert {
	u.Add(applegacypowerrental.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *AppLegacyPowerRentalUpsert) SetEntID(v uuid.UUID) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateEntID() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppLegacyPowerRentalUpsert) SetAppID(v uuid.UUID) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateAppID() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppLegacyPowerRentalUpsert) ClearAppID() *AppLegacyPowerRentalUpsert {
	u.SetNull(applegacypowerrental.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppLegacyPowerRentalUpsert) SetGoodID(v uuid.UUID) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateGoodID() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppLegacyPowerRentalUpsert) ClearGoodID() *AppLegacyPowerRentalUpsert {
	u.SetNull(applegacypowerrental.FieldGoodID)
	return u
}

// SetTechniqueFeeRatio sets the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsert) SetTechniqueFeeRatio(v decimal.Decimal) *AppLegacyPowerRentalUpsert {
	u.Set(applegacypowerrental.FieldTechniqueFeeRatio, v)
	return u
}

// UpdateTechniqueFeeRatio sets the "technique_fee_ratio" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsert) UpdateTechniqueFeeRatio() *AppLegacyPowerRentalUpsert {
	u.SetExcluded(applegacypowerrental.FieldTechniqueFeeRatio)
	return u
}

// ClearTechniqueFeeRatio clears the value of the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsert) ClearTechniqueFeeRatio() *AppLegacyPowerRentalUpsert {
	u.SetNull(applegacypowerrental.FieldTechniqueFeeRatio)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppLegacyPowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(applegacypowerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppLegacyPowerRentalUpsertOne) UpdateNewValues() *AppLegacyPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(applegacypowerrental.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppLegacyPowerRental.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppLegacyPowerRentalUpsertOne) Ignore() *AppLegacyPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppLegacyPowerRentalUpsertOne) DoNothing() *AppLegacyPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppLegacyPowerRentalCreate.OnConflict
// documentation for more info.
func (u *AppLegacyPowerRentalUpsertOne) Update(set func(*AppLegacyPowerRentalUpsert)) *AppLegacyPowerRentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppLegacyPowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppLegacyPowerRentalUpsertOne) SetCreatedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppLegacyPowerRentalUpsertOne) AddCreatedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateCreatedAt() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppLegacyPowerRentalUpsertOne) SetUpdatedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppLegacyPowerRentalUpsertOne) AddUpdatedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateUpdatedAt() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsertOne) SetDeletedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsertOne) AddDeletedAt(v uint32) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateDeletedAt() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppLegacyPowerRentalUpsertOne) SetEntID(v uuid.UUID) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateEntID() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppLegacyPowerRentalUpsertOne) SetAppID(v uuid.UUID) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateAppID() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppLegacyPowerRentalUpsertOne) ClearAppID() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppLegacyPowerRentalUpsertOne) SetGoodID(v uuid.UUID) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateGoodID() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppLegacyPowerRentalUpsertOne) ClearGoodID() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearGoodID()
	})
}

// SetTechniqueFeeRatio sets the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsertOne) SetTechniqueFeeRatio(v decimal.Decimal) *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetTechniqueFeeRatio(v)
	})
}

// UpdateTechniqueFeeRatio sets the "technique_fee_ratio" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertOne) UpdateTechniqueFeeRatio() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateTechniqueFeeRatio()
	})
}

// ClearTechniqueFeeRatio clears the value of the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsertOne) ClearTechniqueFeeRatio() *AppLegacyPowerRentalUpsertOne {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearTechniqueFeeRatio()
	})
}

// Exec executes the query.
func (u *AppLegacyPowerRentalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppLegacyPowerRentalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppLegacyPowerRentalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppLegacyPowerRentalUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppLegacyPowerRentalUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppLegacyPowerRentalCreateBulk is the builder for creating many AppLegacyPowerRental entities in bulk.
type AppLegacyPowerRentalCreateBulk struct {
	config
	builders []*AppLegacyPowerRentalCreate
	conflict []sql.ConflictOption
}

// Save creates the AppLegacyPowerRental entities in the database.
func (alprcb *AppLegacyPowerRentalCreateBulk) Save(ctx context.Context) ([]*AppLegacyPowerRental, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alprcb.builders))
	nodes := make([]*AppLegacyPowerRental, len(alprcb.builders))
	mutators := make([]Mutator, len(alprcb.builders))
	for i := range alprcb.builders {
		func(i int, root context.Context) {
			builder := alprcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppLegacyPowerRentalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alprcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alprcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alprcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alprcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alprcb *AppLegacyPowerRentalCreateBulk) SaveX(ctx context.Context) []*AppLegacyPowerRental {
	v, err := alprcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alprcb *AppLegacyPowerRentalCreateBulk) Exec(ctx context.Context) error {
	_, err := alprcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alprcb *AppLegacyPowerRentalCreateBulk) ExecX(ctx context.Context) {
	if err := alprcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppLegacyPowerRental.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppLegacyPowerRentalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (alprcb *AppLegacyPowerRentalCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppLegacyPowerRentalUpsertBulk {
	alprcb.conflict = opts
	return &AppLegacyPowerRentalUpsertBulk{
		create: alprcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppLegacyPowerRental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alprcb *AppLegacyPowerRentalCreateBulk) OnConflictColumns(columns ...string) *AppLegacyPowerRentalUpsertBulk {
	alprcb.conflict = append(alprcb.conflict, sql.ConflictColumns(columns...))
	return &AppLegacyPowerRentalUpsertBulk{
		create: alprcb,
	}
}

// AppLegacyPowerRentalUpsertBulk is the builder for "upsert"-ing
// a bulk of AppLegacyPowerRental nodes.
type AppLegacyPowerRentalUpsertBulk struct {
	create *AppLegacyPowerRentalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppLegacyPowerRental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(applegacypowerrental.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppLegacyPowerRentalUpsertBulk) UpdateNewValues() *AppLegacyPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(applegacypowerrental.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppLegacyPowerRental.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppLegacyPowerRentalUpsertBulk) Ignore() *AppLegacyPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppLegacyPowerRentalUpsertBulk) DoNothing() *AppLegacyPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppLegacyPowerRentalCreateBulk.OnConflict
// documentation for more info.
func (u *AppLegacyPowerRentalUpsertBulk) Update(set func(*AppLegacyPowerRentalUpsert)) *AppLegacyPowerRentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppLegacyPowerRentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetCreatedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) AddCreatedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateCreatedAt() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetUpdatedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) AddUpdatedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateUpdatedAt() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetDeletedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AppLegacyPowerRentalUpsertBulk) AddDeletedAt(v uint32) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateDeletedAt() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetEntID(v uuid.UUID) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateEntID() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetAppID(v uuid.UUID) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateAppID() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *AppLegacyPowerRentalUpsertBulk) ClearAppID() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetGoodID(v uuid.UUID) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateGoodID() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *AppLegacyPowerRentalUpsertBulk) ClearGoodID() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearGoodID()
	})
}

// SetTechniqueFeeRatio sets the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsertBulk) SetTechniqueFeeRatio(v decimal.Decimal) *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.SetTechniqueFeeRatio(v)
	})
}

// UpdateTechniqueFeeRatio sets the "technique_fee_ratio" field to the value that was provided on create.
func (u *AppLegacyPowerRentalUpsertBulk) UpdateTechniqueFeeRatio() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.UpdateTechniqueFeeRatio()
	})
}

// ClearTechniqueFeeRatio clears the value of the "technique_fee_ratio" field.
func (u *AppLegacyPowerRentalUpsertBulk) ClearTechniqueFeeRatio() *AppLegacyPowerRentalUpsertBulk {
	return u.Update(func(s *AppLegacyPowerRentalUpsert) {
		s.ClearTechniqueFeeRatio()
	})
}

// Exec executes the query.
func (u *AppLegacyPowerRentalUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppLegacyPowerRentalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppLegacyPowerRentalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppLegacyPowerRentalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
