// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/delegatedstaking"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DelegatedStakingUpdate is the builder for updating DelegatedStaking entities.
type DelegatedStakingUpdate struct {
	config
	hooks     []Hook
	mutation  *DelegatedStakingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DelegatedStakingUpdate builder.
func (dsu *DelegatedStakingUpdate) Where(ps ...predicate.DelegatedStaking) *DelegatedStakingUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetCreatedAt sets the "created_at" field.
func (dsu *DelegatedStakingUpdate) SetCreatedAt(u uint32) *DelegatedStakingUpdate {
	dsu.mutation.ResetCreatedAt()
	dsu.mutation.SetCreatedAt(u)
	return dsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableCreatedAt(u *uint32) *DelegatedStakingUpdate {
	if u != nil {
		dsu.SetCreatedAt(*u)
	}
	return dsu
}

// AddCreatedAt adds u to the "created_at" field.
func (dsu *DelegatedStakingUpdate) AddCreatedAt(u int32) *DelegatedStakingUpdate {
	dsu.mutation.AddCreatedAt(u)
	return dsu
}

// SetUpdatedAt sets the "updated_at" field.
func (dsu *DelegatedStakingUpdate) SetUpdatedAt(u uint32) *DelegatedStakingUpdate {
	dsu.mutation.ResetUpdatedAt()
	dsu.mutation.SetUpdatedAt(u)
	return dsu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dsu *DelegatedStakingUpdate) AddUpdatedAt(u int32) *DelegatedStakingUpdate {
	dsu.mutation.AddUpdatedAt(u)
	return dsu
}

// SetDeletedAt sets the "deleted_at" field.
func (dsu *DelegatedStakingUpdate) SetDeletedAt(u uint32) *DelegatedStakingUpdate {
	dsu.mutation.ResetDeletedAt()
	dsu.mutation.SetDeletedAt(u)
	return dsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableDeletedAt(u *uint32) *DelegatedStakingUpdate {
	if u != nil {
		dsu.SetDeletedAt(*u)
	}
	return dsu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dsu *DelegatedStakingUpdate) AddDeletedAt(u int32) *DelegatedStakingUpdate {
	dsu.mutation.AddDeletedAt(u)
	return dsu
}

// SetEntID sets the "ent_id" field.
func (dsu *DelegatedStakingUpdate) SetEntID(u uuid.UUID) *DelegatedStakingUpdate {
	dsu.mutation.SetEntID(u)
	return dsu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableEntID(u *uuid.UUID) *DelegatedStakingUpdate {
	if u != nil {
		dsu.SetEntID(*u)
	}
	return dsu
}

// SetGoodID sets the "good_id" field.
func (dsu *DelegatedStakingUpdate) SetGoodID(u uuid.UUID) *DelegatedStakingUpdate {
	dsu.mutation.SetGoodID(u)
	return dsu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableGoodID(u *uuid.UUID) *DelegatedStakingUpdate {
	if u != nil {
		dsu.SetGoodID(*u)
	}
	return dsu
}

// ClearGoodID clears the value of the "good_id" field.
func (dsu *DelegatedStakingUpdate) ClearGoodID() *DelegatedStakingUpdate {
	dsu.mutation.ClearGoodID()
	return dsu
}

// SetContractCodeURL sets the "contract_code_url" field.
func (dsu *DelegatedStakingUpdate) SetContractCodeURL(s string) *DelegatedStakingUpdate {
	dsu.mutation.SetContractCodeURL(s)
	return dsu
}

// SetNillableContractCodeURL sets the "contract_code_url" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableContractCodeURL(s *string) *DelegatedStakingUpdate {
	if s != nil {
		dsu.SetContractCodeURL(*s)
	}
	return dsu
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (dsu *DelegatedStakingUpdate) ClearContractCodeURL() *DelegatedStakingUpdate {
	dsu.mutation.ClearContractCodeURL()
	return dsu
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (dsu *DelegatedStakingUpdate) SetContractCodeBranch(s string) *DelegatedStakingUpdate {
	dsu.mutation.SetContractCodeBranch(s)
	return dsu
}

// SetNillableContractCodeBranch sets the "contract_code_branch" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableContractCodeBranch(s *string) *DelegatedStakingUpdate {
	if s != nil {
		dsu.SetContractCodeBranch(*s)
	}
	return dsu
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (dsu *DelegatedStakingUpdate) ClearContractCodeBranch() *DelegatedStakingUpdate {
	dsu.mutation.ClearContractCodeBranch()
	return dsu
}

// SetContractState sets the "contract_state" field.
func (dsu *DelegatedStakingUpdate) SetContractState(s string) *DelegatedStakingUpdate {
	dsu.mutation.SetContractState(s)
	return dsu
}

// SetNillableContractState sets the "contract_state" field if the given value is not nil.
func (dsu *DelegatedStakingUpdate) SetNillableContractState(s *string) *DelegatedStakingUpdate {
	if s != nil {
		dsu.SetContractState(*s)
	}
	return dsu
}

// ClearContractState clears the value of the "contract_state" field.
func (dsu *DelegatedStakingUpdate) ClearContractState() *DelegatedStakingUpdate {
	dsu.mutation.ClearContractState()
	return dsu
}

// Mutation returns the DelegatedStakingMutation object of the builder.
func (dsu *DelegatedStakingUpdate) Mutation() *DelegatedStakingMutation {
	return dsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DelegatedStakingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dsu.defaults(); err != nil {
		return 0, err
	}
	if len(dsu.hooks) == 0 {
		affected, err = dsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DelegatedStakingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dsu.mutation = mutation
			affected, err = dsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dsu.hooks) - 1; i >= 0; i-- {
			if dsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DelegatedStakingUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DelegatedStakingUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DelegatedStakingUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsu *DelegatedStakingUpdate) defaults() error {
	if _, ok := dsu.mutation.UpdatedAt(); !ok {
		if delegatedstaking.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.UpdateDefaultUpdatedAt()
		dsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dsu *DelegatedStakingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DelegatedStakingUpdate {
	dsu.modifiers = append(dsu.modifiers, modifiers...)
	return dsu
}

func (dsu *DelegatedStakingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delegatedstaking.Table,
			Columns: delegatedstaking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: delegatedstaking.FieldID,
			},
		},
	}
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldCreatedAt,
		})
	}
	if value, ok := dsu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldCreatedAt,
		})
	}
	if value, ok := dsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldUpdatedAt,
		})
	}
	if value, ok := dsu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldUpdatedAt,
		})
	}
	if value, ok := dsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldDeletedAt,
		})
	}
	if value, ok := dsu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldDeletedAt,
		})
	}
	if value, ok := dsu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldEntID,
		})
	}
	if value, ok := dsu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldGoodID,
		})
	}
	if dsu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: delegatedstaking.FieldGoodID,
		})
	}
	if value, ok := dsu.mutation.ContractCodeURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractCodeURL,
		})
	}
	if dsu.mutation.ContractCodeURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractCodeURL,
		})
	}
	if value, ok := dsu.mutation.ContractCodeBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractCodeBranch,
		})
	}
	if dsu.mutation.ContractCodeBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractCodeBranch,
		})
	}
	if value, ok := dsu.mutation.ContractState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractState,
		})
	}
	if dsu.mutation.ContractStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractState,
		})
	}
	_spec.Modifiers = dsu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegatedstaking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DelegatedStakingUpdateOne is the builder for updating a single DelegatedStaking entity.
type DelegatedStakingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DelegatedStakingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (dsuo *DelegatedStakingUpdateOne) SetCreatedAt(u uint32) *DelegatedStakingUpdateOne {
	dsuo.mutation.ResetCreatedAt()
	dsuo.mutation.SetCreatedAt(u)
	return dsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableCreatedAt(u *uint32) *DelegatedStakingUpdateOne {
	if u != nil {
		dsuo.SetCreatedAt(*u)
	}
	return dsuo
}

// AddCreatedAt adds u to the "created_at" field.
func (dsuo *DelegatedStakingUpdateOne) AddCreatedAt(u int32) *DelegatedStakingUpdateOne {
	dsuo.mutation.AddCreatedAt(u)
	return dsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dsuo *DelegatedStakingUpdateOne) SetUpdatedAt(u uint32) *DelegatedStakingUpdateOne {
	dsuo.mutation.ResetUpdatedAt()
	dsuo.mutation.SetUpdatedAt(u)
	return dsuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dsuo *DelegatedStakingUpdateOne) AddUpdatedAt(u int32) *DelegatedStakingUpdateOne {
	dsuo.mutation.AddUpdatedAt(u)
	return dsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dsuo *DelegatedStakingUpdateOne) SetDeletedAt(u uint32) *DelegatedStakingUpdateOne {
	dsuo.mutation.ResetDeletedAt()
	dsuo.mutation.SetDeletedAt(u)
	return dsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableDeletedAt(u *uint32) *DelegatedStakingUpdateOne {
	if u != nil {
		dsuo.SetDeletedAt(*u)
	}
	return dsuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dsuo *DelegatedStakingUpdateOne) AddDeletedAt(u int32) *DelegatedStakingUpdateOne {
	dsuo.mutation.AddDeletedAt(u)
	return dsuo
}

// SetEntID sets the "ent_id" field.
func (dsuo *DelegatedStakingUpdateOne) SetEntID(u uuid.UUID) *DelegatedStakingUpdateOne {
	dsuo.mutation.SetEntID(u)
	return dsuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableEntID(u *uuid.UUID) *DelegatedStakingUpdateOne {
	if u != nil {
		dsuo.SetEntID(*u)
	}
	return dsuo
}

// SetGoodID sets the "good_id" field.
func (dsuo *DelegatedStakingUpdateOne) SetGoodID(u uuid.UUID) *DelegatedStakingUpdateOne {
	dsuo.mutation.SetGoodID(u)
	return dsuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableGoodID(u *uuid.UUID) *DelegatedStakingUpdateOne {
	if u != nil {
		dsuo.SetGoodID(*u)
	}
	return dsuo
}

// ClearGoodID clears the value of the "good_id" field.
func (dsuo *DelegatedStakingUpdateOne) ClearGoodID() *DelegatedStakingUpdateOne {
	dsuo.mutation.ClearGoodID()
	return dsuo
}

// SetContractCodeURL sets the "contract_code_url" field.
func (dsuo *DelegatedStakingUpdateOne) SetContractCodeURL(s string) *DelegatedStakingUpdateOne {
	dsuo.mutation.SetContractCodeURL(s)
	return dsuo
}

// SetNillableContractCodeURL sets the "contract_code_url" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableContractCodeURL(s *string) *DelegatedStakingUpdateOne {
	if s != nil {
		dsuo.SetContractCodeURL(*s)
	}
	return dsuo
}

// ClearContractCodeURL clears the value of the "contract_code_url" field.
func (dsuo *DelegatedStakingUpdateOne) ClearContractCodeURL() *DelegatedStakingUpdateOne {
	dsuo.mutation.ClearContractCodeURL()
	return dsuo
}

// SetContractCodeBranch sets the "contract_code_branch" field.
func (dsuo *DelegatedStakingUpdateOne) SetContractCodeBranch(s string) *DelegatedStakingUpdateOne {
	dsuo.mutation.SetContractCodeBranch(s)
	return dsuo
}

// SetNillableContractCodeBranch sets the "contract_code_branch" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableContractCodeBranch(s *string) *DelegatedStakingUpdateOne {
	if s != nil {
		dsuo.SetContractCodeBranch(*s)
	}
	return dsuo
}

// ClearContractCodeBranch clears the value of the "contract_code_branch" field.
func (dsuo *DelegatedStakingUpdateOne) ClearContractCodeBranch() *DelegatedStakingUpdateOne {
	dsuo.mutation.ClearContractCodeBranch()
	return dsuo
}

// SetContractState sets the "contract_state" field.
func (dsuo *DelegatedStakingUpdateOne) SetContractState(s string) *DelegatedStakingUpdateOne {
	dsuo.mutation.SetContractState(s)
	return dsuo
}

// SetNillableContractState sets the "contract_state" field if the given value is not nil.
func (dsuo *DelegatedStakingUpdateOne) SetNillableContractState(s *string) *DelegatedStakingUpdateOne {
	if s != nil {
		dsuo.SetContractState(*s)
	}
	return dsuo
}

// ClearContractState clears the value of the "contract_state" field.
func (dsuo *DelegatedStakingUpdateOne) ClearContractState() *DelegatedStakingUpdateOne {
	dsuo.mutation.ClearContractState()
	return dsuo
}

// Mutation returns the DelegatedStakingMutation object of the builder.
func (dsuo *DelegatedStakingUpdateOne) Mutation() *DelegatedStakingMutation {
	return dsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DelegatedStakingUpdateOne) Select(field string, fields ...string) *DelegatedStakingUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DelegatedStaking entity.
func (dsuo *DelegatedStakingUpdateOne) Save(ctx context.Context) (*DelegatedStaking, error) {
	var (
		err  error
		node *DelegatedStaking
	)
	if err := dsuo.defaults(); err != nil {
		return nil, err
	}
	if len(dsuo.hooks) == 0 {
		node, err = dsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DelegatedStakingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dsuo.mutation = mutation
			node, err = dsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsuo.hooks) - 1; i >= 0; i-- {
			if dsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DelegatedStaking)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DelegatedStakingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DelegatedStakingUpdateOne) SaveX(ctx context.Context) *DelegatedStaking {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DelegatedStakingUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DelegatedStakingUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsuo *DelegatedStakingUpdateOne) defaults() error {
	if _, ok := dsuo.mutation.UpdatedAt(); !ok {
		if delegatedstaking.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.UpdateDefaultUpdatedAt()
		dsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dsuo *DelegatedStakingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DelegatedStakingUpdateOne {
	dsuo.modifiers = append(dsuo.modifiers, modifiers...)
	return dsuo
}

func (dsuo *DelegatedStakingUpdateOne) sqlSave(ctx context.Context) (_node *DelegatedStaking, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   delegatedstaking.Table,
			Columns: delegatedstaking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: delegatedstaking.FieldID,
			},
		},
	}
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DelegatedStaking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delegatedstaking.FieldID)
		for _, f := range fields {
			if !delegatedstaking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delegatedstaking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldCreatedAt,
		})
	}
	if value, ok := dsuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldCreatedAt,
		})
	}
	if value, ok := dsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldUpdatedAt,
		})
	}
	if value, ok := dsuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldUpdatedAt,
		})
	}
	if value, ok := dsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldDeletedAt,
		})
	}
	if value, ok := dsuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldDeletedAt,
		})
	}
	if value, ok := dsuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldEntID,
		})
	}
	if value, ok := dsuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldGoodID,
		})
	}
	if dsuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: delegatedstaking.FieldGoodID,
		})
	}
	if value, ok := dsuo.mutation.ContractCodeURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractCodeURL,
		})
	}
	if dsuo.mutation.ContractCodeURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractCodeURL,
		})
	}
	if value, ok := dsuo.mutation.ContractCodeBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractCodeBranch,
		})
	}
	if dsuo.mutation.ContractCodeBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractCodeBranch,
		})
	}
	if value, ok := dsuo.mutation.ContractState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractState,
		})
	}
	if dsuo.mutation.ContractStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: delegatedstaking.FieldContractState,
		})
	}
	_spec.Modifiers = dsuo.modifiers
	_node = &DelegatedStaking{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delegatedstaking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
