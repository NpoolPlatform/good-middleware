// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/subgood"
	"github.com/google/uuid"
)

// SubGoodCreate is the builder for creating a SubGood entity.
type SubGoodCreate struct {
	config
	mutation *SubGoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sgc *SubGoodCreate) SetCreatedAt(u uint32) *SubGoodCreate {
	sgc.mutation.SetCreatedAt(u)
	return sgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableCreatedAt(u *uint32) *SubGoodCreate {
	if u != nil {
		sgc.SetCreatedAt(*u)
	}
	return sgc
}

// SetUpdatedAt sets the "updated_at" field.
func (sgc *SubGoodCreate) SetUpdatedAt(u uint32) *SubGoodCreate {
	sgc.mutation.SetUpdatedAt(u)
	return sgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableUpdatedAt(u *uint32) *SubGoodCreate {
	if u != nil {
		sgc.SetUpdatedAt(*u)
	}
	return sgc
}

// SetDeletedAt sets the "deleted_at" field.
func (sgc *SubGoodCreate) SetDeletedAt(u uint32) *SubGoodCreate {
	sgc.mutation.SetDeletedAt(u)
	return sgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableDeletedAt(u *uint32) *SubGoodCreate {
	if u != nil {
		sgc.SetDeletedAt(*u)
	}
	return sgc
}

// SetAppID sets the "app_id" field.
func (sgc *SubGoodCreate) SetAppID(u uuid.UUID) *SubGoodCreate {
	sgc.mutation.SetAppID(u)
	return sgc
}

// SetMainGoodID sets the "main_good_id" field.
func (sgc *SubGoodCreate) SetMainGoodID(u uuid.UUID) *SubGoodCreate {
	sgc.mutation.SetMainGoodID(u)
	return sgc
}

// SetSubGoodID sets the "sub_good_id" field.
func (sgc *SubGoodCreate) SetSubGoodID(u uuid.UUID) *SubGoodCreate {
	sgc.mutation.SetSubGoodID(u)
	return sgc
}

// SetMust sets the "must" field.
func (sgc *SubGoodCreate) SetMust(b bool) *SubGoodCreate {
	sgc.mutation.SetMust(b)
	return sgc
}

// SetNillableMust sets the "must" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableMust(b *bool) *SubGoodCreate {
	if b != nil {
		sgc.SetMust(*b)
	}
	return sgc
}

// SetCommission sets the "commission" field.
func (sgc *SubGoodCreate) SetCommission(b bool) *SubGoodCreate {
	sgc.mutation.SetCommission(b)
	return sgc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableCommission(b *bool) *SubGoodCreate {
	if b != nil {
		sgc.SetCommission(*b)
	}
	return sgc
}

// SetID sets the "id" field.
func (sgc *SubGoodCreate) SetID(u uuid.UUID) *SubGoodCreate {
	sgc.mutation.SetID(u)
	return sgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sgc *SubGoodCreate) SetNillableID(u *uuid.UUID) *SubGoodCreate {
	if u != nil {
		sgc.SetID(*u)
	}
	return sgc
}

// Mutation returns the SubGoodMutation object of the builder.
func (sgc *SubGoodCreate) Mutation() *SubGoodMutation {
	return sgc.mutation
}

// Save creates the SubGood in the database.
func (sgc *SubGoodCreate) Save(ctx context.Context) (*SubGood, error) {
	var (
		err  error
		node *SubGood
	)
	if err := sgc.defaults(); err != nil {
		return nil, err
	}
	if len(sgc.hooks) == 0 {
		if err = sgc.check(); err != nil {
			return nil, err
		}
		node, err = sgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgc.check(); err != nil {
				return nil, err
			}
			sgc.mutation = mutation
			if node, err = sgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sgc.hooks) - 1; i >= 0; i-- {
			if sgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubGood)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubGoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *SubGoodCreate) SaveX(ctx context.Context) *SubGood {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *SubGoodCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *SubGoodCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *SubGoodCreate) defaults() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		if subgood.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized subgood.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := subgood.DefaultCreatedAt()
		sgc.mutation.SetCreatedAt(v)
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		if subgood.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subgood.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subgood.DefaultUpdatedAt()
		sgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sgc.mutation.DeletedAt(); !ok {
		if subgood.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized subgood.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := subgood.DefaultDeletedAt()
		sgc.mutation.SetDeletedAt(v)
	}
	if _, ok := sgc.mutation.Must(); !ok {
		v := subgood.DefaultMust
		sgc.mutation.SetMust(v)
	}
	if _, ok := sgc.mutation.Commission(); !ok {
		v := subgood.DefaultCommission
		sgc.mutation.SetCommission(v)
	}
	if _, ok := sgc.mutation.ID(); !ok {
		if subgood.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized subgood.DefaultID (forgotten import ent/runtime?)")
		}
		v := subgood.DefaultID()
		sgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sgc *SubGoodCreate) check() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubGood.created_at"`)}
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubGood.updated_at"`)}
	}
	if _, ok := sgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SubGood.deleted_at"`)}
	}
	if _, ok := sgc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "SubGood.app_id"`)}
	}
	if _, ok := sgc.mutation.MainGoodID(); !ok {
		return &ValidationError{Name: "main_good_id", err: errors.New(`ent: missing required field "SubGood.main_good_id"`)}
	}
	if _, ok := sgc.mutation.SubGoodID(); !ok {
		return &ValidationError{Name: "sub_good_id", err: errors.New(`ent: missing required field "SubGood.sub_good_id"`)}
	}
	return nil
}

func (sgc *SubGoodCreate) sqlSave(ctx context.Context) (*SubGood, error) {
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sgc *SubGoodCreate) createSpec() (*SubGood, *sqlgraph.CreateSpec) {
	var (
		_node = &SubGood{config: sgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subgood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subgood.FieldID,
			},
		}
	)
	_spec.OnConflict = sgc.conflict
	if id, ok := sgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: subgood.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: subgood.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: subgood.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := sgc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: subgood.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := sgc.mutation.MainGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: subgood.FieldMainGoodID,
		})
		_node.MainGoodID = value
	}
	if value, ok := sgc.mutation.SubGoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: subgood.FieldSubGoodID,
		})
		_node.SubGoodID = value
	}
	if value, ok := sgc.mutation.Must(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subgood.FieldMust,
		})
		_node.Must = value
	}
	if value, ok := sgc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subgood.FieldCommission,
		})
		_node.Commission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubGood.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sgc *SubGoodCreate) OnConflict(opts ...sql.ConflictOption) *SubGoodUpsertOne {
	sgc.conflict = opts
	return &SubGoodUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sgc *SubGoodCreate) OnConflictColumns(columns ...string) *SubGoodUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &SubGoodUpsertOne{
		create: sgc,
	}
}

type (
	// SubGoodUpsertOne is the builder for "upsert"-ing
	//  one SubGood node.
	SubGoodUpsertOne struct {
		create *SubGoodCreate
	}

	// SubGoodUpsert is the "OnConflict" setter.
	SubGoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SubGoodUpsert) SetCreatedAt(v uint32) *SubGoodUpsert {
	u.Set(subgood.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateCreatedAt() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubGoodUpsert) AddCreatedAt(v uint32) *SubGoodUpsert {
	u.Add(subgood.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubGoodUpsert) SetUpdatedAt(v uint32) *SubGoodUpsert {
	u.Set(subgood.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateUpdatedAt() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubGoodUpsert) AddUpdatedAt(v uint32) *SubGoodUpsert {
	u.Add(subgood.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubGoodUpsert) SetDeletedAt(v uint32) *SubGoodUpsert {
	u.Set(subgood.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateDeletedAt() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubGoodUpsert) AddDeletedAt(v uint32) *SubGoodUpsert {
	u.Add(subgood.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SubGoodUpsert) SetAppID(v uuid.UUID) *SubGoodUpsert {
	u.Set(subgood.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateAppID() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldAppID)
	return u
}

// SetMainGoodID sets the "main_good_id" field.
func (u *SubGoodUpsert) SetMainGoodID(v uuid.UUID) *SubGoodUpsert {
	u.Set(subgood.FieldMainGoodID, v)
	return u
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateMainGoodID() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldMainGoodID)
	return u
}

// SetSubGoodID sets the "sub_good_id" field.
func (u *SubGoodUpsert) SetSubGoodID(v uuid.UUID) *SubGoodUpsert {
	u.Set(subgood.FieldSubGoodID, v)
	return u
}

// UpdateSubGoodID sets the "sub_good_id" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateSubGoodID() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldSubGoodID)
	return u
}

// SetMust sets the "must" field.
func (u *SubGoodUpsert) SetMust(v bool) *SubGoodUpsert {
	u.Set(subgood.FieldMust, v)
	return u
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateMust() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldMust)
	return u
}

// ClearMust clears the value of the "must" field.
func (u *SubGoodUpsert) ClearMust() *SubGoodUpsert {
	u.SetNull(subgood.FieldMust)
	return u
}

// SetCommission sets the "commission" field.
func (u *SubGoodUpsert) SetCommission(v bool) *SubGoodUpsert {
	u.Set(subgood.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *SubGoodUpsert) UpdateCommission() *SubGoodUpsert {
	u.SetExcluded(subgood.FieldCommission)
	return u
}

// ClearCommission clears the value of the "commission" field.
func (u *SubGoodUpsert) ClearCommission() *SubGoodUpsert {
	u.SetNull(subgood.FieldCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SubGoodUpsertOne) UpdateNewValues() *SubGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subgood.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SubGood.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SubGoodUpsertOne) Ignore() *SubGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubGoodUpsertOne) DoNothing() *SubGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubGoodCreate.OnConflict
// documentation for more info.
func (u *SubGoodUpsertOne) Update(set func(*SubGoodUpsert)) *SubGoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubGoodUpsertOne) SetCreatedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubGoodUpsertOne) AddCreatedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateCreatedAt() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubGoodUpsertOne) SetUpdatedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubGoodUpsertOne) AddUpdatedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateUpdatedAt() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubGoodUpsertOne) SetDeletedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubGoodUpsertOne) AddDeletedAt(v uint32) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateDeletedAt() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SubGoodUpsertOne) SetAppID(v uuid.UUID) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateAppID() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateAppID()
	})
}

// SetMainGoodID sets the "main_good_id" field.
func (u *SubGoodUpsertOne) SetMainGoodID(v uuid.UUID) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetMainGoodID(v)
	})
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateMainGoodID() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateMainGoodID()
	})
}

// SetSubGoodID sets the "sub_good_id" field.
func (u *SubGoodUpsertOne) SetSubGoodID(v uuid.UUID) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetSubGoodID(v)
	})
}

// UpdateSubGoodID sets the "sub_good_id" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateSubGoodID() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateSubGoodID()
	})
}

// SetMust sets the "must" field.
func (u *SubGoodUpsertOne) SetMust(v bool) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetMust(v)
	})
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateMust() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateMust()
	})
}

// ClearMust clears the value of the "must" field.
func (u *SubGoodUpsertOne) ClearMust() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.ClearMust()
	})
}

// SetCommission sets the "commission" field.
func (u *SubGoodUpsertOne) SetCommission(v bool) *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *SubGoodUpsertOne) UpdateCommission() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *SubGoodUpsertOne) ClearCommission() *SubGoodUpsertOne {
	return u.Update(func(s *SubGoodUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *SubGoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubGoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubGoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubGoodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SubGoodUpsertOne.ID is not supported by MySQL driver. Use SubGoodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubGoodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubGoodCreateBulk is the builder for creating many SubGood entities in bulk.
type SubGoodCreateBulk struct {
	config
	builders []*SubGoodCreate
	conflict []sql.ConflictOption
}

// Save creates the SubGood entities in the database.
func (sgcb *SubGoodCreateBulk) Save(ctx context.Context) ([]*SubGood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*SubGood, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *SubGoodCreateBulk) SaveX(ctx context.Context) []*SubGood {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *SubGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *SubGoodCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubGood.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubGoodUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sgcb *SubGoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubGoodUpsertBulk {
	sgcb.conflict = opts
	return &SubGoodUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubGood.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sgcb *SubGoodCreateBulk) OnConflictColumns(columns ...string) *SubGoodUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &SubGoodUpsertBulk{
		create: sgcb,
	}
}

// SubGoodUpsertBulk is the builder for "upsert"-ing
// a bulk of SubGood nodes.
type SubGoodUpsertBulk struct {
	create *SubGoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubGood.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subgood.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SubGoodUpsertBulk) UpdateNewValues() *SubGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subgood.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubGood.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SubGoodUpsertBulk) Ignore() *SubGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubGoodUpsertBulk) DoNothing() *SubGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubGoodCreateBulk.OnConflict
// documentation for more info.
func (u *SubGoodUpsertBulk) Update(set func(*SubGoodUpsert)) *SubGoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubGoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubGoodUpsertBulk) SetCreatedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SubGoodUpsertBulk) AddCreatedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateCreatedAt() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubGoodUpsertBulk) SetUpdatedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SubGoodUpsertBulk) AddUpdatedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateUpdatedAt() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubGoodUpsertBulk) SetDeletedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SubGoodUpsertBulk) AddDeletedAt(v uint32) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateDeletedAt() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SubGoodUpsertBulk) SetAppID(v uuid.UUID) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateAppID() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateAppID()
	})
}

// SetMainGoodID sets the "main_good_id" field.
func (u *SubGoodUpsertBulk) SetMainGoodID(v uuid.UUID) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetMainGoodID(v)
	})
}

// UpdateMainGoodID sets the "main_good_id" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateMainGoodID() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateMainGoodID()
	})
}

// SetSubGoodID sets the "sub_good_id" field.
func (u *SubGoodUpsertBulk) SetSubGoodID(v uuid.UUID) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetSubGoodID(v)
	})
}

// UpdateSubGoodID sets the "sub_good_id" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateSubGoodID() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateSubGoodID()
	})
}

// SetMust sets the "must" field.
func (u *SubGoodUpsertBulk) SetMust(v bool) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetMust(v)
	})
}

// UpdateMust sets the "must" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateMust() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateMust()
	})
}

// ClearMust clears the value of the "must" field.
func (u *SubGoodUpsertBulk) ClearMust() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.ClearMust()
	})
}

// SetCommission sets the "commission" field.
func (u *SubGoodUpsertBulk) SetCommission(v bool) *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.SetCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *SubGoodUpsertBulk) UpdateCommission() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *SubGoodUpsertBulk) ClearCommission() *SubGoodUpsertBulk {
	return u.Update(func(s *SubGoodUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *SubGoodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubGoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubGoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubGoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
