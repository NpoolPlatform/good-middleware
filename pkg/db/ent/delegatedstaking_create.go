// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/delegatedstaking"
	"github.com/google/uuid"
)

// DelegatedStakingCreate is the builder for creating a DelegatedStaking entity.
type DelegatedStakingCreate struct {
	config
	mutation *DelegatedStakingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dsc *DelegatedStakingCreate) SetCreatedAt(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetCreatedAt(u)
	return dsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableCreatedAt(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetCreatedAt(*u)
	}
	return dsc
}

// SetUpdatedAt sets the "updated_at" field.
func (dsc *DelegatedStakingCreate) SetUpdatedAt(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetUpdatedAt(u)
	return dsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableUpdatedAt(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetUpdatedAt(*u)
	}
	return dsc
}

// SetDeletedAt sets the "deleted_at" field.
func (dsc *DelegatedStakingCreate) SetDeletedAt(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetDeletedAt(u)
	return dsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableDeletedAt(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetDeletedAt(*u)
	}
	return dsc
}

// SetEntID sets the "ent_id" field.
func (dsc *DelegatedStakingCreate) SetEntID(u uuid.UUID) *DelegatedStakingCreate {
	dsc.mutation.SetEntID(u)
	return dsc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableEntID(u *uuid.UUID) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetEntID(*u)
	}
	return dsc
}

// SetGoodID sets the "good_id" field.
func (dsc *DelegatedStakingCreate) SetGoodID(u uuid.UUID) *DelegatedStakingCreate {
	dsc.mutation.SetGoodID(u)
	return dsc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableGoodID(u *uuid.UUID) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetGoodID(*u)
	}
	return dsc
}

// SetNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field.
func (dsc *DelegatedStakingCreate) SetNoStakeRedeemDelayHours(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetNoStakeRedeemDelayHours(u)
	return dsc
}

// SetNillableNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableNoStakeRedeemDelayHours(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetNoStakeRedeemDelayHours(*u)
	}
	return dsc
}

// SetMaxRedeemDelayHours sets the "max_redeem_delay_hours" field.
func (dsc *DelegatedStakingCreate) SetMaxRedeemDelayHours(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetMaxRedeemDelayHours(u)
	return dsc
}

// SetNillableMaxRedeemDelayHours sets the "max_redeem_delay_hours" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableMaxRedeemDelayHours(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetMaxRedeemDelayHours(*u)
	}
	return dsc
}

// SetContractAddress sets the "contract_address" field.
func (dsc *DelegatedStakingCreate) SetContractAddress(s string) *DelegatedStakingCreate {
	dsc.mutation.SetContractAddress(s)
	return dsc
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableContractAddress(s *string) *DelegatedStakingCreate {
	if s != nil {
		dsc.SetContractAddress(*s)
	}
	return dsc
}

// SetNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field.
func (dsc *DelegatedStakingCreate) SetNoStakeBenefitDelayHours(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetNoStakeBenefitDelayHours(u)
	return dsc
}

// SetNillableNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field if the given value is not nil.
func (dsc *DelegatedStakingCreate) SetNillableNoStakeBenefitDelayHours(u *uint32) *DelegatedStakingCreate {
	if u != nil {
		dsc.SetNoStakeBenefitDelayHours(*u)
	}
	return dsc
}

// SetID sets the "id" field.
func (dsc *DelegatedStakingCreate) SetID(u uint32) *DelegatedStakingCreate {
	dsc.mutation.SetID(u)
	return dsc
}

// Mutation returns the DelegatedStakingMutation object of the builder.
func (dsc *DelegatedStakingCreate) Mutation() *DelegatedStakingMutation {
	return dsc.mutation
}

// Save creates the DelegatedStaking in the database.
func (dsc *DelegatedStakingCreate) Save(ctx context.Context) (*DelegatedStaking, error) {
	var (
		err  error
		node *DelegatedStaking
	)
	if err := dsc.defaults(); err != nil {
		return nil, err
	}
	if len(dsc.hooks) == 0 {
		if err = dsc.check(); err != nil {
			return nil, err
		}
		node, err = dsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DelegatedStakingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsc.check(); err != nil {
				return nil, err
			}
			dsc.mutation = mutation
			if node, err = dsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dsc.hooks) - 1; i >= 0; i-- {
			if dsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DelegatedStaking)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DelegatedStakingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DelegatedStakingCreate) SaveX(ctx context.Context) *DelegatedStaking {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DelegatedStakingCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DelegatedStakingCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DelegatedStakingCreate) defaults() error {
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		if delegatedstaking.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		if delegatedstaking.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dsc.mutation.DeletedAt(); !ok {
		if delegatedstaking.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.DefaultDeletedAt()
		dsc.mutation.SetDeletedAt(v)
	}
	if _, ok := dsc.mutation.EntID(); !ok {
		if delegatedstaking.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.DefaultEntID()
		dsc.mutation.SetEntID(v)
	}
	if _, ok := dsc.mutation.GoodID(); !ok {
		if delegatedstaking.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized delegatedstaking.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := delegatedstaking.DefaultGoodID()
		dsc.mutation.SetGoodID(v)
	}
	if _, ok := dsc.mutation.NoStakeRedeemDelayHours(); !ok {
		v := delegatedstaking.DefaultNoStakeRedeemDelayHours
		dsc.mutation.SetNoStakeRedeemDelayHours(v)
	}
	if _, ok := dsc.mutation.MaxRedeemDelayHours(); !ok {
		v := delegatedstaking.DefaultMaxRedeemDelayHours
		dsc.mutation.SetMaxRedeemDelayHours(v)
	}
	if _, ok := dsc.mutation.ContractAddress(); !ok {
		v := delegatedstaking.DefaultContractAddress
		dsc.mutation.SetContractAddress(v)
	}
	if _, ok := dsc.mutation.NoStakeBenefitDelayHours(); !ok {
		v := delegatedstaking.DefaultNoStakeBenefitDelayHours
		dsc.mutation.SetNoStakeBenefitDelayHours(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DelegatedStakingCreate) check() error {
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DelegatedStaking.created_at"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DelegatedStaking.updated_at"`)}
	}
	if _, ok := dsc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "DelegatedStaking.deleted_at"`)}
	}
	if _, ok := dsc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "DelegatedStaking.ent_id"`)}
	}
	return nil
}

func (dsc *DelegatedStakingCreate) sqlSave(ctx context.Context) (*DelegatedStaking, error) {
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (dsc *DelegatedStakingCreate) createSpec() (*DelegatedStaking, *sqlgraph.CreateSpec) {
	var (
		_node = &DelegatedStaking{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: delegatedstaking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: delegatedstaking.FieldID,
			},
		}
	)
	_spec.OnConflict = dsc.conflict
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := dsc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := dsc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: delegatedstaking.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := dsc.mutation.NoStakeRedeemDelayHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldNoStakeRedeemDelayHours,
		})
		_node.NoStakeRedeemDelayHours = value
	}
	if value, ok := dsc.mutation.MaxRedeemDelayHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldMaxRedeemDelayHours,
		})
		_node.MaxRedeemDelayHours = value
	}
	if value, ok := dsc.mutation.ContractAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: delegatedstaking.FieldContractAddress,
		})
		_node.ContractAddress = value
	}
	if value, ok := dsc.mutation.NoStakeBenefitDelayHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: delegatedstaking.FieldNoStakeBenefitDelayHours,
		})
		_node.NoStakeBenefitDelayHours = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatedStaking.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatedStakingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dsc *DelegatedStakingCreate) OnConflict(opts ...sql.ConflictOption) *DelegatedStakingUpsertOne {
	dsc.conflict = opts
	return &DelegatedStakingUpsertOne{
		create: dsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dsc *DelegatedStakingCreate) OnConflictColumns(columns ...string) *DelegatedStakingUpsertOne {
	dsc.conflict = append(dsc.conflict, sql.ConflictColumns(columns...))
	return &DelegatedStakingUpsertOne{
		create: dsc,
	}
}

type (
	// DelegatedStakingUpsertOne is the builder for "upsert"-ing
	//  one DelegatedStaking node.
	DelegatedStakingUpsertOne struct {
		create *DelegatedStakingCreate
	}

	// DelegatedStakingUpsert is the "OnConflict" setter.
	DelegatedStakingUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DelegatedStakingUpsert) SetCreatedAt(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateCreatedAt() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DelegatedStakingUpsert) AddCreatedAt(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DelegatedStakingUpsert) SetUpdatedAt(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateUpdatedAt() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DelegatedStakingUpsert) AddUpdatedAt(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DelegatedStakingUpsert) SetDeletedAt(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateDeletedAt() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DelegatedStakingUpsert) AddDeletedAt(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsert) SetEntID(v uuid.UUID) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateEntID() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldEntID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsert) SetGoodID(v uuid.UUID) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateGoodID() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsert) ClearGoodID() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldGoodID)
	return u
}

// SetNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) SetNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldNoStakeRedeemDelayHours, v)
	return u
}

// UpdateNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateNoStakeRedeemDelayHours() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldNoStakeRedeemDelayHours)
	return u
}

// AddNoStakeRedeemDelayHours adds v to the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) AddNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldNoStakeRedeemDelayHours, v)
	return u
}

// ClearNoStakeRedeemDelayHours clears the value of the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) ClearNoStakeRedeemDelayHours() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldNoStakeRedeemDelayHours)
	return u
}

// SetMaxRedeemDelayHours sets the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) SetMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldMaxRedeemDelayHours, v)
	return u
}

// UpdateMaxRedeemDelayHours sets the "max_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateMaxRedeemDelayHours() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldMaxRedeemDelayHours)
	return u
}

// AddMaxRedeemDelayHours adds v to the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) AddMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldMaxRedeemDelayHours, v)
	return u
}

// ClearMaxRedeemDelayHours clears the value of the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsert) ClearMaxRedeemDelayHours() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldMaxRedeemDelayHours)
	return u
}

// SetContractAddress sets the "contract_address" field.
func (u *DelegatedStakingUpsert) SetContractAddress(v string) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldContractAddress, v)
	return u
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateContractAddress() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldContractAddress)
	return u
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *DelegatedStakingUpsert) ClearContractAddress() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldContractAddress)
	return u
}

// SetNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsert) SetNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Set(delegatedstaking.FieldNoStakeBenefitDelayHours, v)
	return u
}

// UpdateNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsert) UpdateNoStakeBenefitDelayHours() *DelegatedStakingUpsert {
	u.SetExcluded(delegatedstaking.FieldNoStakeBenefitDelayHours)
	return u
}

// AddNoStakeBenefitDelayHours adds v to the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsert) AddNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsert {
	u.Add(delegatedstaking.FieldNoStakeBenefitDelayHours, v)
	return u
}

// ClearNoStakeBenefitDelayHours clears the value of the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsert) ClearNoStakeBenefitDelayHours() *DelegatedStakingUpsert {
	u.SetNull(delegatedstaking.FieldNoStakeBenefitDelayHours)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(delegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DelegatedStakingUpsertOne) UpdateNewValues() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(delegatedstaking.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DelegatedStakingUpsertOne) Ignore() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatedStakingUpsertOne) DoNothing() *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatedStakingCreate.OnConflict
// documentation for more info.
func (u *DelegatedStakingUpsertOne) Update(set func(*DelegatedStakingUpsert)) *DelegatedStakingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DelegatedStakingUpsertOne) SetCreatedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DelegatedStakingUpsertOne) AddCreatedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateCreatedAt() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DelegatedStakingUpsertOne) SetUpdatedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DelegatedStakingUpsertOne) AddUpdatedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateUpdatedAt() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DelegatedStakingUpsertOne) SetDeletedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DelegatedStakingUpsertOne) AddDeletedAt(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateDeletedAt() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsertOne) SetEntID(v uuid.UUID) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateEntID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsertOne) SetGoodID(v uuid.UUID) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateGoodID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsertOne) ClearGoodID() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearGoodID()
	})
}

// SetNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) SetNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetNoStakeRedeemDelayHours(v)
	})
}

// AddNoStakeRedeemDelayHours adds v to the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) AddNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddNoStakeRedeemDelayHours(v)
	})
}

// UpdateNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateNoStakeRedeemDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateNoStakeRedeemDelayHours()
	})
}

// ClearNoStakeRedeemDelayHours clears the value of the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) ClearNoStakeRedeemDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearNoStakeRedeemDelayHours()
	})
}

// SetMaxRedeemDelayHours sets the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) SetMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetMaxRedeemDelayHours(v)
	})
}

// AddMaxRedeemDelayHours adds v to the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) AddMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddMaxRedeemDelayHours(v)
	})
}

// UpdateMaxRedeemDelayHours sets the "max_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateMaxRedeemDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateMaxRedeemDelayHours()
	})
}

// ClearMaxRedeemDelayHours clears the value of the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertOne) ClearMaxRedeemDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearMaxRedeemDelayHours()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *DelegatedStakingUpsertOne) SetContractAddress(v string) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateContractAddress() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *DelegatedStakingUpsertOne) ClearContractAddress() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractAddress()
	})
}

// SetNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertOne) SetNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetNoStakeBenefitDelayHours(v)
	})
}

// AddNoStakeBenefitDelayHours adds v to the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertOne) AddNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddNoStakeBenefitDelayHours(v)
	})
}

// UpdateNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertOne) UpdateNoStakeBenefitDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateNoStakeBenefitDelayHours()
	})
}

// ClearNoStakeBenefitDelayHours clears the value of the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertOne) ClearNoStakeBenefitDelayHours() *DelegatedStakingUpsertOne {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearNoStakeBenefitDelayHours()
	})
}

// Exec executes the query.
func (u *DelegatedStakingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatedStakingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatedStakingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DelegatedStakingUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DelegatedStakingUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DelegatedStakingCreateBulk is the builder for creating many DelegatedStaking entities in bulk.
type DelegatedStakingCreateBulk struct {
	config
	builders []*DelegatedStakingCreate
	conflict []sql.ConflictOption
}

// Save creates the DelegatedStaking entities in the database.
func (dscb *DelegatedStakingCreateBulk) Save(ctx context.Context) ([]*DelegatedStaking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DelegatedStaking, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DelegatedStakingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DelegatedStakingCreateBulk) SaveX(ctx context.Context) []*DelegatedStaking {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DelegatedStakingCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DelegatedStakingCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DelegatedStaking.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DelegatedStakingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dscb *DelegatedStakingCreateBulk) OnConflict(opts ...sql.ConflictOption) *DelegatedStakingUpsertBulk {
	dscb.conflict = opts
	return &DelegatedStakingUpsertBulk{
		create: dscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dscb *DelegatedStakingCreateBulk) OnConflictColumns(columns ...string) *DelegatedStakingUpsertBulk {
	dscb.conflict = append(dscb.conflict, sql.ConflictColumns(columns...))
	return &DelegatedStakingUpsertBulk{
		create: dscb,
	}
}

// DelegatedStakingUpsertBulk is the builder for "upsert"-ing
// a bulk of DelegatedStaking nodes.
type DelegatedStakingUpsertBulk struct {
	create *DelegatedStakingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(delegatedstaking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DelegatedStakingUpsertBulk) UpdateNewValues() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(delegatedstaking.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DelegatedStaking.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DelegatedStakingUpsertBulk) Ignore() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DelegatedStakingUpsertBulk) DoNothing() *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DelegatedStakingCreateBulk.OnConflict
// documentation for more info.
func (u *DelegatedStakingUpsertBulk) Update(set func(*DelegatedStakingUpsert)) *DelegatedStakingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DelegatedStakingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DelegatedStakingUpsertBulk) SetCreatedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DelegatedStakingUpsertBulk) AddCreatedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateCreatedAt() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DelegatedStakingUpsertBulk) SetUpdatedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DelegatedStakingUpsertBulk) AddUpdatedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateUpdatedAt() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DelegatedStakingUpsertBulk) SetDeletedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DelegatedStakingUpsertBulk) AddDeletedAt(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateDeletedAt() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *DelegatedStakingUpsertBulk) SetEntID(v uuid.UUID) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateEntID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateEntID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DelegatedStakingUpsertBulk) SetGoodID(v uuid.UUID) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateGoodID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DelegatedStakingUpsertBulk) ClearGoodID() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearGoodID()
	})
}

// SetNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) SetNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetNoStakeRedeemDelayHours(v)
	})
}

// AddNoStakeRedeemDelayHours adds v to the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) AddNoStakeRedeemDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddNoStakeRedeemDelayHours(v)
	})
}

// UpdateNoStakeRedeemDelayHours sets the "no_stake_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateNoStakeRedeemDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateNoStakeRedeemDelayHours()
	})
}

// ClearNoStakeRedeemDelayHours clears the value of the "no_stake_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) ClearNoStakeRedeemDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearNoStakeRedeemDelayHours()
	})
}

// SetMaxRedeemDelayHours sets the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) SetMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetMaxRedeemDelayHours(v)
	})
}

// AddMaxRedeemDelayHours adds v to the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) AddMaxRedeemDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddMaxRedeemDelayHours(v)
	})
}

// UpdateMaxRedeemDelayHours sets the "max_redeem_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateMaxRedeemDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateMaxRedeemDelayHours()
	})
}

// ClearMaxRedeemDelayHours clears the value of the "max_redeem_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) ClearMaxRedeemDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearMaxRedeemDelayHours()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *DelegatedStakingUpsertBulk) SetContractAddress(v string) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateContractAddress() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *DelegatedStakingUpsertBulk) ClearContractAddress() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearContractAddress()
	})
}

// SetNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) SetNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.SetNoStakeBenefitDelayHours(v)
	})
}

// AddNoStakeBenefitDelayHours adds v to the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) AddNoStakeBenefitDelayHours(v uint32) *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.AddNoStakeBenefitDelayHours(v)
	})
}

// UpdateNoStakeBenefitDelayHours sets the "no_stake_benefit_delay_hours" field to the value that was provided on create.
func (u *DelegatedStakingUpsertBulk) UpdateNoStakeBenefitDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.UpdateNoStakeBenefitDelayHours()
	})
}

// ClearNoStakeBenefitDelayHours clears the value of the "no_stake_benefit_delay_hours" field.
func (u *DelegatedStakingUpsertBulk) ClearNoStakeBenefitDelayHours() *DelegatedStakingUpsertBulk {
	return u.Update(func(s *DelegatedStakingUpsert) {
		s.ClearNoStakeBenefitDelayHours()
	})
}

// Exec executes the query.
func (u *DelegatedStakingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DelegatedStakingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DelegatedStakingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DelegatedStakingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
