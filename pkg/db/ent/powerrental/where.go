// Code generated by ent, DO NOT EDIT.

package powerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// DeviceTypeID applies equality check predicate on the "device_type_id" field. It's identical to DeviceTypeIDEQ.
func DeviceTypeID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceTypeID), v))
	})
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// QuantityUnit applies equality check predicate on the "quantity_unit" field. It's identical to QuantityUnitEQ.
func QuantityUnit(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitAmount applies equality check predicate on the "quantity_unit_amount" field. It's identical to QuantityUnitAmountEQ.
func QuantityUnitAmount(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUnitAmount), v))
	})
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// UnitLockDeposit applies equality check predicate on the "unit_lock_deposit" field. It's identical to UnitLockDepositEQ.
func UnitLockDeposit(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitLockDeposit), v))
	})
}

// DurationType applies equality check predicate on the "duration_type" field. It's identical to DurationTypeEQ.
func DurationType(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// GoodIDIsNil applies the IsNil predicate on the "good_id" field.
func GoodIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoodID)))
	})
}

// GoodIDNotNil applies the NotNil predicate on the "good_id" field.
func GoodIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoodID)))
	})
}

// DeviceTypeIDEQ applies the EQ predicate on the "device_type_id" field.
func DeviceTypeIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDNEQ applies the NEQ predicate on the "device_type_id" field.
func DeviceTypeIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDIn applies the In predicate on the "device_type_id" field.
func DeviceTypeIDIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeviceTypeID), v...))
	})
}

// DeviceTypeIDNotIn applies the NotIn predicate on the "device_type_id" field.
func DeviceTypeIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeviceTypeID), v...))
	})
}

// DeviceTypeIDGT applies the GT predicate on the "device_type_id" field.
func DeviceTypeIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDGTE applies the GTE predicate on the "device_type_id" field.
func DeviceTypeIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDLT applies the LT predicate on the "device_type_id" field.
func DeviceTypeIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDLTE applies the LTE predicate on the "device_type_id" field.
func DeviceTypeIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceTypeID), v))
	})
}

// DeviceTypeIDIsNil applies the IsNil predicate on the "device_type_id" field.
func DeviceTypeIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeviceTypeID)))
	})
}

// DeviceTypeIDNotNil applies the NotNil predicate on the "device_type_id" field.
func DeviceTypeIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeviceTypeID)))
	})
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDIsNil applies the IsNil predicate on the "vendor_location_id" field.
func VendorLocationIDIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVendorLocationID)))
	})
}

// VendorLocationIDNotNil applies the NotNil predicate on the "vendor_location_id" field.
func VendorLocationIDNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVendorLocationID)))
	})
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitPrice)))
	})
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitPrice)))
	})
}

// QuantityUnitEQ applies the EQ predicate on the "quantity_unit" field.
func QuantityUnitEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitNEQ applies the NEQ predicate on the "quantity_unit" field.
func QuantityUnitNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitIn applies the In predicate on the "quantity_unit" field.
func QuantityUnitIn(vs ...string) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuantityUnit), v...))
	})
}

// QuantityUnitNotIn applies the NotIn predicate on the "quantity_unit" field.
func QuantityUnitNotIn(vs ...string) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuantityUnit), v...))
	})
}

// QuantityUnitGT applies the GT predicate on the "quantity_unit" field.
func QuantityUnitGT(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitGTE applies the GTE predicate on the "quantity_unit" field.
func QuantityUnitGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitLT applies the LT predicate on the "quantity_unit" field.
func QuantityUnitLT(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitLTE applies the LTE predicate on the "quantity_unit" field.
func QuantityUnitLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitContains applies the Contains predicate on the "quantity_unit" field.
func QuantityUnitContains(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitHasPrefix applies the HasPrefix predicate on the "quantity_unit" field.
func QuantityUnitHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitHasSuffix applies the HasSuffix predicate on the "quantity_unit" field.
func QuantityUnitHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitIsNil applies the IsNil predicate on the "quantity_unit" field.
func QuantityUnitIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityUnit)))
	})
}

// QuantityUnitNotNil applies the NotNil predicate on the "quantity_unit" field.
func QuantityUnitNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityUnit)))
	})
}

// QuantityUnitEqualFold applies the EqualFold predicate on the "quantity_unit" field.
func QuantityUnitEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitContainsFold applies the ContainsFold predicate on the "quantity_unit" field.
func QuantityUnitContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuantityUnit), v))
	})
}

// QuantityUnitAmountEQ applies the EQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountNEQ applies the NEQ predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountIn applies the In predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuantityUnitAmount), v...))
	})
}

// QuantityUnitAmountNotIn applies the NotIn predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuantityUnitAmount), v...))
	})
}

// QuantityUnitAmountGT applies the GT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountGTE applies the GTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountLT applies the LT predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountLTE applies the LTE predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityUnitAmount), v))
	})
}

// QuantityUnitAmountIsNil applies the IsNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityUnitAmount)))
	})
}

// QuantityUnitAmountNotNil applies the NotNil predicate on the "quantity_unit_amount" field.
func QuantityUnitAmountNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityUnitAmount)))
	})
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...uint32) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v uint32) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIsNil applies the IsNil predicate on the "delivery_at" field.
func DeliveryAtIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeliveryAt)))
	})
}

// DeliveryAtNotNil applies the NotNil predicate on the "delivery_at" field.
func DeliveryAtNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeliveryAt)))
	})
}

// UnitLockDepositEQ applies the EQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositNEQ applies the NEQ predicate on the "unit_lock_deposit" field.
func UnitLockDepositNEQ(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositIn applies the In predicate on the "unit_lock_deposit" field.
func UnitLockDepositIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitLockDeposit), v...))
	})
}

// UnitLockDepositNotIn applies the NotIn predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotIn(vs ...decimal.Decimal) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitLockDeposit), v...))
	})
}

// UnitLockDepositGT applies the GT predicate on the "unit_lock_deposit" field.
func UnitLockDepositGT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositGTE applies the GTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositGTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositLT applies the LT predicate on the "unit_lock_deposit" field.
func UnitLockDepositLT(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositLTE applies the LTE predicate on the "unit_lock_deposit" field.
func UnitLockDepositLTE(v decimal.Decimal) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitLockDeposit), v))
	})
}

// UnitLockDepositIsNil applies the IsNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitLockDeposit)))
	})
}

// UnitLockDepositNotNil applies the NotNil predicate on the "unit_lock_deposit" field.
func UnitLockDepositNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitLockDeposit)))
	})
}

// DurationTypeEQ applies the EQ predicate on the "duration_type" field.
func DurationTypeEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeNEQ applies the NEQ predicate on the "duration_type" field.
func DurationTypeNEQ(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationType), v))
	})
}

// DurationTypeIn applies the In predicate on the "duration_type" field.
func DurationTypeIn(vs ...string) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDurationType), v...))
	})
}

// DurationTypeNotIn applies the NotIn predicate on the "duration_type" field.
func DurationTypeNotIn(vs ...string) predicate.PowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDurationType), v...))
	})
}

// DurationTypeGT applies the GT predicate on the "duration_type" field.
func DurationTypeGT(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationType), v))
	})
}

// DurationTypeGTE applies the GTE predicate on the "duration_type" field.
func DurationTypeGTE(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationType), v))
	})
}

// DurationTypeLT applies the LT predicate on the "duration_type" field.
func DurationTypeLT(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationType), v))
	})
}

// DurationTypeLTE applies the LTE predicate on the "duration_type" field.
func DurationTypeLTE(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationType), v))
	})
}

// DurationTypeContains applies the Contains predicate on the "duration_type" field.
func DurationTypeContains(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDurationType), v))
	})
}

// DurationTypeHasPrefix applies the HasPrefix predicate on the "duration_type" field.
func DurationTypeHasPrefix(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDurationType), v))
	})
}

// DurationTypeHasSuffix applies the HasSuffix predicate on the "duration_type" field.
func DurationTypeHasSuffix(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDurationType), v))
	})
}

// DurationTypeIsNil applies the IsNil predicate on the "duration_type" field.
func DurationTypeIsNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDurationType)))
	})
}

// DurationTypeNotNil applies the NotNil predicate on the "duration_type" field.
func DurationTypeNotNil() predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDurationType)))
	})
}

// DurationTypeEqualFold applies the EqualFold predicate on the "duration_type" field.
func DurationTypeEqualFold(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDurationType), v))
	})
}

// DurationTypeContainsFold applies the ContainsFold predicate on the "duration_type" field.
func DurationTypeContainsFold(v string) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDurationType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PowerRental) predicate.PowerRental {
	return predicate.PowerRental(func(s *sql.Selector) {
		p(s.Not())
	})
}
