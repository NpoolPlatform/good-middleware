// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/appmininggoodstock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// AppMiningGoodStock is the model entity for the AppMiningGoodStock schema.
type AppMiningGoodStock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// MiningGoodStockID holds the value of the "mining_good_stock_id" field.
	MiningGoodStockID uuid.UUID `json:"mining_good_stock_id,omitempty"`
	// Reserved holds the value of the "reserved" field.
	Reserved decimal.Decimal `json:"reserved,omitempty"`
	// SpotQuantity holds the value of the "spot_quantity" field.
	SpotQuantity decimal.Decimal `json:"spot_quantity,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked decimal.Decimal `json:"locked,omitempty"`
	// InService holds the value of the "in_service" field.
	InService decimal.Decimal `json:"in_service,omitempty"`
	// WaitStart holds the value of the "wait_start" field.
	WaitStart decimal.Decimal `json:"wait_start,omitempty"`
	// Sold holds the value of the "sold" field.
	Sold decimal.Decimal `json:"sold,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppMiningGoodStock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appmininggoodstock.FieldReserved, appmininggoodstock.FieldSpotQuantity, appmininggoodstock.FieldLocked, appmininggoodstock.FieldInService, appmininggoodstock.FieldWaitStart, appmininggoodstock.FieldSold:
			values[i] = new(decimal.Decimal)
		case appmininggoodstock.FieldID, appmininggoodstock.FieldCreatedAt, appmininggoodstock.FieldUpdatedAt, appmininggoodstock.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case appmininggoodstock.FieldEntID, appmininggoodstock.FieldMiningGoodStockID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppMiningGoodStock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppMiningGoodStock fields.
func (amgs *AppMiningGoodStock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appmininggoodstock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amgs.ID = uint32(value.Int64)
		case appmininggoodstock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				amgs.CreatedAt = uint32(value.Int64)
			}
		case appmininggoodstock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				amgs.UpdatedAt = uint32(value.Int64)
			}
		case appmininggoodstock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				amgs.DeletedAt = uint32(value.Int64)
			}
		case appmininggoodstock.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				amgs.EntID = *value
			}
		case appmininggoodstock.FieldMiningGoodStockID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field mining_good_stock_id", values[i])
			} else if value != nil {
				amgs.MiningGoodStockID = *value
			}
		case appmininggoodstock.FieldReserved:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field reserved", values[i])
			} else if value != nil {
				amgs.Reserved = *value
			}
		case appmininggoodstock.FieldSpotQuantity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field spot_quantity", values[i])
			} else if value != nil {
				amgs.SpotQuantity = *value
			}
		case appmininggoodstock.FieldLocked:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value != nil {
				amgs.Locked = *value
			}
		case appmininggoodstock.FieldInService:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field in_service", values[i])
			} else if value != nil {
				amgs.InService = *value
			}
		case appmininggoodstock.FieldWaitStart:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field wait_start", values[i])
			} else if value != nil {
				amgs.WaitStart = *value
			}
		case appmininggoodstock.FieldSold:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field sold", values[i])
			} else if value != nil {
				amgs.Sold = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppMiningGoodStock.
// Note that you need to call AppMiningGoodStock.Unwrap() before calling this method if this AppMiningGoodStock
// was returned from a transaction, and the transaction was committed or rolled back.
func (amgs *AppMiningGoodStock) Update() *AppMiningGoodStockUpdateOne {
	return (&AppMiningGoodStockClient{config: amgs.config}).UpdateOne(amgs)
}

// Unwrap unwraps the AppMiningGoodStock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amgs *AppMiningGoodStock) Unwrap() *AppMiningGoodStock {
	_tx, ok := amgs.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppMiningGoodStock is not a transactional entity")
	}
	amgs.config.driver = _tx.drv
	return amgs
}

// String implements the fmt.Stringer.
func (amgs *AppMiningGoodStock) String() string {
	var builder strings.Builder
	builder.WriteString("AppMiningGoodStock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", amgs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", amgs.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", amgs.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", amgs.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", amgs.EntID))
	builder.WriteString(", ")
	builder.WriteString("mining_good_stock_id=")
	builder.WriteString(fmt.Sprintf("%v", amgs.MiningGoodStockID))
	builder.WriteString(", ")
	builder.WriteString("reserved=")
	builder.WriteString(fmt.Sprintf("%v", amgs.Reserved))
	builder.WriteString(", ")
	builder.WriteString("spot_quantity=")
	builder.WriteString(fmt.Sprintf("%v", amgs.SpotQuantity))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", amgs.Locked))
	builder.WriteString(", ")
	builder.WriteString("in_service=")
	builder.WriteString(fmt.Sprintf("%v", amgs.InService))
	builder.WriteString(", ")
	builder.WriteString("wait_start=")
	builder.WriteString(fmt.Sprintf("%v", amgs.WaitStart))
	builder.WriteString(", ")
	builder.WriteString("sold=")
	builder.WriteString(fmt.Sprintf("%v", amgs.Sold))
	builder.WriteByte(')')
	return builder.String()
}

// AppMiningGoodStocks is a parsable slice of AppMiningGoodStock.
type AppMiningGoodStocks []*AppMiningGoodStock

func (amgs AppMiningGoodStocks) config(cfg config) {
	for _i := range amgs {
		amgs[_i].config = cfg
	}
}
