// Code generated by ent, DO NOT EDIT.

package apppowerrental

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppGoodID applies equality check predicate on the "app_good_id" field. It's identical to AppGoodIDEQ.
func AppGoodID(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// ServiceStartAt applies equality check predicate on the "service_start_at" field. It's identical to ServiceStartAtEQ.
func ServiceStartAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStartAt), v))
	})
}

// CancelMode applies equality check predicate on the "cancel_mode" field. It's identical to CancelModeEQ.
func CancelMode(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelMode), v))
	})
}

// CancelableBeforeStartSeconds applies equality check predicate on the "cancelable_before_start_seconds" field. It's identical to CancelableBeforeStartSecondsEQ.
func CancelableBeforeStartSeconds(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// EnableSetCommission applies equality check predicate on the "enable_set_commission" field. It's identical to EnableSetCommissionEQ.
func EnableSetCommission(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableSetCommission), v))
	})
}

// MinOrderAmount applies equality check predicate on the "min_order_amount" field. It's identical to MinOrderAmountEQ.
func MinOrderAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinOrderAmount), v))
	})
}

// MaxOrderAmount applies equality check predicate on the "max_order_amount" field. It's identical to MaxOrderAmountEQ.
func MaxOrderAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxUserAmount applies equality check predicate on the "max_user_amount" field. It's identical to MaxUserAmountEQ.
func MaxUserAmount(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxUserAmount), v))
	})
}

// MinOrderDuration applies equality check predicate on the "min_order_duration" field. It's identical to MinOrderDurationEQ.
func MinOrderDuration(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinOrderDuration), v))
	})
}

// MaxOrderDuration applies equality check predicate on the "max_order_duration" field. It's identical to MaxOrderDurationEQ.
func MaxOrderDuration(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxOrderDuration), v))
	})
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// SaleStartAt applies equality check predicate on the "sale_start_at" field. It's identical to SaleStartAtEQ.
func SaleStartAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleEndAt applies equality check predicate on the "sale_end_at" field. It's identical to SaleEndAtEQ.
func SaleEndAt(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleEndAt), v))
	})
}

// SaleMode applies equality check predicate on the "sale_mode" field. It's identical to SaleModeEQ.
func SaleMode(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleMode), v))
	})
}

// FixDuration applies equality check predicate on the "fix_duration" field. It's identical to FixDurationEQ.
func FixDuration(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixDuration), v))
	})
}

// PackageWithRequireds applies equality check predicate on the "package_with_requireds" field. It's identical to PackageWithRequiredsEQ.
func PackageWithRequireds(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageWithRequireds), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppGoodIDEQ applies the EQ predicate on the "app_good_id" field.
func AppGoodIDEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDNEQ applies the NEQ predicate on the "app_good_id" field.
func AppGoodIDNEQ(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIn applies the In predicate on the "app_good_id" field.
func AppGoodIDIn(vs ...uuid.UUID) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDNotIn applies the NotIn predicate on the "app_good_id" field.
func AppGoodIDNotIn(vs ...uuid.UUID) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppGoodID), v...))
	})
}

// AppGoodIDGT applies the GT predicate on the "app_good_id" field.
func AppGoodIDGT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDGTE applies the GTE predicate on the "app_good_id" field.
func AppGoodIDGTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLT applies the LT predicate on the "app_good_id" field.
func AppGoodIDLT(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDLTE applies the LTE predicate on the "app_good_id" field.
func AppGoodIDLTE(v uuid.UUID) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppGoodID), v))
	})
}

// AppGoodIDIsNil applies the IsNil predicate on the "app_good_id" field.
func AppGoodIDIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppGoodID)))
	})
}

// AppGoodIDNotNil applies the NotNil predicate on the "app_good_id" field.
func AppGoodIDNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppGoodID)))
	})
}

// ServiceStartAtEQ applies the EQ predicate on the "service_start_at" field.
func ServiceStartAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtNEQ applies the NEQ predicate on the "service_start_at" field.
func ServiceStartAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtIn applies the In predicate on the "service_start_at" field.
func ServiceStartAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServiceStartAt), v...))
	})
}

// ServiceStartAtNotIn applies the NotIn predicate on the "service_start_at" field.
func ServiceStartAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServiceStartAt), v...))
	})
}

// ServiceStartAtGT applies the GT predicate on the "service_start_at" field.
func ServiceStartAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtGTE applies the GTE predicate on the "service_start_at" field.
func ServiceStartAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtLT applies the LT predicate on the "service_start_at" field.
func ServiceStartAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtLTE applies the LTE predicate on the "service_start_at" field.
func ServiceStartAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceStartAt), v))
	})
}

// ServiceStartAtIsNil applies the IsNil predicate on the "service_start_at" field.
func ServiceStartAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldServiceStartAt)))
	})
}

// ServiceStartAtNotNil applies the NotNil predicate on the "service_start_at" field.
func ServiceStartAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldServiceStartAt)))
	})
}

// CancelModeEQ applies the EQ predicate on the "cancel_mode" field.
func CancelModeEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelMode), v))
	})
}

// CancelModeNEQ applies the NEQ predicate on the "cancel_mode" field.
func CancelModeNEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelMode), v))
	})
}

// CancelModeIn applies the In predicate on the "cancel_mode" field.
func CancelModeIn(vs ...string) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelMode), v...))
	})
}

// CancelModeNotIn applies the NotIn predicate on the "cancel_mode" field.
func CancelModeNotIn(vs ...string) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelMode), v...))
	})
}

// CancelModeGT applies the GT predicate on the "cancel_mode" field.
func CancelModeGT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelMode), v))
	})
}

// CancelModeGTE applies the GTE predicate on the "cancel_mode" field.
func CancelModeGTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelMode), v))
	})
}

// CancelModeLT applies the LT predicate on the "cancel_mode" field.
func CancelModeLT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelMode), v))
	})
}

// CancelModeLTE applies the LTE predicate on the "cancel_mode" field.
func CancelModeLTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelMode), v))
	})
}

// CancelModeContains applies the Contains predicate on the "cancel_mode" field.
func CancelModeContains(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelMode), v))
	})
}

// CancelModeHasPrefix applies the HasPrefix predicate on the "cancel_mode" field.
func CancelModeHasPrefix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelMode), v))
	})
}

// CancelModeHasSuffix applies the HasSuffix predicate on the "cancel_mode" field.
func CancelModeHasSuffix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelMode), v))
	})
}

// CancelModeIsNil applies the IsNil predicate on the "cancel_mode" field.
func CancelModeIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelMode)))
	})
}

// CancelModeNotNil applies the NotNil predicate on the "cancel_mode" field.
func CancelModeNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelMode)))
	})
}

// CancelModeEqualFold applies the EqualFold predicate on the "cancel_mode" field.
func CancelModeEqualFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelMode), v))
	})
}

// CancelModeContainsFold applies the ContainsFold predicate on the "cancel_mode" field.
func CancelModeContainsFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelMode), v))
	})
}

// CancelableBeforeStartSecondsEQ applies the EQ predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsNEQ applies the NEQ predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsIn applies the In predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelableBeforeStartSeconds), v...))
	})
}

// CancelableBeforeStartSecondsNotIn applies the NotIn predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelableBeforeStartSeconds), v...))
	})
}

// CancelableBeforeStartSecondsGT applies the GT predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsGTE applies the GTE predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsLT applies the LT predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsLTE applies the LTE predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelableBeforeStartSeconds), v))
	})
}

// CancelableBeforeStartSecondsIsNil applies the IsNil predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelableBeforeStartSeconds)))
	})
}

// CancelableBeforeStartSecondsNotNil applies the NotNil predicate on the "cancelable_before_start_seconds" field.
func CancelableBeforeStartSecondsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelableBeforeStartSeconds)))
	})
}

// EnableSetCommissionEQ applies the EQ predicate on the "enable_set_commission" field.
func EnableSetCommissionEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableSetCommission), v))
	})
}

// EnableSetCommissionNEQ applies the NEQ predicate on the "enable_set_commission" field.
func EnableSetCommissionNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableSetCommission), v))
	})
}

// EnableSetCommissionIsNil applies the IsNil predicate on the "enable_set_commission" field.
func EnableSetCommissionIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableSetCommission)))
	})
}

// EnableSetCommissionNotNil applies the NotNil predicate on the "enable_set_commission" field.
func EnableSetCommissionNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableSetCommission)))
	})
}

// MinOrderAmountEQ applies the EQ predicate on the "min_order_amount" field.
func MinOrderAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountNEQ applies the NEQ predicate on the "min_order_amount" field.
func MinOrderAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountIn applies the In predicate on the "min_order_amount" field.
func MinOrderAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinOrderAmount), v...))
	})
}

// MinOrderAmountNotIn applies the NotIn predicate on the "min_order_amount" field.
func MinOrderAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinOrderAmount), v...))
	})
}

// MinOrderAmountGT applies the GT predicate on the "min_order_amount" field.
func MinOrderAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountGTE applies the GTE predicate on the "min_order_amount" field.
func MinOrderAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountLT applies the LT predicate on the "min_order_amount" field.
func MinOrderAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountLTE applies the LTE predicate on the "min_order_amount" field.
func MinOrderAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinOrderAmount), v))
	})
}

// MinOrderAmountIsNil applies the IsNil predicate on the "min_order_amount" field.
func MinOrderAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinOrderAmount)))
	})
}

// MinOrderAmountNotNil applies the NotNil predicate on the "min_order_amount" field.
func MinOrderAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinOrderAmount)))
	})
}

// MaxOrderAmountEQ applies the EQ predicate on the "max_order_amount" field.
func MaxOrderAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountNEQ applies the NEQ predicate on the "max_order_amount" field.
func MaxOrderAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountIn applies the In predicate on the "max_order_amount" field.
func MaxOrderAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxOrderAmount), v...))
	})
}

// MaxOrderAmountNotIn applies the NotIn predicate on the "max_order_amount" field.
func MaxOrderAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxOrderAmount), v...))
	})
}

// MaxOrderAmountGT applies the GT predicate on the "max_order_amount" field.
func MaxOrderAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountGTE applies the GTE predicate on the "max_order_amount" field.
func MaxOrderAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountLT applies the LT predicate on the "max_order_amount" field.
func MaxOrderAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountLTE applies the LTE predicate on the "max_order_amount" field.
func MaxOrderAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxOrderAmount), v))
	})
}

// MaxOrderAmountIsNil applies the IsNil predicate on the "max_order_amount" field.
func MaxOrderAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxOrderAmount)))
	})
}

// MaxOrderAmountNotNil applies the NotNil predicate on the "max_order_amount" field.
func MaxOrderAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxOrderAmount)))
	})
}

// MaxUserAmountEQ applies the EQ predicate on the "max_user_amount" field.
func MaxUserAmountEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountNEQ applies the NEQ predicate on the "max_user_amount" field.
func MaxUserAmountNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountIn applies the In predicate on the "max_user_amount" field.
func MaxUserAmountIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxUserAmount), v...))
	})
}

// MaxUserAmountNotIn applies the NotIn predicate on the "max_user_amount" field.
func MaxUserAmountNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxUserAmount), v...))
	})
}

// MaxUserAmountGT applies the GT predicate on the "max_user_amount" field.
func MaxUserAmountGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountGTE applies the GTE predicate on the "max_user_amount" field.
func MaxUserAmountGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountLT applies the LT predicate on the "max_user_amount" field.
func MaxUserAmountLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountLTE applies the LTE predicate on the "max_user_amount" field.
func MaxUserAmountLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxUserAmount), v))
	})
}

// MaxUserAmountIsNil applies the IsNil predicate on the "max_user_amount" field.
func MaxUserAmountIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxUserAmount)))
	})
}

// MaxUserAmountNotNil applies the NotNil predicate on the "max_user_amount" field.
func MaxUserAmountNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxUserAmount)))
	})
}

// MinOrderDurationEQ applies the EQ predicate on the "min_order_duration" field.
func MinOrderDurationEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationNEQ applies the NEQ predicate on the "min_order_duration" field.
func MinOrderDurationNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationIn applies the In predicate on the "min_order_duration" field.
func MinOrderDurationIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinOrderDuration), v...))
	})
}

// MinOrderDurationNotIn applies the NotIn predicate on the "min_order_duration" field.
func MinOrderDurationNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinOrderDuration), v...))
	})
}

// MinOrderDurationGT applies the GT predicate on the "min_order_duration" field.
func MinOrderDurationGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationGTE applies the GTE predicate on the "min_order_duration" field.
func MinOrderDurationGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationLT applies the LT predicate on the "min_order_duration" field.
func MinOrderDurationLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationLTE applies the LTE predicate on the "min_order_duration" field.
func MinOrderDurationLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinOrderDuration), v))
	})
}

// MinOrderDurationIsNil applies the IsNil predicate on the "min_order_duration" field.
func MinOrderDurationIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinOrderDuration)))
	})
}

// MinOrderDurationNotNil applies the NotNil predicate on the "min_order_duration" field.
func MinOrderDurationNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinOrderDuration)))
	})
}

// MaxOrderDurationEQ applies the EQ predicate on the "max_order_duration" field.
func MaxOrderDurationEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationNEQ applies the NEQ predicate on the "max_order_duration" field.
func MaxOrderDurationNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationIn applies the In predicate on the "max_order_duration" field.
func MaxOrderDurationIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxOrderDuration), v...))
	})
}

// MaxOrderDurationNotIn applies the NotIn predicate on the "max_order_duration" field.
func MaxOrderDurationNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxOrderDuration), v...))
	})
}

// MaxOrderDurationGT applies the GT predicate on the "max_order_duration" field.
func MaxOrderDurationGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationGTE applies the GTE predicate on the "max_order_duration" field.
func MaxOrderDurationGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationLT applies the LT predicate on the "max_order_duration" field.
func MaxOrderDurationLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationLTE applies the LTE predicate on the "max_order_duration" field.
func MaxOrderDurationLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxOrderDuration), v))
	})
}

// MaxOrderDurationIsNil applies the IsNil predicate on the "max_order_duration" field.
func MaxOrderDurationIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxOrderDuration)))
	})
}

// MaxOrderDurationNotNil applies the NotNil predicate on the "max_order_duration" field.
func MaxOrderDurationNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxOrderDuration)))
	})
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitPrice)))
	})
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitPrice)))
	})
}

// SaleStartAtEQ applies the EQ predicate on the "sale_start_at" field.
func SaleStartAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtNEQ applies the NEQ predicate on the "sale_start_at" field.
func SaleStartAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtIn applies the In predicate on the "sale_start_at" field.
func SaleStartAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaleStartAt), v...))
	})
}

// SaleStartAtNotIn applies the NotIn predicate on the "sale_start_at" field.
func SaleStartAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaleStartAt), v...))
	})
}

// SaleStartAtGT applies the GT predicate on the "sale_start_at" field.
func SaleStartAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtGTE applies the GTE predicate on the "sale_start_at" field.
func SaleStartAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtLT applies the LT predicate on the "sale_start_at" field.
func SaleStartAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtLTE applies the LTE predicate on the "sale_start_at" field.
func SaleStartAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaleStartAt), v))
	})
}

// SaleStartAtIsNil applies the IsNil predicate on the "sale_start_at" field.
func SaleStartAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaleStartAt)))
	})
}

// SaleStartAtNotNil applies the NotNil predicate on the "sale_start_at" field.
func SaleStartAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaleStartAt)))
	})
}

// SaleEndAtEQ applies the EQ predicate on the "sale_end_at" field.
func SaleEndAtEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtNEQ applies the NEQ predicate on the "sale_end_at" field.
func SaleEndAtNEQ(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtIn applies the In predicate on the "sale_end_at" field.
func SaleEndAtIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaleEndAt), v...))
	})
}

// SaleEndAtNotIn applies the NotIn predicate on the "sale_end_at" field.
func SaleEndAtNotIn(vs ...uint32) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaleEndAt), v...))
	})
}

// SaleEndAtGT applies the GT predicate on the "sale_end_at" field.
func SaleEndAtGT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtGTE applies the GTE predicate on the "sale_end_at" field.
func SaleEndAtGTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtLT applies the LT predicate on the "sale_end_at" field.
func SaleEndAtLT(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtLTE applies the LTE predicate on the "sale_end_at" field.
func SaleEndAtLTE(v uint32) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaleEndAt), v))
	})
}

// SaleEndAtIsNil applies the IsNil predicate on the "sale_end_at" field.
func SaleEndAtIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaleEndAt)))
	})
}

// SaleEndAtNotNil applies the NotNil predicate on the "sale_end_at" field.
func SaleEndAtNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaleEndAt)))
	})
}

// SaleModeEQ applies the EQ predicate on the "sale_mode" field.
func SaleModeEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaleMode), v))
	})
}

// SaleModeNEQ applies the NEQ predicate on the "sale_mode" field.
func SaleModeNEQ(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaleMode), v))
	})
}

// SaleModeIn applies the In predicate on the "sale_mode" field.
func SaleModeIn(vs ...string) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaleMode), v...))
	})
}

// SaleModeNotIn applies the NotIn predicate on the "sale_mode" field.
func SaleModeNotIn(vs ...string) predicate.AppPowerRental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaleMode), v...))
	})
}

// SaleModeGT applies the GT predicate on the "sale_mode" field.
func SaleModeGT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaleMode), v))
	})
}

// SaleModeGTE applies the GTE predicate on the "sale_mode" field.
func SaleModeGTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaleMode), v))
	})
}

// SaleModeLT applies the LT predicate on the "sale_mode" field.
func SaleModeLT(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaleMode), v))
	})
}

// SaleModeLTE applies the LTE predicate on the "sale_mode" field.
func SaleModeLTE(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaleMode), v))
	})
}

// SaleModeContains applies the Contains predicate on the "sale_mode" field.
func SaleModeContains(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSaleMode), v))
	})
}

// SaleModeHasPrefix applies the HasPrefix predicate on the "sale_mode" field.
func SaleModeHasPrefix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSaleMode), v))
	})
}

// SaleModeHasSuffix applies the HasSuffix predicate on the "sale_mode" field.
func SaleModeHasSuffix(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSaleMode), v))
	})
}

// SaleModeIsNil applies the IsNil predicate on the "sale_mode" field.
func SaleModeIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaleMode)))
	})
}

// SaleModeNotNil applies the NotNil predicate on the "sale_mode" field.
func SaleModeNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaleMode)))
	})
}

// SaleModeEqualFold applies the EqualFold predicate on the "sale_mode" field.
func SaleModeEqualFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSaleMode), v))
	})
}

// SaleModeContainsFold applies the ContainsFold predicate on the "sale_mode" field.
func SaleModeContainsFold(v string) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSaleMode), v))
	})
}

// FixDurationEQ applies the EQ predicate on the "fix_duration" field.
func FixDurationEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixDuration), v))
	})
}

// FixDurationNEQ applies the NEQ predicate on the "fix_duration" field.
func FixDurationNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFixDuration), v))
	})
}

// FixDurationIsNil applies the IsNil predicate on the "fix_duration" field.
func FixDurationIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFixDuration)))
	})
}

// FixDurationNotNil applies the NotNil predicate on the "fix_duration" field.
func FixDurationNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFixDuration)))
	})
}

// PackageWithRequiredsEQ applies the EQ predicate on the "package_with_requireds" field.
func PackageWithRequiredsEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageWithRequireds), v))
	})
}

// PackageWithRequiredsNEQ applies the NEQ predicate on the "package_with_requireds" field.
func PackageWithRequiredsNEQ(v bool) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageWithRequireds), v))
	})
}

// PackageWithRequiredsIsNil applies the IsNil predicate on the "package_with_requireds" field.
func PackageWithRequiredsIsNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPackageWithRequireds)))
	})
}

// PackageWithRequiredsNotNil applies the NotNil predicate on the "package_with_requireds" field.
func PackageWithRequiredsNotNil() predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPackageWithRequireds)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppPowerRental) predicate.AppPowerRental {
	return predicate.AppPowerRental(func(s *sql.Selector) {
		p(s.Not())
	})
}
