// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/deviceposter"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DevicePosterUpdate is the builder for updating DevicePoster entities.
type DevicePosterUpdate struct {
	config
	hooks     []Hook
	mutation  *DevicePosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DevicePosterUpdate builder.
func (dpu *DevicePosterUpdate) Where(ps ...predicate.DevicePoster) *DevicePosterUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetCreatedAt sets the "created_at" field.
func (dpu *DevicePosterUpdate) SetCreatedAt(u uint32) *DevicePosterUpdate {
	dpu.mutation.ResetCreatedAt()
	dpu.mutation.SetCreatedAt(u)
	return dpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillableCreatedAt(u *uint32) *DevicePosterUpdate {
	if u != nil {
		dpu.SetCreatedAt(*u)
	}
	return dpu
}

// AddCreatedAt adds u to the "created_at" field.
func (dpu *DevicePosterUpdate) AddCreatedAt(u int32) *DevicePosterUpdate {
	dpu.mutation.AddCreatedAt(u)
	return dpu
}

// SetUpdatedAt sets the "updated_at" field.
func (dpu *DevicePosterUpdate) SetUpdatedAt(u uint32) *DevicePosterUpdate {
	dpu.mutation.ResetUpdatedAt()
	dpu.mutation.SetUpdatedAt(u)
	return dpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dpu *DevicePosterUpdate) AddUpdatedAt(u int32) *DevicePosterUpdate {
	dpu.mutation.AddUpdatedAt(u)
	return dpu
}

// SetDeletedAt sets the "deleted_at" field.
func (dpu *DevicePosterUpdate) SetDeletedAt(u uint32) *DevicePosterUpdate {
	dpu.mutation.ResetDeletedAt()
	dpu.mutation.SetDeletedAt(u)
	return dpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillableDeletedAt(u *uint32) *DevicePosterUpdate {
	if u != nil {
		dpu.SetDeletedAt(*u)
	}
	return dpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dpu *DevicePosterUpdate) AddDeletedAt(u int32) *DevicePosterUpdate {
	dpu.mutation.AddDeletedAt(u)
	return dpu
}

// SetEntID sets the "ent_id" field.
func (dpu *DevicePosterUpdate) SetEntID(u uuid.UUID) *DevicePosterUpdate {
	dpu.mutation.SetEntID(u)
	return dpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillableEntID(u *uuid.UUID) *DevicePosterUpdate {
	if u != nil {
		dpu.SetEntID(*u)
	}
	return dpu
}

// SetDeviceTypeID sets the "device_type_id" field.
func (dpu *DevicePosterUpdate) SetDeviceTypeID(u uuid.UUID) *DevicePosterUpdate {
	dpu.mutation.SetDeviceTypeID(u)
	return dpu
}

// SetNillableDeviceTypeID sets the "device_type_id" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillableDeviceTypeID(u *uuid.UUID) *DevicePosterUpdate {
	if u != nil {
		dpu.SetDeviceTypeID(*u)
	}
	return dpu
}

// ClearDeviceTypeID clears the value of the "device_type_id" field.
func (dpu *DevicePosterUpdate) ClearDeviceTypeID() *DevicePosterUpdate {
	dpu.mutation.ClearDeviceTypeID()
	return dpu
}

// SetPoster sets the "poster" field.
func (dpu *DevicePosterUpdate) SetPoster(s string) *DevicePosterUpdate {
	dpu.mutation.SetPoster(s)
	return dpu
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillablePoster(s *string) *DevicePosterUpdate {
	if s != nil {
		dpu.SetPoster(*s)
	}
	return dpu
}

// ClearPoster clears the value of the "poster" field.
func (dpu *DevicePosterUpdate) ClearPoster() *DevicePosterUpdate {
	dpu.mutation.ClearPoster()
	return dpu
}

// SetIndex sets the "index" field.
func (dpu *DevicePosterUpdate) SetIndex(u uint8) *DevicePosterUpdate {
	dpu.mutation.ResetIndex()
	dpu.mutation.SetIndex(u)
	return dpu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (dpu *DevicePosterUpdate) SetNillableIndex(u *uint8) *DevicePosterUpdate {
	if u != nil {
		dpu.SetIndex(*u)
	}
	return dpu
}

// AddIndex adds u to the "index" field.
func (dpu *DevicePosterUpdate) AddIndex(u int8) *DevicePosterUpdate {
	dpu.mutation.AddIndex(u)
	return dpu
}

// ClearIndex clears the value of the "index" field.
func (dpu *DevicePosterUpdate) ClearIndex() *DevicePosterUpdate {
	dpu.mutation.ClearIndex()
	return dpu
}

// Mutation returns the DevicePosterMutation object of the builder.
func (dpu *DevicePosterUpdate) Mutation() *DevicePosterMutation {
	return dpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DevicePosterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dpu.defaults(); err != nil {
		return 0, err
	}
	if len(dpu.hooks) == 0 {
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevicePosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DevicePosterUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DevicePosterUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DevicePosterUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DevicePosterUpdate) defaults() error {
	if _, ok := dpu.mutation.UpdatedAt(); !ok {
		if deviceposter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deviceposter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deviceposter.UpdateDefaultUpdatedAt()
		dpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dpu *DevicePosterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DevicePosterUpdate {
	dpu.modifiers = append(dpu.modifiers, modifiers...)
	return dpu
}

func (dpu *DevicePosterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceposter.Table,
			Columns: deviceposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deviceposter.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldCreatedAt,
		})
	}
	if value, ok := dpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldCreatedAt,
		})
	}
	if value, ok := dpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldUpdatedAt,
		})
	}
	if value, ok := dpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldUpdatedAt,
		})
	}
	if value, ok := dpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldDeletedAt,
		})
	}
	if value, ok := dpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldDeletedAt,
		})
	}
	if value, ok := dpu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deviceposter.FieldEntID,
		})
	}
	if value, ok := dpu.mutation.DeviceTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deviceposter.FieldDeviceTypeID,
		})
	}
	if dpu.mutation.DeviceTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: deviceposter.FieldDeviceTypeID,
		})
	}
	if value, ok := dpu.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceposter.FieldPoster,
		})
	}
	if dpu.mutation.PosterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deviceposter.FieldPoster,
		})
	}
	if value, ok := dpu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: deviceposter.FieldIndex,
		})
	}
	if value, ok := dpu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: deviceposter.FieldIndex,
		})
	}
	if dpu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: deviceposter.FieldIndex,
		})
	}
	_spec.Modifiers = dpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DevicePosterUpdateOne is the builder for updating a single DevicePoster entity.
type DevicePosterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DevicePosterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (dpuo *DevicePosterUpdateOne) SetCreatedAt(u uint32) *DevicePosterUpdateOne {
	dpuo.mutation.ResetCreatedAt()
	dpuo.mutation.SetCreatedAt(u)
	return dpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillableCreatedAt(u *uint32) *DevicePosterUpdateOne {
	if u != nil {
		dpuo.SetCreatedAt(*u)
	}
	return dpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (dpuo *DevicePosterUpdateOne) AddCreatedAt(u int32) *DevicePosterUpdateOne {
	dpuo.mutation.AddCreatedAt(u)
	return dpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dpuo *DevicePosterUpdateOne) SetUpdatedAt(u uint32) *DevicePosterUpdateOne {
	dpuo.mutation.ResetUpdatedAt()
	dpuo.mutation.SetUpdatedAt(u)
	return dpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dpuo *DevicePosterUpdateOne) AddUpdatedAt(u int32) *DevicePosterUpdateOne {
	dpuo.mutation.AddUpdatedAt(u)
	return dpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dpuo *DevicePosterUpdateOne) SetDeletedAt(u uint32) *DevicePosterUpdateOne {
	dpuo.mutation.ResetDeletedAt()
	dpuo.mutation.SetDeletedAt(u)
	return dpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillableDeletedAt(u *uint32) *DevicePosterUpdateOne {
	if u != nil {
		dpuo.SetDeletedAt(*u)
	}
	return dpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dpuo *DevicePosterUpdateOne) AddDeletedAt(u int32) *DevicePosterUpdateOne {
	dpuo.mutation.AddDeletedAt(u)
	return dpuo
}

// SetEntID sets the "ent_id" field.
func (dpuo *DevicePosterUpdateOne) SetEntID(u uuid.UUID) *DevicePosterUpdateOne {
	dpuo.mutation.SetEntID(u)
	return dpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillableEntID(u *uuid.UUID) *DevicePosterUpdateOne {
	if u != nil {
		dpuo.SetEntID(*u)
	}
	return dpuo
}

// SetDeviceTypeID sets the "device_type_id" field.
func (dpuo *DevicePosterUpdateOne) SetDeviceTypeID(u uuid.UUID) *DevicePosterUpdateOne {
	dpuo.mutation.SetDeviceTypeID(u)
	return dpuo
}

// SetNillableDeviceTypeID sets the "device_type_id" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillableDeviceTypeID(u *uuid.UUID) *DevicePosterUpdateOne {
	if u != nil {
		dpuo.SetDeviceTypeID(*u)
	}
	return dpuo
}

// ClearDeviceTypeID clears the value of the "device_type_id" field.
func (dpuo *DevicePosterUpdateOne) ClearDeviceTypeID() *DevicePosterUpdateOne {
	dpuo.mutation.ClearDeviceTypeID()
	return dpuo
}

// SetPoster sets the "poster" field.
func (dpuo *DevicePosterUpdateOne) SetPoster(s string) *DevicePosterUpdateOne {
	dpuo.mutation.SetPoster(s)
	return dpuo
}

// SetNillablePoster sets the "poster" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillablePoster(s *string) *DevicePosterUpdateOne {
	if s != nil {
		dpuo.SetPoster(*s)
	}
	return dpuo
}

// ClearPoster clears the value of the "poster" field.
func (dpuo *DevicePosterUpdateOne) ClearPoster() *DevicePosterUpdateOne {
	dpuo.mutation.ClearPoster()
	return dpuo
}

// SetIndex sets the "index" field.
func (dpuo *DevicePosterUpdateOne) SetIndex(u uint8) *DevicePosterUpdateOne {
	dpuo.mutation.ResetIndex()
	dpuo.mutation.SetIndex(u)
	return dpuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (dpuo *DevicePosterUpdateOne) SetNillableIndex(u *uint8) *DevicePosterUpdateOne {
	if u != nil {
		dpuo.SetIndex(*u)
	}
	return dpuo
}

// AddIndex adds u to the "index" field.
func (dpuo *DevicePosterUpdateOne) AddIndex(u int8) *DevicePosterUpdateOne {
	dpuo.mutation.AddIndex(u)
	return dpuo
}

// ClearIndex clears the value of the "index" field.
func (dpuo *DevicePosterUpdateOne) ClearIndex() *DevicePosterUpdateOne {
	dpuo.mutation.ClearIndex()
	return dpuo
}

// Mutation returns the DevicePosterMutation object of the builder.
func (dpuo *DevicePosterUpdateOne) Mutation() *DevicePosterMutation {
	return dpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DevicePosterUpdateOne) Select(field string, fields ...string) *DevicePosterUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DevicePoster entity.
func (dpuo *DevicePosterUpdateOne) Save(ctx context.Context) (*DevicePoster, error) {
	var (
		err  error
		node *DevicePoster
	)
	if err := dpuo.defaults(); err != nil {
		return nil, err
	}
	if len(dpuo.hooks) == 0 {
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DevicePosterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DevicePoster)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DevicePosterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DevicePosterUpdateOne) SaveX(ctx context.Context) *DevicePoster {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DevicePosterUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DevicePosterUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DevicePosterUpdateOne) defaults() error {
	if _, ok := dpuo.mutation.UpdatedAt(); !ok {
		if deviceposter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deviceposter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deviceposter.UpdateDefaultUpdatedAt()
		dpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dpuo *DevicePosterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DevicePosterUpdateOne {
	dpuo.modifiers = append(dpuo.modifiers, modifiers...)
	return dpuo
}

func (dpuo *DevicePosterUpdateOne) sqlSave(ctx context.Context) (_node *DevicePoster, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceposter.Table,
			Columns: deviceposter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: deviceposter.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DevicePoster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceposter.FieldID)
		for _, f := range fields {
			if !deviceposter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deviceposter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldCreatedAt,
		})
	}
	if value, ok := dpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldCreatedAt,
		})
	}
	if value, ok := dpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldUpdatedAt,
		})
	}
	if value, ok := dpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldUpdatedAt,
		})
	}
	if value, ok := dpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldDeletedAt,
		})
	}
	if value, ok := dpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deviceposter.FieldDeletedAt,
		})
	}
	if value, ok := dpuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deviceposter.FieldEntID,
		})
	}
	if value, ok := dpuo.mutation.DeviceTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deviceposter.FieldDeviceTypeID,
		})
	}
	if dpuo.mutation.DeviceTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: deviceposter.FieldDeviceTypeID,
		})
	}
	if value, ok := dpuo.mutation.Poster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceposter.FieldPoster,
		})
	}
	if dpuo.mutation.PosterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deviceposter.FieldPoster,
		})
	}
	if value, ok := dpuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: deviceposter.FieldIndex,
		})
	}
	if value, ok := dpuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: deviceposter.FieldIndex,
		})
	}
	if dpuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: deviceposter.FieldIndex,
		})
	}
	_spec.Modifiers = dpuo.modifiers
	_node = &DevicePoster{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceposter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
