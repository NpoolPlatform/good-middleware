// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/stocklock"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StockLockUpdate is the builder for updating StockLock entities.
type StockLockUpdate struct {
	config
	hooks     []Hook
	mutation  *StockLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StockLockUpdate builder.
func (slu *StockLockUpdate) Where(ps ...predicate.StockLock) *StockLockUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetCreatedAt sets the "created_at" field.
func (slu *StockLockUpdate) SetCreatedAt(u uint32) *StockLockUpdate {
	slu.mutation.ResetCreatedAt()
	slu.mutation.SetCreatedAt(u)
	return slu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableCreatedAt(u *uint32) *StockLockUpdate {
	if u != nil {
		slu.SetCreatedAt(*u)
	}
	return slu
}

// AddCreatedAt adds u to the "created_at" field.
func (slu *StockLockUpdate) AddCreatedAt(u int32) *StockLockUpdate {
	slu.mutation.AddCreatedAt(u)
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *StockLockUpdate) SetUpdatedAt(u uint32) *StockLockUpdate {
	slu.mutation.ResetUpdatedAt()
	slu.mutation.SetUpdatedAt(u)
	return slu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (slu *StockLockUpdate) AddUpdatedAt(u int32) *StockLockUpdate {
	slu.mutation.AddUpdatedAt(u)
	return slu
}

// SetDeletedAt sets the "deleted_at" field.
func (slu *StockLockUpdate) SetDeletedAt(u uint32) *StockLockUpdate {
	slu.mutation.ResetDeletedAt()
	slu.mutation.SetDeletedAt(u)
	return slu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableDeletedAt(u *uint32) *StockLockUpdate {
	if u != nil {
		slu.SetDeletedAt(*u)
	}
	return slu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (slu *StockLockUpdate) AddDeletedAt(u int32) *StockLockUpdate {
	slu.mutation.AddDeletedAt(u)
	return slu
}

// SetEntID sets the "ent_id" field.
func (slu *StockLockUpdate) SetEntID(u uuid.UUID) *StockLockUpdate {
	slu.mutation.SetEntID(u)
	return slu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableEntID(u *uuid.UUID) *StockLockUpdate {
	if u != nil {
		slu.SetEntID(*u)
	}
	return slu
}

// SetStockID sets the "stock_id" field.
func (slu *StockLockUpdate) SetStockID(u uuid.UUID) *StockLockUpdate {
	slu.mutation.SetStockID(u)
	return slu
}

// SetNillableStockID sets the "stock_id" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableStockID(u *uuid.UUID) *StockLockUpdate {
	if u != nil {
		slu.SetStockID(*u)
	}
	return slu
}

// ClearStockID clears the value of the "stock_id" field.
func (slu *StockLockUpdate) ClearStockID() *StockLockUpdate {
	slu.mutation.ClearStockID()
	return slu
}

// SetUnits sets the "units" field.
func (slu *StockLockUpdate) SetUnits(d decimal.Decimal) *StockLockUpdate {
	slu.mutation.SetUnits(d)
	return slu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableUnits(d *decimal.Decimal) *StockLockUpdate {
	if d != nil {
		slu.SetUnits(*d)
	}
	return slu
}

// ClearUnits clears the value of the "units" field.
func (slu *StockLockUpdate) ClearUnits() *StockLockUpdate {
	slu.mutation.ClearUnits()
	return slu
}

// SetLockState sets the "lock_state" field.
func (slu *StockLockUpdate) SetLockState(s string) *StockLockUpdate {
	slu.mutation.SetLockState(s)
	return slu
}

// SetNillableLockState sets the "lock_state" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableLockState(s *string) *StockLockUpdate {
	if s != nil {
		slu.SetLockState(*s)
	}
	return slu
}

// ClearLockState clears the value of the "lock_state" field.
func (slu *StockLockUpdate) ClearLockState() *StockLockUpdate {
	slu.mutation.ClearLockState()
	return slu
}

// SetChargeBackState sets the "charge_back_state" field.
func (slu *StockLockUpdate) SetChargeBackState(s string) *StockLockUpdate {
	slu.mutation.SetChargeBackState(s)
	return slu
}

// SetNillableChargeBackState sets the "charge_back_state" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableChargeBackState(s *string) *StockLockUpdate {
	if s != nil {
		slu.SetChargeBackState(*s)
	}
	return slu
}

// ClearChargeBackState clears the value of the "charge_back_state" field.
func (slu *StockLockUpdate) ClearChargeBackState() *StockLockUpdate {
	slu.mutation.ClearChargeBackState()
	return slu
}

// SetExLockID sets the "ex_lock_id" field.
func (slu *StockLockUpdate) SetExLockID(u uuid.UUID) *StockLockUpdate {
	slu.mutation.SetExLockID(u)
	return slu
}

// SetNillableExLockID sets the "ex_lock_id" field if the given value is not nil.
func (slu *StockLockUpdate) SetNillableExLockID(u *uuid.UUID) *StockLockUpdate {
	if u != nil {
		slu.SetExLockID(*u)
	}
	return slu
}

// ClearExLockID clears the value of the "ex_lock_id" field.
func (slu *StockLockUpdate) ClearExLockID() *StockLockUpdate {
	slu.mutation.ClearExLockID()
	return slu
}

// Mutation returns the StockLockMutation object of the builder.
func (slu *StockLockUpdate) Mutation() *StockLockMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *StockLockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := slu.defaults(); err != nil {
		return 0, err
	}
	if len(slu.hooks) == 0 {
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockLockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *StockLockUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *StockLockUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *StockLockUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *StockLockUpdate) defaults() error {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		if stocklock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stocklock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stocklock.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (slu *StockLockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockLockUpdate {
	slu.modifiers = append(slu.modifiers, modifiers...)
	return slu
}

func (slu *StockLockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stocklock.Table,
			Columns: stocklock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: stocklock.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldCreatedAt,
		})
	}
	if value, ok := slu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldCreatedAt,
		})
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldUpdatedAt,
		})
	}
	if value, ok := slu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldUpdatedAt,
		})
	}
	if value, ok := slu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldDeletedAt,
		})
	}
	if value, ok := slu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldDeletedAt,
		})
	}
	if value, ok := slu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldEntID,
		})
	}
	if value, ok := slu.mutation.StockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldStockID,
		})
	}
	if slu.mutation.StockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: stocklock.FieldStockID,
		})
	}
	if value, ok := slu.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stocklock.FieldUnits,
		})
	}
	if slu.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stocklock.FieldUnits,
		})
	}
	if value, ok := slu.mutation.LockState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocklock.FieldLockState,
		})
	}
	if slu.mutation.LockStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocklock.FieldLockState,
		})
	}
	if value, ok := slu.mutation.ChargeBackState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocklock.FieldChargeBackState,
		})
	}
	if slu.mutation.ChargeBackStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocklock.FieldChargeBackState,
		})
	}
	if value, ok := slu.mutation.ExLockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldExLockID,
		})
	}
	if slu.mutation.ExLockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: stocklock.FieldExLockID,
		})
	}
	_spec.Modifiers = slu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocklock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StockLockUpdateOne is the builder for updating a single StockLock entity.
type StockLockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StockLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (sluo *StockLockUpdateOne) SetCreatedAt(u uint32) *StockLockUpdateOne {
	sluo.mutation.ResetCreatedAt()
	sluo.mutation.SetCreatedAt(u)
	return sluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableCreatedAt(u *uint32) *StockLockUpdateOne {
	if u != nil {
		sluo.SetCreatedAt(*u)
	}
	return sluo
}

// AddCreatedAt adds u to the "created_at" field.
func (sluo *StockLockUpdateOne) AddCreatedAt(u int32) *StockLockUpdateOne {
	sluo.mutation.AddCreatedAt(u)
	return sluo
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *StockLockUpdateOne) SetUpdatedAt(u uint32) *StockLockUpdateOne {
	sluo.mutation.ResetUpdatedAt()
	sluo.mutation.SetUpdatedAt(u)
	return sluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (sluo *StockLockUpdateOne) AddUpdatedAt(u int32) *StockLockUpdateOne {
	sluo.mutation.AddUpdatedAt(u)
	return sluo
}

// SetDeletedAt sets the "deleted_at" field.
func (sluo *StockLockUpdateOne) SetDeletedAt(u uint32) *StockLockUpdateOne {
	sluo.mutation.ResetDeletedAt()
	sluo.mutation.SetDeletedAt(u)
	return sluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableDeletedAt(u *uint32) *StockLockUpdateOne {
	if u != nil {
		sluo.SetDeletedAt(*u)
	}
	return sluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (sluo *StockLockUpdateOne) AddDeletedAt(u int32) *StockLockUpdateOne {
	sluo.mutation.AddDeletedAt(u)
	return sluo
}

// SetEntID sets the "ent_id" field.
func (sluo *StockLockUpdateOne) SetEntID(u uuid.UUID) *StockLockUpdateOne {
	sluo.mutation.SetEntID(u)
	return sluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableEntID(u *uuid.UUID) *StockLockUpdateOne {
	if u != nil {
		sluo.SetEntID(*u)
	}
	return sluo
}

// SetStockID sets the "stock_id" field.
func (sluo *StockLockUpdateOne) SetStockID(u uuid.UUID) *StockLockUpdateOne {
	sluo.mutation.SetStockID(u)
	return sluo
}

// SetNillableStockID sets the "stock_id" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableStockID(u *uuid.UUID) *StockLockUpdateOne {
	if u != nil {
		sluo.SetStockID(*u)
	}
	return sluo
}

// ClearStockID clears the value of the "stock_id" field.
func (sluo *StockLockUpdateOne) ClearStockID() *StockLockUpdateOne {
	sluo.mutation.ClearStockID()
	return sluo
}

// SetUnits sets the "units" field.
func (sluo *StockLockUpdateOne) SetUnits(d decimal.Decimal) *StockLockUpdateOne {
	sluo.mutation.SetUnits(d)
	return sluo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableUnits(d *decimal.Decimal) *StockLockUpdateOne {
	if d != nil {
		sluo.SetUnits(*d)
	}
	return sluo
}

// ClearUnits clears the value of the "units" field.
func (sluo *StockLockUpdateOne) ClearUnits() *StockLockUpdateOne {
	sluo.mutation.ClearUnits()
	return sluo
}

// SetLockState sets the "lock_state" field.
func (sluo *StockLockUpdateOne) SetLockState(s string) *StockLockUpdateOne {
	sluo.mutation.SetLockState(s)
	return sluo
}

// SetNillableLockState sets the "lock_state" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableLockState(s *string) *StockLockUpdateOne {
	if s != nil {
		sluo.SetLockState(*s)
	}
	return sluo
}

// ClearLockState clears the value of the "lock_state" field.
func (sluo *StockLockUpdateOne) ClearLockState() *StockLockUpdateOne {
	sluo.mutation.ClearLockState()
	return sluo
}

// SetChargeBackState sets the "charge_back_state" field.
func (sluo *StockLockUpdateOne) SetChargeBackState(s string) *StockLockUpdateOne {
	sluo.mutation.SetChargeBackState(s)
	return sluo
}

// SetNillableChargeBackState sets the "charge_back_state" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableChargeBackState(s *string) *StockLockUpdateOne {
	if s != nil {
		sluo.SetChargeBackState(*s)
	}
	return sluo
}

// ClearChargeBackState clears the value of the "charge_back_state" field.
func (sluo *StockLockUpdateOne) ClearChargeBackState() *StockLockUpdateOne {
	sluo.mutation.ClearChargeBackState()
	return sluo
}

// SetExLockID sets the "ex_lock_id" field.
func (sluo *StockLockUpdateOne) SetExLockID(u uuid.UUID) *StockLockUpdateOne {
	sluo.mutation.SetExLockID(u)
	return sluo
}

// SetNillableExLockID sets the "ex_lock_id" field if the given value is not nil.
func (sluo *StockLockUpdateOne) SetNillableExLockID(u *uuid.UUID) *StockLockUpdateOne {
	if u != nil {
		sluo.SetExLockID(*u)
	}
	return sluo
}

// ClearExLockID clears the value of the "ex_lock_id" field.
func (sluo *StockLockUpdateOne) ClearExLockID() *StockLockUpdateOne {
	sluo.mutation.ClearExLockID()
	return sluo
}

// Mutation returns the StockLockMutation object of the builder.
func (sluo *StockLockUpdateOne) Mutation() *StockLockMutation {
	return sluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *StockLockUpdateOne) Select(field string, fields ...string) *StockLockUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated StockLock entity.
func (sluo *StockLockUpdateOne) Save(ctx context.Context) (*StockLock, error) {
	var (
		err  error
		node *StockLock
	)
	if err := sluo.defaults(); err != nil {
		return nil, err
	}
	if len(sluo.hooks) == 0 {
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockLockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StockLock)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StockLockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *StockLockUpdateOne) SaveX(ctx context.Context) *StockLock {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *StockLockUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *StockLockUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *StockLockUpdateOne) defaults() error {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		if stocklock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stocklock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stocklock.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sluo *StockLockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockLockUpdateOne {
	sluo.modifiers = append(sluo.modifiers, modifiers...)
	return sluo
}

func (sluo *StockLockUpdateOne) sqlSave(ctx context.Context) (_node *StockLock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stocklock.Table,
			Columns: stocklock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: stocklock.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StockLock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stocklock.FieldID)
		for _, f := range fields {
			if !stocklock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stocklock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldCreatedAt,
		})
	}
	if value, ok := sluo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldCreatedAt,
		})
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldUpdatedAt,
		})
	}
	if value, ok := sluo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldUpdatedAt,
		})
	}
	if value, ok := sluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldDeletedAt,
		})
	}
	if value, ok := sluo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: stocklock.FieldDeletedAt,
		})
	}
	if value, ok := sluo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldEntID,
		})
	}
	if value, ok := sluo.mutation.StockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldStockID,
		})
	}
	if sluo.mutation.StockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: stocklock.FieldStockID,
		})
	}
	if value, ok := sluo.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: stocklock.FieldUnits,
		})
	}
	if sluo.mutation.UnitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: stocklock.FieldUnits,
		})
	}
	if value, ok := sluo.mutation.LockState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocklock.FieldLockState,
		})
	}
	if sluo.mutation.LockStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocklock.FieldLockState,
		})
	}
	if value, ok := sluo.mutation.ChargeBackState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocklock.FieldChargeBackState,
		})
	}
	if sluo.mutation.ChargeBackStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocklock.FieldChargeBackState,
		})
	}
	if value, ok := sluo.mutation.ExLockID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: stocklock.FieldExLockID,
		})
	}
	if sluo.mutation.ExLockIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: stocklock.FieldExLockID,
		})
	}
	_spec.Modifiers = sluo.modifiers
	_node = &StockLock{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocklock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
