// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/good"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodUpdate is the builder for updating Good entities.
type GoodUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodUpdate builder.
func (gu *GoodUpdate) Where(ps ...predicate.Good) *GoodUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GoodUpdate) SetCreatedAt(u uint32) *GoodUpdate {
	gu.mutation.ResetCreatedAt()
	gu.mutation.SetCreatedAt(u)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableCreatedAt(u *uint32) *GoodUpdate {
	if u != nil {
		gu.SetCreatedAt(*u)
	}
	return gu
}

// AddCreatedAt adds u to the "created_at" field.
func (gu *GoodUpdate) AddCreatedAt(u int32) *GoodUpdate {
	gu.mutation.AddCreatedAt(u)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GoodUpdate) SetUpdatedAt(u uint32) *GoodUpdate {
	gu.mutation.ResetUpdatedAt()
	gu.mutation.SetUpdatedAt(u)
	return gu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gu *GoodUpdate) AddUpdatedAt(u int32) *GoodUpdate {
	gu.mutation.AddUpdatedAt(u)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GoodUpdate) SetDeletedAt(u uint32) *GoodUpdate {
	gu.mutation.ResetDeletedAt()
	gu.mutation.SetDeletedAt(u)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableDeletedAt(u *uint32) *GoodUpdate {
	if u != nil {
		gu.SetDeletedAt(*u)
	}
	return gu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gu *GoodUpdate) AddDeletedAt(u int32) *GoodUpdate {
	gu.mutation.AddDeletedAt(u)
	return gu
}

// SetEntID sets the "ent_id" field.
func (gu *GoodUpdate) SetEntID(u uuid.UUID) *GoodUpdate {
	gu.mutation.SetEntID(u)
	return gu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableEntID(u *uuid.UUID) *GoodUpdate {
	if u != nil {
		gu.SetEntID(*u)
	}
	return gu
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gu *GoodUpdate) SetDeviceInfoID(u uuid.UUID) *GoodUpdate {
	gu.mutation.SetDeviceInfoID(u)
	return gu
}

// SetDurationDays sets the "duration_days" field.
func (gu *GoodUpdate) SetDurationDays(i int32) *GoodUpdate {
	gu.mutation.ResetDurationDays()
	gu.mutation.SetDurationDays(i)
	return gu
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableDurationDays(i *int32) *GoodUpdate {
	if i != nil {
		gu.SetDurationDays(*i)
	}
	return gu
}

// AddDurationDays adds i to the "duration_days" field.
func (gu *GoodUpdate) AddDurationDays(i int32) *GoodUpdate {
	gu.mutation.AddDurationDays(i)
	return gu
}

// ClearDurationDays clears the value of the "duration_days" field.
func (gu *GoodUpdate) ClearDurationDays() *GoodUpdate {
	gu.mutation.ClearDurationDays()
	return gu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gu *GoodUpdate) SetCoinTypeID(u uuid.UUID) *GoodUpdate {
	gu.mutation.SetCoinTypeID(u)
	return gu
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (gu *GoodUpdate) SetInheritFromGoodID(u uuid.UUID) *GoodUpdate {
	gu.mutation.SetInheritFromGoodID(u)
	return gu
}

// SetNillableInheritFromGoodID sets the "inherit_from_good_id" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableInheritFromGoodID(u *uuid.UUID) *GoodUpdate {
	if u != nil {
		gu.SetInheritFromGoodID(*u)
	}
	return gu
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (gu *GoodUpdate) ClearInheritFromGoodID() *GoodUpdate {
	gu.mutation.ClearInheritFromGoodID()
	return gu
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (gu *GoodUpdate) SetVendorLocationID(u uuid.UUID) *GoodUpdate {
	gu.mutation.SetVendorLocationID(u)
	return gu
}

// SetPrice sets the "price" field.
func (gu *GoodUpdate) SetPrice(d decimal.Decimal) *GoodUpdate {
	gu.mutation.SetPrice(d)
	return gu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (gu *GoodUpdate) SetNillablePrice(d *decimal.Decimal) *GoodUpdate {
	if d != nil {
		gu.SetPrice(*d)
	}
	return gu
}

// ClearPrice clears the value of the "price" field.
func (gu *GoodUpdate) ClearPrice() *GoodUpdate {
	gu.mutation.ClearPrice()
	return gu
}

// SetBenefitType sets the "benefit_type" field.
func (gu *GoodUpdate) SetBenefitType(s string) *GoodUpdate {
	gu.mutation.SetBenefitType(s)
	return gu
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableBenefitType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetBenefitType(*s)
	}
	return gu
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (gu *GoodUpdate) ClearBenefitType() *GoodUpdate {
	gu.mutation.ClearBenefitType()
	return gu
}

// SetGoodType sets the "good_type" field.
func (gu *GoodUpdate) SetGoodType(s string) *GoodUpdate {
	gu.mutation.SetGoodType(s)
	return gu
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableGoodType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetGoodType(*s)
	}
	return gu
}

// ClearGoodType clears the value of the "good_type" field.
func (gu *GoodUpdate) ClearGoodType() *GoodUpdate {
	gu.mutation.ClearGoodType()
	return gu
}

// SetTitle sets the "title" field.
func (gu *GoodUpdate) SetTitle(s string) *GoodUpdate {
	gu.mutation.SetTitle(s)
	return gu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableTitle(s *string) *GoodUpdate {
	if s != nil {
		gu.SetTitle(*s)
	}
	return gu
}

// ClearTitle clears the value of the "title" field.
func (gu *GoodUpdate) ClearTitle() *GoodUpdate {
	gu.mutation.ClearTitle()
	return gu
}

// SetUnit sets the "unit" field.
func (gu *GoodUpdate) SetUnit(s string) *GoodUpdate {
	gu.mutation.SetUnit(s)
	return gu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableUnit(s *string) *GoodUpdate {
	if s != nil {
		gu.SetUnit(*s)
	}
	return gu
}

// ClearUnit clears the value of the "unit" field.
func (gu *GoodUpdate) ClearUnit() *GoodUpdate {
	gu.mutation.ClearUnit()
	return gu
}

// SetQuantityUnit sets the "quantity_unit" field.
func (gu *GoodUpdate) SetQuantityUnit(s string) *GoodUpdate {
	gu.mutation.SetQuantityUnit(s)
	return gu
}

// SetNillableQuantityUnit sets the "quantity_unit" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableQuantityUnit(s *string) *GoodUpdate {
	if s != nil {
		gu.SetQuantityUnit(*s)
	}
	return gu
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (gu *GoodUpdate) ClearQuantityUnit() *GoodUpdate {
	gu.mutation.ClearQuantityUnit()
	return gu
}

// SetUnitAmount sets the "unit_amount" field.
func (gu *GoodUpdate) SetUnitAmount(i int32) *GoodUpdate {
	gu.mutation.ResetUnitAmount()
	gu.mutation.SetUnitAmount(i)
	return gu
}

// SetNillableUnitAmount sets the "unit_amount" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableUnitAmount(i *int32) *GoodUpdate {
	if i != nil {
		gu.SetUnitAmount(*i)
	}
	return gu
}

// AddUnitAmount adds i to the "unit_amount" field.
func (gu *GoodUpdate) AddUnitAmount(i int32) *GoodUpdate {
	gu.mutation.AddUnitAmount(i)
	return gu
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (gu *GoodUpdate) ClearUnitAmount() *GoodUpdate {
	gu.mutation.ClearUnitAmount()
	return gu
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (gu *GoodUpdate) SetQuantityUnitAmount(d decimal.Decimal) *GoodUpdate {
	gu.mutation.SetQuantityUnitAmount(d)
	return gu
}

// SetNillableQuantityUnitAmount sets the "quantity_unit_amount" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableQuantityUnitAmount(d *decimal.Decimal) *GoodUpdate {
	if d != nil {
		gu.SetQuantityUnitAmount(*d)
	}
	return gu
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (gu *GoodUpdate) ClearQuantityUnitAmount() *GoodUpdate {
	gu.mutation.ClearQuantityUnitAmount()
	return gu
}

// SetDeliveryAt sets the "delivery_at" field.
func (gu *GoodUpdate) SetDeliveryAt(u uint32) *GoodUpdate {
	gu.mutation.ResetDeliveryAt()
	gu.mutation.SetDeliveryAt(u)
	return gu
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableDeliveryAt(u *uint32) *GoodUpdate {
	if u != nil {
		gu.SetDeliveryAt(*u)
	}
	return gu
}

// AddDeliveryAt adds u to the "delivery_at" field.
func (gu *GoodUpdate) AddDeliveryAt(u int32) *GoodUpdate {
	gu.mutation.AddDeliveryAt(u)
	return gu
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (gu *GoodUpdate) ClearDeliveryAt() *GoodUpdate {
	gu.mutation.ClearDeliveryAt()
	return gu
}

// SetStartAt sets the "start_at" field.
func (gu *GoodUpdate) SetStartAt(u uint32) *GoodUpdate {
	gu.mutation.ResetStartAt()
	gu.mutation.SetStartAt(u)
	return gu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableStartAt(u *uint32) *GoodUpdate {
	if u != nil {
		gu.SetStartAt(*u)
	}
	return gu
}

// AddStartAt adds u to the "start_at" field.
func (gu *GoodUpdate) AddStartAt(u int32) *GoodUpdate {
	gu.mutation.AddStartAt(u)
	return gu
}

// ClearStartAt clears the value of the "start_at" field.
func (gu *GoodUpdate) ClearStartAt() *GoodUpdate {
	gu.mutation.ClearStartAt()
	return gu
}

// SetStartMode sets the "start_mode" field.
func (gu *GoodUpdate) SetStartMode(s string) *GoodUpdate {
	gu.mutation.SetStartMode(s)
	return gu
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableStartMode(s *string) *GoodUpdate {
	if s != nil {
		gu.SetStartMode(*s)
	}
	return gu
}

// ClearStartMode clears the value of the "start_mode" field.
func (gu *GoodUpdate) ClearStartMode() *GoodUpdate {
	gu.mutation.ClearStartMode()
	return gu
}

// SetTestOnly sets the "test_only" field.
func (gu *GoodUpdate) SetTestOnly(b bool) *GoodUpdate {
	gu.mutation.SetTestOnly(b)
	return gu
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableTestOnly(b *bool) *GoodUpdate {
	if b != nil {
		gu.SetTestOnly(*b)
	}
	return gu
}

// ClearTestOnly clears the value of the "test_only" field.
func (gu *GoodUpdate) ClearTestOnly() *GoodUpdate {
	gu.mutation.ClearTestOnly()
	return gu
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gu *GoodUpdate) SetBenefitIntervalHours(u uint32) *GoodUpdate {
	gu.mutation.ResetBenefitIntervalHours()
	gu.mutation.SetBenefitIntervalHours(u)
	return gu
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableBenefitIntervalHours(u *uint32) *GoodUpdate {
	if u != nil {
		gu.SetBenefitIntervalHours(*u)
	}
	return gu
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (gu *GoodUpdate) AddBenefitIntervalHours(u int32) *GoodUpdate {
	gu.mutation.AddBenefitIntervalHours(u)
	return gu
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (gu *GoodUpdate) ClearBenefitIntervalHours() *GoodUpdate {
	gu.mutation.ClearBenefitIntervalHours()
	return gu
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (gu *GoodUpdate) SetUnitLockDeposit(d decimal.Decimal) *GoodUpdate {
	gu.mutation.SetUnitLockDeposit(d)
	return gu
}

// SetNillableUnitLockDeposit sets the "unit_lock_deposit" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableUnitLockDeposit(d *decimal.Decimal) *GoodUpdate {
	if d != nil {
		gu.SetUnitLockDeposit(*d)
	}
	return gu
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (gu *GoodUpdate) ClearUnitLockDeposit() *GoodUpdate {
	gu.mutation.ClearUnitLockDeposit()
	return gu
}

// SetUnitType sets the "unit_type" field.
func (gu *GoodUpdate) SetUnitType(s string) *GoodUpdate {
	gu.mutation.SetUnitType(s)
	return gu
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableUnitType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetUnitType(*s)
	}
	return gu
}

// ClearUnitType clears the value of the "unit_type" field.
func (gu *GoodUpdate) ClearUnitType() *GoodUpdate {
	gu.mutation.ClearUnitType()
	return gu
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (gu *GoodUpdate) SetQuantityCalculateType(s string) *GoodUpdate {
	gu.mutation.SetQuantityCalculateType(s)
	return gu
}

// SetNillableQuantityCalculateType sets the "quantity_calculate_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableQuantityCalculateType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetQuantityCalculateType(*s)
	}
	return gu
}

// ClearQuantityCalculateType clears the value of the "quantity_calculate_type" field.
func (gu *GoodUpdate) ClearQuantityCalculateType() *GoodUpdate {
	gu.mutation.ClearQuantityCalculateType()
	return gu
}

// SetDurationType sets the "duration_type" field.
func (gu *GoodUpdate) SetDurationType(s string) *GoodUpdate {
	gu.mutation.SetDurationType(s)
	return gu
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableDurationType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetDurationType(*s)
	}
	return gu
}

// ClearDurationType clears the value of the "duration_type" field.
func (gu *GoodUpdate) ClearDurationType() *GoodUpdate {
	gu.mutation.ClearDurationType()
	return gu
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (gu *GoodUpdate) SetDurationCalculateType(s string) *GoodUpdate {
	gu.mutation.SetDurationCalculateType(s)
	return gu
}

// SetNillableDurationCalculateType sets the "duration_calculate_type" field if the given value is not nil.
func (gu *GoodUpdate) SetNillableDurationCalculateType(s *string) *GoodUpdate {
	if s != nil {
		gu.SetDurationCalculateType(*s)
	}
	return gu
}

// ClearDurationCalculateType clears the value of the "duration_calculate_type" field.
func (gu *GoodUpdate) ClearDurationCalculateType() *GoodUpdate {
	gu.mutation.ClearDurationCalculateType()
	return gu
}

// Mutation returns the GoodMutation object of the builder.
func (gu *GoodUpdate) Mutation() *GoodMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GoodUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GoodUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GoodUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GoodUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		if good.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized good.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := good.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   good.Table,
			Columns: good.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: good.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeletedAt,
		})
	}
	if value, ok := gu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeletedAt,
		})
	}
	if value, ok := gu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldEntID,
		})
	}
	if value, ok := gu.mutation.DeviceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldDeviceInfoID,
		})
	}
	if value, ok := gu.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldDurationDays,
		})
	}
	if value, ok := gu.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldDurationDays,
		})
	}
	if gu.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: good.FieldDurationDays,
		})
	}
	if value, ok := gu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldCoinTypeID,
		})
	}
	if value, ok := gu.mutation.InheritFromGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldInheritFromGoodID,
		})
	}
	if gu.mutation.InheritFromGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: good.FieldInheritFromGoodID,
		})
	}
	if value, ok := gu.mutation.VendorLocationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldVendorLocationID,
		})
	}
	if value, ok := gu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldPrice,
		})
	}
	if gu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldPrice,
		})
	}
	if value, ok := gu.mutation.BenefitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldBenefitType,
		})
	}
	if gu.mutation.BenefitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldBenefitType,
		})
	}
	if value, ok := gu.mutation.GoodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldGoodType,
		})
	}
	if gu.mutation.GoodTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldGoodType,
		})
	}
	if value, ok := gu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldTitle,
		})
	}
	if gu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldTitle,
		})
	}
	if value, ok := gu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldUnit,
		})
	}
	if gu.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldUnit,
		})
	}
	if value, ok := gu.mutation.QuantityUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldQuantityUnit,
		})
	}
	if gu.mutation.QuantityUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldQuantityUnit,
		})
	}
	if value, ok := gu.mutation.UnitAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldUnitAmount,
		})
	}
	if value, ok := gu.mutation.AddedUnitAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldUnitAmount,
		})
	}
	if gu.mutation.UnitAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: good.FieldUnitAmount,
		})
	}
	if value, ok := gu.mutation.QuantityUnitAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldQuantityUnitAmount,
		})
	}
	if gu.mutation.QuantityUnitAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldQuantityUnitAmount,
		})
	}
	if value, ok := gu.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeliveryAt,
		})
	}
	if value, ok := gu.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeliveryAt,
		})
	}
	if gu.mutation.DeliveryAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldDeliveryAt,
		})
	}
	if value, ok := gu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldStartAt,
		})
	}
	if value, ok := gu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldStartAt,
		})
	}
	if gu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldStartAt,
		})
	}
	if value, ok := gu.mutation.StartMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldStartMode,
		})
	}
	if gu.mutation.StartModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldStartMode,
		})
	}
	if value, ok := gu.mutation.TestOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: good.FieldTestOnly,
		})
	}
	if gu.mutation.TestOnlyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: good.FieldTestOnly,
		})
	}
	if value, ok := gu.mutation.BenefitIntervalHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gu.mutation.AddedBenefitIntervalHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if gu.mutation.BenefitIntervalHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gu.mutation.UnitLockDeposit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldUnitLockDeposit,
		})
	}
	if gu.mutation.UnitLockDepositCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldUnitLockDeposit,
		})
	}
	if value, ok := gu.mutation.UnitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldUnitType,
		})
	}
	if gu.mutation.UnitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldUnitType,
		})
	}
	if value, ok := gu.mutation.QuantityCalculateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldQuantityCalculateType,
		})
	}
	if gu.mutation.QuantityCalculateTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldQuantityCalculateType,
		})
	}
	if value, ok := gu.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldDurationType,
		})
	}
	if gu.mutation.DurationTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldDurationType,
		})
	}
	if value, ok := gu.mutation.DurationCalculateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldDurationCalculateType,
		})
	}
	if gu.mutation.DurationCalculateTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldDurationCalculateType,
		})
	}
	_spec.Modifiers = gu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{good.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodUpdateOne is the builder for updating a single Good entity.
type GoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (guo *GoodUpdateOne) SetCreatedAt(u uint32) *GoodUpdateOne {
	guo.mutation.ResetCreatedAt()
	guo.mutation.SetCreatedAt(u)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableCreatedAt(u *uint32) *GoodUpdateOne {
	if u != nil {
		guo.SetCreatedAt(*u)
	}
	return guo
}

// AddCreatedAt adds u to the "created_at" field.
func (guo *GoodUpdateOne) AddCreatedAt(u int32) *GoodUpdateOne {
	guo.mutation.AddCreatedAt(u)
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GoodUpdateOne) SetUpdatedAt(u uint32) *GoodUpdateOne {
	guo.mutation.ResetUpdatedAt()
	guo.mutation.SetUpdatedAt(u)
	return guo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (guo *GoodUpdateOne) AddUpdatedAt(u int32) *GoodUpdateOne {
	guo.mutation.AddUpdatedAt(u)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GoodUpdateOne) SetDeletedAt(u uint32) *GoodUpdateOne {
	guo.mutation.ResetDeletedAt()
	guo.mutation.SetDeletedAt(u)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableDeletedAt(u *uint32) *GoodUpdateOne {
	if u != nil {
		guo.SetDeletedAt(*u)
	}
	return guo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (guo *GoodUpdateOne) AddDeletedAt(u int32) *GoodUpdateOne {
	guo.mutation.AddDeletedAt(u)
	return guo
}

// SetEntID sets the "ent_id" field.
func (guo *GoodUpdateOne) SetEntID(u uuid.UUID) *GoodUpdateOne {
	guo.mutation.SetEntID(u)
	return guo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableEntID(u *uuid.UUID) *GoodUpdateOne {
	if u != nil {
		guo.SetEntID(*u)
	}
	return guo
}

// SetDeviceInfoID sets the "device_info_id" field.
func (guo *GoodUpdateOne) SetDeviceInfoID(u uuid.UUID) *GoodUpdateOne {
	guo.mutation.SetDeviceInfoID(u)
	return guo
}

// SetDurationDays sets the "duration_days" field.
func (guo *GoodUpdateOne) SetDurationDays(i int32) *GoodUpdateOne {
	guo.mutation.ResetDurationDays()
	guo.mutation.SetDurationDays(i)
	return guo
}

// SetNillableDurationDays sets the "duration_days" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableDurationDays(i *int32) *GoodUpdateOne {
	if i != nil {
		guo.SetDurationDays(*i)
	}
	return guo
}

// AddDurationDays adds i to the "duration_days" field.
func (guo *GoodUpdateOne) AddDurationDays(i int32) *GoodUpdateOne {
	guo.mutation.AddDurationDays(i)
	return guo
}

// ClearDurationDays clears the value of the "duration_days" field.
func (guo *GoodUpdateOne) ClearDurationDays() *GoodUpdateOne {
	guo.mutation.ClearDurationDays()
	return guo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (guo *GoodUpdateOne) SetCoinTypeID(u uuid.UUID) *GoodUpdateOne {
	guo.mutation.SetCoinTypeID(u)
	return guo
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (guo *GoodUpdateOne) SetInheritFromGoodID(u uuid.UUID) *GoodUpdateOne {
	guo.mutation.SetInheritFromGoodID(u)
	return guo
}

// SetNillableInheritFromGoodID sets the "inherit_from_good_id" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableInheritFromGoodID(u *uuid.UUID) *GoodUpdateOne {
	if u != nil {
		guo.SetInheritFromGoodID(*u)
	}
	return guo
}

// ClearInheritFromGoodID clears the value of the "inherit_from_good_id" field.
func (guo *GoodUpdateOne) ClearInheritFromGoodID() *GoodUpdateOne {
	guo.mutation.ClearInheritFromGoodID()
	return guo
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (guo *GoodUpdateOne) SetVendorLocationID(u uuid.UUID) *GoodUpdateOne {
	guo.mutation.SetVendorLocationID(u)
	return guo
}

// SetPrice sets the "price" field.
func (guo *GoodUpdateOne) SetPrice(d decimal.Decimal) *GoodUpdateOne {
	guo.mutation.SetPrice(d)
	return guo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillablePrice(d *decimal.Decimal) *GoodUpdateOne {
	if d != nil {
		guo.SetPrice(*d)
	}
	return guo
}

// ClearPrice clears the value of the "price" field.
func (guo *GoodUpdateOne) ClearPrice() *GoodUpdateOne {
	guo.mutation.ClearPrice()
	return guo
}

// SetBenefitType sets the "benefit_type" field.
func (guo *GoodUpdateOne) SetBenefitType(s string) *GoodUpdateOne {
	guo.mutation.SetBenefitType(s)
	return guo
}

// SetNillableBenefitType sets the "benefit_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableBenefitType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetBenefitType(*s)
	}
	return guo
}

// ClearBenefitType clears the value of the "benefit_type" field.
func (guo *GoodUpdateOne) ClearBenefitType() *GoodUpdateOne {
	guo.mutation.ClearBenefitType()
	return guo
}

// SetGoodType sets the "good_type" field.
func (guo *GoodUpdateOne) SetGoodType(s string) *GoodUpdateOne {
	guo.mutation.SetGoodType(s)
	return guo
}

// SetNillableGoodType sets the "good_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableGoodType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetGoodType(*s)
	}
	return guo
}

// ClearGoodType clears the value of the "good_type" field.
func (guo *GoodUpdateOne) ClearGoodType() *GoodUpdateOne {
	guo.mutation.ClearGoodType()
	return guo
}

// SetTitle sets the "title" field.
func (guo *GoodUpdateOne) SetTitle(s string) *GoodUpdateOne {
	guo.mutation.SetTitle(s)
	return guo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableTitle(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetTitle(*s)
	}
	return guo
}

// ClearTitle clears the value of the "title" field.
func (guo *GoodUpdateOne) ClearTitle() *GoodUpdateOne {
	guo.mutation.ClearTitle()
	return guo
}

// SetUnit sets the "unit" field.
func (guo *GoodUpdateOne) SetUnit(s string) *GoodUpdateOne {
	guo.mutation.SetUnit(s)
	return guo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableUnit(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetUnit(*s)
	}
	return guo
}

// ClearUnit clears the value of the "unit" field.
func (guo *GoodUpdateOne) ClearUnit() *GoodUpdateOne {
	guo.mutation.ClearUnit()
	return guo
}

// SetQuantityUnit sets the "quantity_unit" field.
func (guo *GoodUpdateOne) SetQuantityUnit(s string) *GoodUpdateOne {
	guo.mutation.SetQuantityUnit(s)
	return guo
}

// SetNillableQuantityUnit sets the "quantity_unit" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableQuantityUnit(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetQuantityUnit(*s)
	}
	return guo
}

// ClearQuantityUnit clears the value of the "quantity_unit" field.
func (guo *GoodUpdateOne) ClearQuantityUnit() *GoodUpdateOne {
	guo.mutation.ClearQuantityUnit()
	return guo
}

// SetUnitAmount sets the "unit_amount" field.
func (guo *GoodUpdateOne) SetUnitAmount(i int32) *GoodUpdateOne {
	guo.mutation.ResetUnitAmount()
	guo.mutation.SetUnitAmount(i)
	return guo
}

// SetNillableUnitAmount sets the "unit_amount" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableUnitAmount(i *int32) *GoodUpdateOne {
	if i != nil {
		guo.SetUnitAmount(*i)
	}
	return guo
}

// AddUnitAmount adds i to the "unit_amount" field.
func (guo *GoodUpdateOne) AddUnitAmount(i int32) *GoodUpdateOne {
	guo.mutation.AddUnitAmount(i)
	return guo
}

// ClearUnitAmount clears the value of the "unit_amount" field.
func (guo *GoodUpdateOne) ClearUnitAmount() *GoodUpdateOne {
	guo.mutation.ClearUnitAmount()
	return guo
}

// SetQuantityUnitAmount sets the "quantity_unit_amount" field.
func (guo *GoodUpdateOne) SetQuantityUnitAmount(d decimal.Decimal) *GoodUpdateOne {
	guo.mutation.SetQuantityUnitAmount(d)
	return guo
}

// SetNillableQuantityUnitAmount sets the "quantity_unit_amount" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableQuantityUnitAmount(d *decimal.Decimal) *GoodUpdateOne {
	if d != nil {
		guo.SetQuantityUnitAmount(*d)
	}
	return guo
}

// ClearQuantityUnitAmount clears the value of the "quantity_unit_amount" field.
func (guo *GoodUpdateOne) ClearQuantityUnitAmount() *GoodUpdateOne {
	guo.mutation.ClearQuantityUnitAmount()
	return guo
}

// SetDeliveryAt sets the "delivery_at" field.
func (guo *GoodUpdateOne) SetDeliveryAt(u uint32) *GoodUpdateOne {
	guo.mutation.ResetDeliveryAt()
	guo.mutation.SetDeliveryAt(u)
	return guo
}

// SetNillableDeliveryAt sets the "delivery_at" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableDeliveryAt(u *uint32) *GoodUpdateOne {
	if u != nil {
		guo.SetDeliveryAt(*u)
	}
	return guo
}

// AddDeliveryAt adds u to the "delivery_at" field.
func (guo *GoodUpdateOne) AddDeliveryAt(u int32) *GoodUpdateOne {
	guo.mutation.AddDeliveryAt(u)
	return guo
}

// ClearDeliveryAt clears the value of the "delivery_at" field.
func (guo *GoodUpdateOne) ClearDeliveryAt() *GoodUpdateOne {
	guo.mutation.ClearDeliveryAt()
	return guo
}

// SetStartAt sets the "start_at" field.
func (guo *GoodUpdateOne) SetStartAt(u uint32) *GoodUpdateOne {
	guo.mutation.ResetStartAt()
	guo.mutation.SetStartAt(u)
	return guo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableStartAt(u *uint32) *GoodUpdateOne {
	if u != nil {
		guo.SetStartAt(*u)
	}
	return guo
}

// AddStartAt adds u to the "start_at" field.
func (guo *GoodUpdateOne) AddStartAt(u int32) *GoodUpdateOne {
	guo.mutation.AddStartAt(u)
	return guo
}

// ClearStartAt clears the value of the "start_at" field.
func (guo *GoodUpdateOne) ClearStartAt() *GoodUpdateOne {
	guo.mutation.ClearStartAt()
	return guo
}

// SetStartMode sets the "start_mode" field.
func (guo *GoodUpdateOne) SetStartMode(s string) *GoodUpdateOne {
	guo.mutation.SetStartMode(s)
	return guo
}

// SetNillableStartMode sets the "start_mode" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableStartMode(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetStartMode(*s)
	}
	return guo
}

// ClearStartMode clears the value of the "start_mode" field.
func (guo *GoodUpdateOne) ClearStartMode() *GoodUpdateOne {
	guo.mutation.ClearStartMode()
	return guo
}

// SetTestOnly sets the "test_only" field.
func (guo *GoodUpdateOne) SetTestOnly(b bool) *GoodUpdateOne {
	guo.mutation.SetTestOnly(b)
	return guo
}

// SetNillableTestOnly sets the "test_only" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableTestOnly(b *bool) *GoodUpdateOne {
	if b != nil {
		guo.SetTestOnly(*b)
	}
	return guo
}

// ClearTestOnly clears the value of the "test_only" field.
func (guo *GoodUpdateOne) ClearTestOnly() *GoodUpdateOne {
	guo.mutation.ClearTestOnly()
	return guo
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (guo *GoodUpdateOne) SetBenefitIntervalHours(u uint32) *GoodUpdateOne {
	guo.mutation.ResetBenefitIntervalHours()
	guo.mutation.SetBenefitIntervalHours(u)
	return guo
}

// SetNillableBenefitIntervalHours sets the "benefit_interval_hours" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableBenefitIntervalHours(u *uint32) *GoodUpdateOne {
	if u != nil {
		guo.SetBenefitIntervalHours(*u)
	}
	return guo
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (guo *GoodUpdateOne) AddBenefitIntervalHours(u int32) *GoodUpdateOne {
	guo.mutation.AddBenefitIntervalHours(u)
	return guo
}

// ClearBenefitIntervalHours clears the value of the "benefit_interval_hours" field.
func (guo *GoodUpdateOne) ClearBenefitIntervalHours() *GoodUpdateOne {
	guo.mutation.ClearBenefitIntervalHours()
	return guo
}

// SetUnitLockDeposit sets the "unit_lock_deposit" field.
func (guo *GoodUpdateOne) SetUnitLockDeposit(d decimal.Decimal) *GoodUpdateOne {
	guo.mutation.SetUnitLockDeposit(d)
	return guo
}

// SetNillableUnitLockDeposit sets the "unit_lock_deposit" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableUnitLockDeposit(d *decimal.Decimal) *GoodUpdateOne {
	if d != nil {
		guo.SetUnitLockDeposit(*d)
	}
	return guo
}

// ClearUnitLockDeposit clears the value of the "unit_lock_deposit" field.
func (guo *GoodUpdateOne) ClearUnitLockDeposit() *GoodUpdateOne {
	guo.mutation.ClearUnitLockDeposit()
	return guo
}

// SetUnitType sets the "unit_type" field.
func (guo *GoodUpdateOne) SetUnitType(s string) *GoodUpdateOne {
	guo.mutation.SetUnitType(s)
	return guo
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableUnitType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetUnitType(*s)
	}
	return guo
}

// ClearUnitType clears the value of the "unit_type" field.
func (guo *GoodUpdateOne) ClearUnitType() *GoodUpdateOne {
	guo.mutation.ClearUnitType()
	return guo
}

// SetQuantityCalculateType sets the "quantity_calculate_type" field.
func (guo *GoodUpdateOne) SetQuantityCalculateType(s string) *GoodUpdateOne {
	guo.mutation.SetQuantityCalculateType(s)
	return guo
}

// SetNillableQuantityCalculateType sets the "quantity_calculate_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableQuantityCalculateType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetQuantityCalculateType(*s)
	}
	return guo
}

// ClearQuantityCalculateType clears the value of the "quantity_calculate_type" field.
func (guo *GoodUpdateOne) ClearQuantityCalculateType() *GoodUpdateOne {
	guo.mutation.ClearQuantityCalculateType()
	return guo
}

// SetDurationType sets the "duration_type" field.
func (guo *GoodUpdateOne) SetDurationType(s string) *GoodUpdateOne {
	guo.mutation.SetDurationType(s)
	return guo
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableDurationType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetDurationType(*s)
	}
	return guo
}

// ClearDurationType clears the value of the "duration_type" field.
func (guo *GoodUpdateOne) ClearDurationType() *GoodUpdateOne {
	guo.mutation.ClearDurationType()
	return guo
}

// SetDurationCalculateType sets the "duration_calculate_type" field.
func (guo *GoodUpdateOne) SetDurationCalculateType(s string) *GoodUpdateOne {
	guo.mutation.SetDurationCalculateType(s)
	return guo
}

// SetNillableDurationCalculateType sets the "duration_calculate_type" field if the given value is not nil.
func (guo *GoodUpdateOne) SetNillableDurationCalculateType(s *string) *GoodUpdateOne {
	if s != nil {
		guo.SetDurationCalculateType(*s)
	}
	return guo
}

// ClearDurationCalculateType clears the value of the "duration_calculate_type" field.
func (guo *GoodUpdateOne) ClearDurationCalculateType() *GoodUpdateOne {
	guo.mutation.ClearDurationCalculateType()
	return guo
}

// Mutation returns the GoodMutation object of the builder.
func (guo *GoodUpdateOne) Mutation() *GoodMutation {
	return guo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GoodUpdateOne) Select(field string, fields ...string) *GoodUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Good entity.
func (guo *GoodUpdateOne) Save(ctx context.Context) (*Good, error) {
	var (
		err  error
		node *Good
	)
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Good)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GoodUpdateOne) SaveX(ctx context.Context) *Good {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GoodUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GoodUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GoodUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		if good.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized good.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := good.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GoodUpdateOne) sqlSave(ctx context.Context) (_node *Good, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   good.Table,
			Columns: good.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: good.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Good.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, good.FieldID)
		for _, f := range fields {
			if !good.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != good.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeletedAt,
		})
	}
	if value, ok := guo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeletedAt,
		})
	}
	if value, ok := guo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldEntID,
		})
	}
	if value, ok := guo.mutation.DeviceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldDeviceInfoID,
		})
	}
	if value, ok := guo.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldDurationDays,
		})
	}
	if value, ok := guo.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldDurationDays,
		})
	}
	if guo.mutation.DurationDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: good.FieldDurationDays,
		})
	}
	if value, ok := guo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldCoinTypeID,
		})
	}
	if value, ok := guo.mutation.InheritFromGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldInheritFromGoodID,
		})
	}
	if guo.mutation.InheritFromGoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: good.FieldInheritFromGoodID,
		})
	}
	if value, ok := guo.mutation.VendorLocationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: good.FieldVendorLocationID,
		})
	}
	if value, ok := guo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldPrice,
		})
	}
	if guo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldPrice,
		})
	}
	if value, ok := guo.mutation.BenefitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldBenefitType,
		})
	}
	if guo.mutation.BenefitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldBenefitType,
		})
	}
	if value, ok := guo.mutation.GoodType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldGoodType,
		})
	}
	if guo.mutation.GoodTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldGoodType,
		})
	}
	if value, ok := guo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldTitle,
		})
	}
	if guo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldTitle,
		})
	}
	if value, ok := guo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldUnit,
		})
	}
	if guo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldUnit,
		})
	}
	if value, ok := guo.mutation.QuantityUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldQuantityUnit,
		})
	}
	if guo.mutation.QuantityUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldQuantityUnit,
		})
	}
	if value, ok := guo.mutation.UnitAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldUnitAmount,
		})
	}
	if value, ok := guo.mutation.AddedUnitAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: good.FieldUnitAmount,
		})
	}
	if guo.mutation.UnitAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: good.FieldUnitAmount,
		})
	}
	if value, ok := guo.mutation.QuantityUnitAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldQuantityUnitAmount,
		})
	}
	if guo.mutation.QuantityUnitAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldQuantityUnitAmount,
		})
	}
	if value, ok := guo.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeliveryAt,
		})
	}
	if value, ok := guo.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldDeliveryAt,
		})
	}
	if guo.mutation.DeliveryAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldDeliveryAt,
		})
	}
	if value, ok := guo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldStartAt,
		})
	}
	if value, ok := guo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldStartAt,
		})
	}
	if guo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldStartAt,
		})
	}
	if value, ok := guo.mutation.StartMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldStartMode,
		})
	}
	if guo.mutation.StartModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldStartMode,
		})
	}
	if value, ok := guo.mutation.TestOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: good.FieldTestOnly,
		})
	}
	if guo.mutation.TestOnlyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: good.FieldTestOnly,
		})
	}
	if value, ok := guo.mutation.BenefitIntervalHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if value, ok := guo.mutation.AddedBenefitIntervalHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if guo.mutation.BenefitIntervalHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: good.FieldBenefitIntervalHours,
		})
	}
	if value, ok := guo.mutation.UnitLockDeposit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: good.FieldUnitLockDeposit,
		})
	}
	if guo.mutation.UnitLockDepositCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: good.FieldUnitLockDeposit,
		})
	}
	if value, ok := guo.mutation.UnitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldUnitType,
		})
	}
	if guo.mutation.UnitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldUnitType,
		})
	}
	if value, ok := guo.mutation.QuantityCalculateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldQuantityCalculateType,
		})
	}
	if guo.mutation.QuantityCalculateTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldQuantityCalculateType,
		})
	}
	if value, ok := guo.mutation.DurationType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldDurationType,
		})
	}
	if guo.mutation.DurationTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldDurationType,
		})
	}
	if value, ok := guo.mutation.DurationCalculateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: good.FieldDurationCalculateType,
		})
	}
	if guo.mutation.DurationCalculateTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: good.FieldDurationCalculateType,
		})
	}
	_spec.Modifiers = guo.modifiers
	_node = &Good{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{good.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
