// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/good-middleware/pkg/db/ent/goodreward"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodReward is the model entity for the GoodReward schema.
type GoodReward struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// BenefitState holds the value of the "benefit_state" field.
	BenefitState string `json:"benefit_state,omitempty"`
	// LastBenefitAt holds the value of the "last_benefit_at" field.
	LastBenefitAt uint32 `json:"last_benefit_at,omitempty"`
	// BenefitTids holds the value of the "benefit_tids" field.
	BenefitTids []uuid.UUID `json:"benefit_tids,omitempty"`
	// NextBenefitStartAmount holds the value of the "next_benefit_start_amount" field.
	NextBenefitStartAmount decimal.Decimal `json:"next_benefit_start_amount,omitempty"`
	// LastBenefitAmount holds the value of the "last_benefit_amount" field.
	LastBenefitAmount decimal.Decimal `json:"last_benefit_amount,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodReward) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodreward.FieldBenefitTids:
			values[i] = new([]byte)
		case goodreward.FieldNextBenefitStartAmount, goodreward.FieldLastBenefitAmount:
			values[i] = new(decimal.Decimal)
		case goodreward.FieldCreatedAt, goodreward.FieldUpdatedAt, goodreward.FieldDeletedAt, goodreward.FieldLastBenefitAt:
			values[i] = new(sql.NullInt64)
		case goodreward.FieldBenefitState:
			values[i] = new(sql.NullString)
		case goodreward.FieldID, goodreward.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodReward", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodReward fields.
func (gr *GoodReward) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodreward.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gr.ID = *value
			}
		case goodreward.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = uint32(value.Int64)
			}
		case goodreward.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = uint32(value.Int64)
			}
		case goodreward.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gr.DeletedAt = uint32(value.Int64)
			}
		case goodreward.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gr.GoodID = *value
			}
		case goodreward.FieldBenefitState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_state", values[i])
			} else if value.Valid {
				gr.BenefitState = value.String
			}
		case goodreward.FieldLastBenefitAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_benefit_at", values[i])
			} else if value.Valid {
				gr.LastBenefitAt = uint32(value.Int64)
			}
		case goodreward.FieldBenefitTids:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_tids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.BenefitTids); err != nil {
					return fmt.Errorf("unmarshal field benefit_tids: %w", err)
				}
			}
		case goodreward.FieldNextBenefitStartAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field next_benefit_start_amount", values[i])
			} else if value != nil {
				gr.NextBenefitStartAmount = *value
			}
		case goodreward.FieldLastBenefitAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field last_benefit_amount", values[i])
			} else if value != nil {
				gr.LastBenefitAmount = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodReward.
// Note that you need to call GoodReward.Unwrap() before calling this method if this GoodReward
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GoodReward) Update() *GoodRewardUpdateOne {
	return (&GoodRewardClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the GoodReward entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GoodReward) Unwrap() *GoodReward {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodReward is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GoodReward) String() string {
	var builder strings.Builder
	builder.WriteString("GoodReward(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.GoodID))
	builder.WriteString(", ")
	builder.WriteString("benefit_state=")
	builder.WriteString(gr.BenefitState)
	builder.WriteString(", ")
	builder.WriteString("last_benefit_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.LastBenefitAt))
	builder.WriteString(", ")
	builder.WriteString("benefit_tids=")
	builder.WriteString(fmt.Sprintf("%v", gr.BenefitTids))
	builder.WriteString(", ")
	builder.WriteString("next_benefit_start_amount=")
	builder.WriteString(fmt.Sprintf("%v", gr.NextBenefitStartAmount))
	builder.WriteString(", ")
	builder.WriteString("last_benefit_amount=")
	builder.WriteString(fmt.Sprintf("%v", gr.LastBenefitAmount))
	builder.WriteByte(')')
	return builder.String()
}

// GoodRewards is a parsable slice of GoodReward.
type GoodRewards []*GoodReward

func (gr GoodRewards) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
